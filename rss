<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2020-10-06T06:01:16+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Spell Check Your LaTeX Writings Using GNU Aspell</title><link href="https://www.yegor256.com/2020/10/06/latex-spell-checking.html" rel="alternate" type="text/html" title="Spell Check Your LaTeX Writings Using GNU Aspell" /><published>2020-10-06T00:00:00+00:00</published><updated>2020-10-06T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/10/06/latex-spell-checking</id><content type="html" xml:base="https://www.yegor256.com/2020/10/06/latex-spell-checking.html">&lt;p&gt;Do you use &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;
for your academic and technical writings? You don’t?
Well you should! It’s the &lt;del&gt;most&lt;/del&gt; only professional instrument for
making properly formatted PDF documents.
MS Word and Apple Pages are for &lt;del&gt;secretaries&lt;/del&gt; non-tech people,
while LaTeX is serious. It’s perfect in so many ways, thanks to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt;
(the creator of TeX) and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Leslie_Lamport&quot;&gt;Leslie Lamport&lt;/a&gt;
(the author of LaTeX),
but it lacks one very convenient feature:
&lt;a href=&quot;https://tex.stackexchange.com/questions/42843&quot;&gt;spell checking&lt;/a&gt;.
The only solution I’ve found so far, which works perfectly for my documents, is
&lt;a href=&quot;http://aspell.net/&quot;&gt;GNU aspell&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Zero 2 (2010) by Emilis Velyvis&quot; src=&quot;/images/2020/10/zero-2.jpg&quot; longdesc=&quot;#e03fe95c&quot; /&gt;&lt;figcaption id=&quot;e03fe95c&quot;&gt;Zero 2 (2010) by Emilis Velyvis&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://aspell.net/&quot;&gt;GNU aspell&lt;/a&gt; is a command line tool
which expects you to provide the LaTeX source code
(indeed, it is code, not “text”) as an input and prints a list of found spelling
errors. The beauty of it is that it checks only the text, ignoring
TeX commands. For example, this is LaTeX document:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;\documentclass{article}
\begin{document}
Hello, \textbf{Yegor}!
\end{document}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we feed this text to some other spell checker (or GNU aspell without the
option &lt;code&gt;--mode=tex&lt;/code&gt;) the word &lt;code&gt;textbf&lt;/code&gt; would be an obvious spelling mistake; aspell,
however, understands it as a LaTeX command and ignores it.
Moreover, aspell can understand the word &lt;code&gt;Yegor&lt;/code&gt;, even though it’s not
an English word, by using a custom dictionary provided by the &lt;code&gt;--pws&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;There are a few other useful features in aspell. Long story short, I decided to create
a small wrapper around aspell, to simplify the process of its configuration:
&lt;a href=&quot;https://github.com/yegor256/texsc&quot;&gt;texsc&lt;/a&gt;
(stands for “TeX Spell Checking”).
It’s a command line tool, which you install and then run, for example like this
(you can see how it’s configured in the &lt;code&gt;Makefile&lt;/code&gt; of
&lt;a href=&quot;https://github.com/yegor256/requs-paper&quot;&gt;this paper&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ texsc --pws aspell.en.pws --ignore=code,citep article.tex&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is a list of arguments you can supply to &lt;code&gt;texsc&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;--pws&lt;/code&gt; is the location of a custom dictionary, where each
line is a word aspell is supposed to ignore. It’s important to
have the first line equal to &lt;code&gt;personal_ws-1.1 en 741 utf-8&lt;/code&gt;. Why?
I don’t know. But if it contains something else, aspell will just
silently ignore the file. Nice, huh?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;--ignore&lt;/code&gt; (you may have many of them) is the list of
TeX commands, and which arguments should be ignored. A good example is the
&lt;code&gt;\code{}&lt;/code&gt; command, which in all cases has something that is not
an English word. You may also have commands with multiple arguments,
in which case you say something like &lt;code&gt;--ignore=code:op&lt;/code&gt; and in the
command &lt;code&gt;\code[foo]{bar}&lt;/code&gt; both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; will be ignored.
The &lt;code&gt;:op&lt;/code&gt; suffix means that an optional (&lt;code&gt;o&lt;/code&gt;) argument is ignored and then
a mandatory one (&lt;code&gt;p&lt;/code&gt;). Something like &lt;code&gt;:oppp&lt;/code&gt; would tell aspell
to ignore one optional and then three mandatory arguments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;--min-word-length&lt;/code&gt; is the minimum length of word to pay attention to.
I use the number &lt;code&gt;3&lt;/code&gt; and this is the default value. Shorter words (one or two characters)
are not important and don’t need to be spell-checked.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use &lt;code&gt;texsc&lt;/code&gt; in all my LaTeX projects, usually as part of their
build cycle, which I automate with &lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;GNU make&lt;/a&gt;.
You can do the same, as it’s open source.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="latex" /><summary type="html">Do you use LaTeX for your academic and technical writings? You don’t? Well you should! It’s the most only professional instrument for making properly formatted PDF documents. MS Word and Apple Pages are for secretaries non-tech people, while LaTeX is serious. It’s perfect in so many ways, thanks to Donald Knuth (the creator of TeX) and Leslie Lamport (the author of LaTeX), but it lacks one very convenient feature: spell checking. The only solution I’ve found so far, which works perfectly for my documents, is GNU aspell.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/10/zero-2.jpg" /></entry><entry><title type="html">Open Source Etiquette</title><link href="https://www.yegor256.com/2020/07/29/open-source-etiquette.html" rel="alternate" type="text/html" title="Open Source Etiquette" /><published>2020-07-29T00:00:00+00:00</published><updated>2020-07-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/07/29/open-source-etiquette</id><content type="html" xml:base="https://www.yegor256.com/2020/07/29/open-source-etiquette.html">&lt;p&gt;Here is a short list of common courtesy rules for open source
software development. Actually, they apply elsewhere also, but they are most
visible when you do GitHub-based coding. I strongly believe that
sooner or later all programming will be open source and these rules
will apply to everybody. Consequently, it makes sense to start following them now,
whether you are an active Apache contributor or a happy owner
of the “Java for Dummies” book.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Hong Kil-dong (1986) by Kil-in Kim&quot; src=&quot;/images/2020/07/hong-kil-dong.jpg&quot; longdesc=&quot;#87cd841c&quot; /&gt;&lt;figcaption id=&quot;87cd841c&quot;&gt;Hong Kil-dong (1986) by Kil-in Kim&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In no particular order:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Small &lt;a href=&quot;https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests&quot;&gt;Pull Requests&lt;/a&gt;&lt;/strong&gt;.
Some recent &lt;a href=&quot;https://www.researchgate.net/publication/325730783_Modern_code_review_a_case_study_at_google&quot;&gt;research&lt;/a&gt;
done by Caitlin Sadowski et al. from Google and the University of Zurich
demonstrated that there is a strong correlation between change size
and review quality: larger changes (pull requests) negatively affect quality.
According to this article, Google developers
are strongly encouraged to make small, incremental changes.
Aside from &lt;a href=&quot;https://google.github.io/eng-practices/review/developer/small-cls.html&quot;&gt;Google&lt;/a&gt;,
many others explicitly say the same:
&lt;a href=&quot;https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/PullRequests.html#keep-pull-requests-small&quot;&gt;Microsoft&lt;/a&gt;,
&lt;a href=&quot;https://engineering.zalando.com/posts/2017/10/a-plea-for-small-pull-requests.html&quot;&gt;Zalando&lt;/a&gt;,
&lt;a href=&quot;https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests&quot;&gt;Atlassian&lt;/a&gt;,
and
&lt;a href=&quot;https://opensource.com/article/18/6/anatomy-perfect-pull-request&quot;&gt;OpenSource.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use &lt;a href=&quot;https://docs.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax&quot;&gt;Nice&lt;/a&gt;
&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Markdown&lt;/a&gt; in Your Docs&lt;/strong&gt;.
I didn’t manage to find any scientific research on this, maybe because it’s
obvious: the text “why is &lt;code&gt;f&lt;/code&gt; &lt;code&gt;nil&lt;/code&gt;?” is much easier to read than “why is f nil?”
Rich text formatting not only makes the text look nicer, but also helps
readers digest the content faster and with more pleasure. After you learn Markdown,
I’d suggest reading this blog post by Aaron Stannard from PetaBridge:
&lt;a href=&quot;https://petabridge.com/blog/use-github-professionally/&quot;&gt;How to Use Github Professionally&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Say Please, Thanks, and Sorry&lt;/strong&gt;.
&lt;a href=&quot;https://nypost.com/2014/02/15/popes-advice-to-couples-say-please-thanks-and-sorry/&quot;&gt;According&lt;/a&gt;
to Pope Francis, the recipe for success lies in saying three simple words.
He didn’t mean open source developers, but the advice perfectly applies to
us programmers. There are tons of articles written about online etiquette, all
of them are basically the same:
ask nicely, be grateful, and be ready to admit a mistake. I would recommend
&lt;a href=&quot;https://ben.balter.com/2014/11/06/rules-of-communicating-at-github/&quot;&gt;15 rules for communicating at GitHub&lt;/a&gt;
by Ben Balter, a Senior Product Manager at GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Descriptive &lt;a href=&quot;https://git-scm.com/docs/git-commit&quot;&gt;Commits&lt;/a&gt;&lt;/strong&gt;.
The style of formatting Git commit messages (I’m sure you are using Git) is usually
very specific in each project. However, there are some similarities and
common rules. I would recommend these blog posts:
&lt;a href=&quot;https://chris.beams.io/posts/git-commit/&quot;&gt;How to Write a Git Commit Message&lt;/a&gt; by Chris Beams,
&lt;a href=&quot;https://hackernoon.com/git-it-together-some-tips-on-commit-etiquette-and-best-practices-for-junior-developers-1f147b8dfd56&quot;&gt;Some tips on commit etiquette&lt;/a&gt; by Jeremy Gunter,
and
&lt;a href=&quot;https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;A Note About Git Commit Messages&lt;/a&gt; by Tim Pope.
Also, check these out:
&lt;a href=&quot;https://www.conventionalcommits.org/&quot;&gt;conventionalcommits.org&lt;/a&gt;
and
&lt;a href=&quot;https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting&quot;&gt;50/72 Formatting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have an &lt;a href=&quot;https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/personalizing-your-profile&quot;&gt;Avatar&lt;/a&gt;&lt;/strong&gt;.
A &lt;a href=&quot;https://academic.oup.com/jcmc/article/11/1/153/4616661&quot;&gt;study&lt;/a&gt; by
Kristine L. Nowak et al. from the University of Connecticut,
demonstrates that users with avatars, especially feminine and anthropomorphic ones,
are more likely to catch attention than those who have
no profile pictures (or have default ones provided by GitHub).
Of course, it’s not only the avatar that matters; your GitHub profile
must also have many other things: description, email, pinned repositories, etc.
Use this profile as an example: &lt;a href=&quot;https://github.com/m0nica&quot;&gt;@m0nica&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Online&lt;/strong&gt;.
Offline communication is much cheaper than online tickets:
just shout out a question in the office and you get an answer immediately.
No need to write those long tickets, formulating questions in English, waiting
for the assignee to post an answer, and so on. However, offline talk
hurts the project, for &lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;so many reasons&lt;/a&gt;.
Every time you move from a
GitHub issue to a Slack chat to discuss the problem, you are doing a disservice
to the project and all its participants. Remember that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Report Nicely&lt;/strong&gt;.
Just like with Git commits, bug reporting rules differ from project to project,
but the basic principles remain &lt;a href=&quot;/2018/04/24/right-way-to-report-bugs.html&quot;&gt;the same&lt;/a&gt;.
Just google “&lt;a href=&quot;https://www.google.com/search?q=how+to+write+a+bug+report&quot;&gt;how to write a bug report&lt;/a&gt;”
and listen to what those bloggers say. Your bug reports demonstrate
&lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;who you are&lt;/a&gt;
even better than your code. You may practice by submitting questions
to StackOverflow: the community there will punish you for all your mistakes,
quickly training your reporting skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Elegant READMEs&lt;/strong&gt;.
I wrote about this &lt;a href=&quot;/2019/04/23/elegant-readme.html&quot;&gt;before&lt;/a&gt;:
the importance of a perfectly written and formatted
&lt;code&gt;README&lt;/code&gt; file in an open source project is difficult to overemphasize.
Writing good code is important, but presenting it is part of online
etiquette: high-quality documentation means respect to the users
of your products.&lt;/p&gt;

&lt;p&gt;This seems to be it. If you do all of these, you will demonstrate
respect to other developers and they will respect you in return.
Did I forget anything important?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oss" /><summary type="html">Here is a short list of common courtesy rules for open source software development. Actually, they apply elsewhere also, but they are most visible when you do GitHub-based coding. I strongly believe that sooner or later all programming will be open source and these rules will apply to everybody. Consequently, it makes sense to start following them now, whether you are an active Apache contributor or a happy owner of the “Java for Dummies” book.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/07/hong-kil-dong.jpg" /></entry><entry><title type="html">To Measure or Not to Measure</title><link href="https://www.yegor256.com/2020/06/23/individual-performance-metrics.html" rel="alternate" type="text/html" title="To Measure or Not to Measure" /><published>2020-06-23T00:00:00+00:00</published><updated>2020-06-23T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/06/23/individual-performance-metrics</id><content type="html" xml:base="https://www.yegor256.com/2020/06/23/individual-performance-metrics.html">&lt;p&gt;The question &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/26596/metric-by-which-to-hold-developers-accountable&quot;&gt;was asked&lt;/a&gt;
on StackExchange nine years ago (just around
the time the site was launched): “If not
&lt;a href=&quot;https://en.wikipedia.org/wiki/Source_lines_of_code&quot;&gt;lines of code&lt;/a&gt;, then what is
a good metric by which to measure the effectiveness of remote programmers.”
The answers,
&lt;a href=&quot;https://www.youtube.com/watch?v=OOAMNOso46g&quot;&gt;not surprisingly&lt;/a&gt;,
were all along this line: programmers are not supposed to be measured!
I bet those who answered were programmers themselves.
Indeed, &lt;a href=&quot;https://www.youtube.com/watch?v=sZoJ3gO4PSo&quot;&gt;why&lt;/a&gt;
would a programmer be interested in being measured and being
reduced to a mere number?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Better Call Saul, Season 5 (2019) by Vince Gilligan et al.&quot; src=&quot;/images/2020/06/better-call-saul.jpg&quot; longdesc=&quot;#02f3fa00&quot; /&gt;&lt;figcaption id=&quot;02f3fa00&quot;&gt;Better Call Saul, Season 5 (2019) by Vince Gilligan et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, let’s see why putting a metric on a programmer
may be considered bad practice (my opinion: these are merely excuses
from overly-paid programmers/managers who are just trying to keep their jobs, doing
&lt;del&gt;nothing&lt;/del&gt; whatever they want, and wasting employers’ money):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“Individual performance metrics are against the spirit of Scrum,”
&lt;a href=&quot;https://www.scrum.org/forum/scrum-forum/13381/individual-performance-scrum-enviornment&quot;&gt;says&lt;/a&gt;
&lt;a href=&quot;https://www.scrum.org/user/186863&quot;&gt;Selçuk Özdoğan&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“A hero mindset, if left unchecked, plagues the team spirit,”
&lt;a href=&quot;https://medium.com/unboxing-product-management/how-to-reward-individual-performance-in-agile-teams-21dd7bc1a4e2&quot;&gt;says&lt;/a&gt;
Bhuwan Jain, a Product Manager at &lt;a href=&quot;https://www.quovantis.com/&quot;&gt;Quovantis&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Performance reviews destroy morale and kill teamwork,”
&lt;a href=&quot;https://www.wsj.com/articles/SB122426318874844933&quot;&gt;says&lt;/a&gt;
&lt;a href=&quot;https://www.anderson.ucla.edu/faculty-and-research/management-and-organizations/faculty/culbert&quot;&gt;Samuel A. Culbert&lt;/a&gt;,
a professor of management at the
&lt;a href=&quot;https://www.anderson.ucla.edu/&quot;&gt;UCLA Anderson School of Management&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Individual rewards foster competition in an environment
where co-operation is essential for success,”
&lt;a href=&quot;http://www.agilebuddha.com/agile/metrics-to-build-great-agile-teams-measure-influence-not-control/&quot;&gt;says&lt;/a&gt;
&lt;a href=&quot;http://www.agilebuddha.com/author/admin/&quot;&gt;Avienaash Shiralige&lt;/a&gt;,
an Agile Coach at &lt;a href=&quot;http://www.agilebuddha.com/&quot;&gt;AgileBuddha&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Individual metrics discourage team collaboration,”
&lt;a href=&quot;https://www.infoq.com/articles/not-destroy-team-metrics/&quot;&gt;says&lt;/a&gt;
Sean McHugh, a Scrum Master at &lt;a href=&quot;https://www.axosoft.com/&quot;&gt;Axosoft&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Performance reviews are harmful and completely unnecessary,”
&lt;a href=&quot;https://scrumology.com/performance-evaluations-and-scrum/&quot;&gt;says&lt;/a&gt;
Kane Mar, a co-founder and principal consultant for
&lt;a href=&quot;https://scrumology.com/&quot;&gt;Scrumology&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Performance metrics discourage initiative, innovation and risk-taking,”
&lt;a href=&quot;https://aeon.co/ideas/against-metrics-how-measuring-performance-by-numbers-backfires&quot;&gt;says&lt;/a&gt;
&lt;a href=&quot;https://press.princeton.edu/our-authors/muller-jerry-z&quot;&gt;Jerry Z Muller&lt;/a&gt;,
author of
&lt;a href=&quot;https://press.princeton.edu/books/hardcover/9780691174952/the-tyranny-of-metrics&quot;&gt;The Tyranny of Metrics&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Human beings cannot, by their nature, be reduced to a number,”
&lt;a href=&quot;https://resources.collab.net/blogs/measuring-individual-performance-can-a-person-be-reduced-to-a-number&quot;&gt;says&lt;/a&gt;
&lt;a href=&quot;https://www.scrumalliance.org/community/profile/jfosdick&quot;&gt;Jimi Fosdick&lt;/a&gt;,
a certified Scrum Trainer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you like that? “Keep paying me, but don’t expect me to give
you anything back! And don’t you dare check my performance!”—this
is what I hear and I’m not surprised. What’s happening is called
the &lt;a href=&quot;https://hbr.org/2016/10/the-performance-management-revolution&quot;&gt;performance management revolution&lt;/a&gt;
and the gist of it is this: modern management is so weak that we desperately
need an official name for this chaos, to avoid confusion. Agile is the name.&lt;/p&gt;

&lt;p&gt;Managers are &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;not in charge&lt;/a&gt;
anymore, programmers are. And it’s sad.&lt;/p&gt;

&lt;p&gt;However, not everybody believes in this anarchy. Some experts think that metrics
are actually helpful. Bradley Kirkman et al.
&lt;a href=&quot;https://hbr.org/2016/03/teamwork-works-best-when-top-performers-are-rewarded&quot;&gt;claim&lt;/a&gt; that
“recognizing a single team member seems to have a positive and contagious
effect on all the other members in the team,”
and the famous &lt;a href=&quot;https://en.wikipedia.org/wiki/Vitality_curve&quot;&gt;Vitality Curve&lt;/a&gt;
suggested by &lt;a href=&quot;https://en.wikipedia.org/wiki/Jack_Welch&quot;&gt;Jack Welch&lt;/a&gt;
in 2001 is still with us.&lt;/p&gt;

&lt;p&gt;I believe the all the negativity aimed at metrics is caused by their
incorrect usage. Indeed, if the only performance metric of
software engineers, for example, is the amount of hours they stay in the office,
that will suggest only bad things about &lt;em&gt;all&lt;/em&gt; metrics. Such metrics do hurt, no doubt about that.
But the absence of &lt;em&gt;good&lt;/em&gt; metrics hurts even more.
How to chose them—is the real question. Let me suggest a few,
instead of the famous and incorrect LoC.
Ideally you would pick a combination from this list, or even use them all together:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Features Delivered&lt;/strong&gt;.
Add a “feature” label to a ticket (or a GitHub issue) and then count
the amount of tickets closed by a programmer with this label attached.
Of course, each ticket must be closed by a product manager, not
by the programmer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pull Requests Merged&lt;/strong&gt;.
Each pull request has to be peer reviewed to make sure it makes sense
and adheres to the quality standard of the project. Pull requests that
are too small or too big must be rejected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bugs Fixed&lt;/strong&gt;.
Bugs work the same way as features, but are usually smaller. The more
bugs a programmers closes, the better. Of course, closing must be done
by product managers or other programmers who reported the bugs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bugs Reported&lt;/strong&gt;.
Once a bug is reported and accepted by the project, the reporter
must get an extra point. This is how the quality of a project grows:
by &lt;a href=&quot;/2018/07/24/bugs-or-pull-requests.html&quot;&gt;encouraging&lt;/a&gt;
everybody to report bugs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Releases Published&lt;/strong&gt;.
In a disciplined project new versions are released every day; in others,
every week or every few months (or never). Every release is a stressful operation
and it only seems logical to reward programmers for them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Uptime&lt;/strong&gt;.
There is a set of DevOps metrics that demonstrate the quality of
service in production, including
&lt;a href=&quot;https://en.wikipedia.org/wiki/Mean_time_between_failures&quot;&gt;MTBF&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Mean_time_between_failures#Variations_of_MTBF&quot;&gt;MTTF&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Failure_rate&quot;&gt;failure rate&lt;/a&gt;,
and so on. The longer the uptime, the better the programmers
and their product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cost of Pull Request&lt;/strong&gt;.
The less time it takes to merge a pull request submitted by a programmer,
the better the programmer, I believe. The faster their PRs
go through peer reviews and quality control, the better. Junior
programmers usually submit overly large or complex PRs, causing a lot
of trouble during peer review. They also cause merge conflicts and
sometimes even stale branches and never-good-to-merge PRs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Documentation Pages Published&lt;/strong&gt;.
FAQ pages, Javadoc blocks, Wiki pages, blog posts, and so on—they help
the project get closer to users and to future developers by increasing
maintainability. Of course, every piece of text must be validated
before publishing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mentee Results&lt;/strong&gt;.
Senior programmers may be mentors of more junior ones and may be
rewarded for the rewards received by their mentees. All metrics listed
above can work this way, rewarding or punishing mentors when their
students are doing better or
&lt;a href=&quot;/2019/06/19/how-much-they-suffer.html&quot;&gt;worse&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can’t stress this enough: each metric must have a
&lt;a href=&quot;/2018/03/06/speed-vs-quality.html&quot;&gt;quality control&lt;/a&gt; mechanism.
Just measuring bugs reported without checking the quality of them would lead to cheating:
programmers will report whatever they like, just to bump the numbers up.
Each bug must be verified by an architect: duplicates or
&lt;a href=&quot;/2018/04/24/right-way-to-report-bugs.html&quot;&gt;low-quality&lt;/a&gt;
bug reports are to be rejected. The same is true for every metric:
&lt;a href=&quot;/2019/05/28/trust-or-not.html&quot;&gt;trust&lt;/a&gt; without control
leads to &lt;a href=&quot;/2017/11/21/trust-pay-lose.html&quot;&gt;cheating&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Trust without control leads to cheating.
&lt;/aside&gt;

&lt;p&gt;It is also worth mentioning that features,
bugs, pull requests, and documentation pages may have different
&lt;em&gt;complexity&lt;/em&gt;, &lt;em&gt;urgency&lt;/em&gt;, and &lt;em&gt;severity&lt;/em&gt;, which also should be taken into account,
increasing or decreasing the numbers in each metric.&lt;/p&gt;

&lt;p&gt;Most of these metrics can be collected automatically, without any human
interaction, for example via the GitHub API.&lt;/p&gt;

&lt;p&gt;In an ideal world of &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;ideal management&lt;/a&gt;,
the project compensates
the work of its programmers according to the metrics collected. Instead of
salaries, programmers get
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;money&lt;/a&gt;
for features, bugs, documentation pages,
and so on. How far your project is from this
&lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;utopia&lt;/a&gt;—is the indicator
of your professionalism as a project manager. &lt;a href=&quot;/2017/06/06/gluten-free-management.html&quot;&gt;Lousy&lt;/a&gt;
managers don’t measure
anything and make everybody “happy” by keeping wages high and control low …
until the project runs out of money. On the other hand, exceptionally
good managers let metrics
&lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;control&lt;/a&gt;
everybody, making the best happy
and the worst … &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;quickly&lt;/a&gt;
find the way out.&lt;/p&gt;

&lt;p&gt;Which one are you?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Is there a metric to measure programmers&amp;#39; performance objectively?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1284853509540712455?ref_src=twsrc%5Etfw&quot;&gt;July 19, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">The question was asked on StackExchange nine years ago (just around the time the site was launched): “If not lines of code, then what is a good metric by which to measure the effectiveness of remote programmers.” The answers, not surprisingly, were all along this line: programmers are not supposed to be measured! I bet those who answered were programmers themselves. Indeed, why would a programmer be interested in being measured and being reduced to a mere number?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/06/better-call-saul.jpg" /></entry><entry><title type="html">Veil Objects to Replace DTOs</title><link href="https://www.yegor256.com/2020/05/19/veil-objects.html" rel="alternate" type="text/html" title="Veil Objects to Replace DTOs" /><published>2020-05-19T00:00:00+00:00</published><updated>2020-05-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/05/19/veil-objects</id><content type="html" xml:base="https://www.yegor256.com/2020/05/19/veil-objects.html">&lt;p&gt;Here is a new idea I discovered just a few days ago while working
with &lt;a href=&quot;https://github.com/yegor256/codexia&quot;&gt;Codexia&lt;/a&gt;,
a Ruby web app. I had to fetch data rows from PostgreSQL and return
objects to the client. It’s always been a problem for me, how to do that
without turning objects into DTOs. Here is the solution I found and gave
a name: Veil Objects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Constantine (2005) by Francis Lawrence&quot; src=&quot;/images/2020/05/constantine.jpg&quot; longdesc=&quot;#c13e1390&quot; /&gt;&lt;figcaption id=&quot;c13e1390&quot;&gt;Constantine (2005) by Francis Lawrence&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say I fetch the list of projects from PostgreSQL:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Projects&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@pgsql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT * FROM project&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code&gt;exec()&lt;/code&gt; on &lt;code&gt;@pgsql&lt;/code&gt; (I’m using the &lt;a href=&quot;https://rubygems.org/gems/pgtk&quot;&gt;pgtk&lt;/a&gt; gem)
returns an array of &lt;a href=&quot;https://ruby-doc.org/core-2.7.0/Hash.html&quot;&gt;Hashes&lt;/a&gt;,
which look like this, if we convert them to JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;[
  {&amp;quot;id&amp;quot;: 1, &amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;yegor256&amp;quot;},
  {&amp;quot;id&amp;quot;: 2, &amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;yegor256&amp;quot;},
  {&amp;quot;id&amp;quot;: 3, &amp;quot;name&amp;quot;: &amp;quot;zoo&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;yegor256&amp;quot;}
]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It would be great to make the method &lt;code&gt;fetch()&lt;/code&gt; return an array
of objects, not an array of Hashes. So my class &lt;code&gt;Project&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@pgsql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgsql&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgsql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT name FROM project WHERE id=$1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgsql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT author FROM project WHERE id=$1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s perfectly designed for single-project manipulations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Two SQL requests here is not a big deal. However, if I convert
the list of Hashes to Projects like this, I will have serious
performance problems:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Projects&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@pgsql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT * FROM project&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@pgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is what will kill me, performance-wise:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is created by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code will generate too many redundant SQL requests. We will do round-trips
to PostgreSQL to fetch the data we had a few milliseconds ago, while
we were doing &lt;code&gt;SELECT * FROM project&lt;/code&gt;.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=nErn5G_JHhE&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/nErn5G_JHhE/mqdefault.jpg&quot; alt=&quot;YouTube video #nErn5G_JHhE&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;Veil Objects to Replace DTOs (Webinar #50);
        5 August 2020.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;The easiest and the most obvious solution, which many of you might suggest,
is to encapsulate the retrieved Hash into the &lt;code&gt;Project&lt;/code&gt; object. In other
words, turn &lt;code&gt;Project&lt;/code&gt; into a &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;,
a holder of data. Well, in this case we might
not even need an object, but can instead return the Hash with the data. But
this is not how we want our object-oriented software to be designed. We want
to deal with objects, not data structures. And, at the same time, we don’t want objects to
be stupid enough to go back to the database for the same data we had
a second ago. Here is the solution I’m proposing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;veils&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Projects&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@pgsql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT * FROM project&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Veil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@pgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This new &lt;code&gt;Veil&lt;/code&gt; object from &lt;a href=&quot;https://rubygems.org/gems/veils&quot;&gt;veils gem&lt;/a&gt;
is a decorator of &lt;code&gt;Project&lt;/code&gt;. It behaves like
a &lt;code&gt;Project&lt;/code&gt;, but some of the methods on it are redefined: &lt;code&gt;name()&lt;/code&gt; and &lt;code&gt;author()&lt;/code&gt;.
When they are called, the calls won’t reach the encapsulated &lt;code&gt;Project&lt;/code&gt;.
Instead, the data stored in the &lt;code&gt;Veil&lt;/code&gt; will be returned.&lt;/p&gt;

&lt;p&gt;It is called a “veil” because it acts like one: the preset data is
returned only until some other method is called, which was not preset.
If this happens, the veil is pierced and the &lt;code&gt;Veil&lt;/code&gt; object becomes fully
transparent, sending all method calls through.&lt;/p&gt;

&lt;p&gt;Thus the efficiency of DTO is combined with the elegance of OOP.&lt;/p&gt;

&lt;p&gt;I’m using these new veil objects in
&lt;a href=&quot;https://github.com/yegor256/codexia&quot;&gt;yegor256/codexia&lt;/a&gt;,
so you can see how they work.&lt;/p&gt;

&lt;p&gt;P.S. I also create an &lt;code&gt;Unpiercable&lt;/code&gt; class, which acts exactly like a &lt;code&gt;Veil&lt;/code&gt;,
but can never be pierced. It is very useful, when you don’t expect any
data-modifying interactions to happen with the object and just want some
of its methods to be pre-calculated.&lt;/p&gt;

&lt;p&gt;P.P.S. This is the implementation for
&lt;a href=&quot;https://github.com/binkley/kotlin-veil&quot;&gt;Kotlin&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="ruby" /><summary type="html">Here is a new idea I discovered just a few days ago while working with Codexia, a Ruby web app. I had to fetch data rows from PostgreSQL and return objects to the client. It’s always been a problem for me, how to do that without turning objects into DTOs. Here is the solution I found and gave a name: Veil Objects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/05/constantine.jpg" /></entry><entry><title type="html">EO the Career Killer</title><link href="https://www.yegor256.com/2020/05/13/career-killer.html" rel="alternate" type="text/html" title="EO the Career Killer" /><published>2020-05-13T00:00:00+00:00</published><updated>2020-05-13T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/05/13/career-killer</id><content type="html" xml:base="https://www.yegor256.com/2020/05/13/career-killer.html">&lt;p&gt;It’s time to answer one of the most popular questions I hear from junior
programmers when they meet me at a software conference or online: What is
the point of studying &lt;a href=&quot;https://www.elegantobjects.org&quot;&gt;Elegant Objects&lt;/a&gt;
(the new object-oriented paradigm I’ve been preaching for the last five years)
if almost nobody is using it on real projects?
Why swim against the current and learn something that may only harm
my career, even if it does seem like a sound technical concept? Where is the
profit in making myself an outsider? These are good questions; thanks for asking them!&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Dog Day Afternoon (1975) by Sidney Lumet&quot; src=&quot;/images/2020/05/dog-day-afternoon.jpg&quot; longdesc=&quot;#f456fa6c&quot; /&gt;&lt;figcaption id=&quot;f456fa6c&quot;&gt;Dog Day Afternoon (1975) by Sidney Lumet&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me quote one of the emails I received recently, after
the first lecture in &lt;a href=&quot;https://youtu.be/aLaDDoT2v54&quot;&gt;MIPT&lt;/a&gt; about OOP:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recently I have seen the first part of your lecture called “Pain of OOP”
and was very intrigued by the average age of the visitors. How do you think,
will it be hard for them to find a job when the courses are over?
Won’t that leave a “footprint” in their minds that almost everything they
will see as junior software engineers will be totally against what you
taught them? Or do they have to accept that as it is, taking into
account that, as juniors, they will have no right to even
propose changes to the architecture?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, the question makes a lot of sense. &lt;a href=&quot;https://www.elegantobjects.org&quot;&gt;Elegant Objects&lt;/a&gt;
is a very alternative concept, provoking you, a junior programmer, to renounce everything
you’ve learned to date &lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;about OOP&lt;/a&gt;
and to start thinking differently. It sounds
interesting while you are sitting in a room listening to my lecture, but it
&lt;del&gt;may&lt;/del&gt; will &lt;a href=&quot;/2019/11/05/revolutionary-evolution.html&quot;&gt;hurt&lt;/a&gt;
you once you attend your first job interview.&lt;/p&gt;

&lt;p&gt;I’ve heard stories of people failing job interviews just after saying my
name and claiming that they agree with my OOP ideas. That was enough to
tell their interviewers that they wouldn’t be able to work normally in a traditional
Java team, which uses a good old semi-procedural Spring-based Java
coding style.&lt;/p&gt;

&lt;p&gt;I’ve even heard stories of programmers being fired after their attempts to teach
the team a “better OOP,” ultimately ruining their reputations. If you want
to hear those stories, just join our Telegram group &lt;a href=&quot;https://t.me/elegantobjects&quot;&gt;@elegantobjects&lt;/a&gt;
and ask there. You will hear many of them.&lt;/p&gt;

&lt;p&gt;Will something similar happen to you? Most probably, yes.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;You will suffer. You will get fired. Your career will be stuck. You will be in a big trouble.
&lt;/aside&gt;

&lt;p&gt;You will suffer. You will get fired. You will have issues finding interesting
projects, because everything you will see written in traditional Java, Ruby, C++,
or Python will look like garbage to you. You will be constantly annoyed that
people around you don’t understand you. Your career will be stuck. You
won’t be able to get a promotion, because your thinking will be toxic—people
will be afraid of your technical ideas—they will sound too extreme
for them. You will be very tempted to go back to the good old procedural
nightmare, but won’t be able to do it anymore. You will be in a big trouble.&lt;/p&gt;

&lt;p&gt;This is exactly what was happening to me before I started writing this blog
and publishing &lt;a href=&quot;/books.html&quot;&gt;my books&lt;/a&gt;: I was alone, on my own, in front of those who were
ready to criticize my ideas just for the fun of it. However, once I gave my concept
a name and started getting followers around it, everything changed. I was
not a crazy programmer any more, I became a member of a new &lt;a href=&quot;https://www.elegantobjects.org&quot;&gt;tech sect&lt;/a&gt;,
which, of course, had its pros and cons, but … it was &lt;em&gt;organized&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;It became much more difficult for my opponents to diminish the value of my
words, because no longer was I just yet another regular programmer with crazy ideas.
I was a book author, who managed to structure his thoughts, publish the book,
and even to get some readers and positive reviews. I was still wrong (as far
as they were concerned), but now I was &lt;em&gt;respected&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’m suggesting you do the same. Don’t merely listen to my videos,
follow my blog, or read my books, but also become an active participant!
Once they see you as a vocal member of an organized group of engineers,
they will treat you completely differently.
You will still be wrong, in their eyes, but you will be respected and your career will
go just fine. You will have all the rights to “propose changes to the
architecture.” It’s easy to shut up a young programmer, but it’s much
more difficult to shut up a young programmer who is a speaker and a book
writer, and a member of a professional community.&lt;/p&gt;

&lt;p&gt;This is how you can truly join our community:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Add your name to &lt;a href=&quot;https://www.elegantobjects.org&quot;&gt;elegantobjects.org&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Join two Telegram groups:
&lt;a href=&quot;https://t.me/elegantobjects&quot;&gt;@elegantobjects&lt;/a&gt; (for professionals)
and
&lt;a href=&quot;https://t.me/painofoop&quot;&gt;@painofoop&lt;/a&gt; (for juniors);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a blog about OOP, like &lt;a href=&quot;https://www.pragmaticobjects.com/&quot;&gt;@skapral&lt;/a&gt;
and &lt;a href=&quot;https://blog.g4s8.wtf/&quot;&gt;@g4s8&lt;/a&gt; are doing;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an open source framework or a library in the EO style
and make it popular on GitHub
(join our &lt;a href=&quot;https://t.me/elegantobjects&quot;&gt;Telegram group&lt;/a&gt; to get help);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Speak at our &lt;a href=&quot;https://www.meetup.com/Object-Thinking/&quot;&gt;Object Thinking meetup&lt;/a&gt;,
like &lt;a href=&quot;https://youtu.be/Z61mvuzLtbg&quot;&gt;@driver773&lt;/a&gt;,
&lt;a href=&quot;https://youtu.be/Ptz6kJ3NXGI&quot;&gt;@guseyn&lt;/a&gt; and
&lt;a href=&quot;https://youtu.be/EbmJoolbQZw&quot;&gt;@DronMDF&lt;/a&gt; already did;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make a speech about EO at some software conference or a meetup,
like &lt;a href=&quot;https://www.youtube.com/watch?v=LlkptvKK6Mw&quot;&gt;@filrfreire&lt;/a&gt; did;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Publish a book (I will be more than happy to help you).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pick the one you like most, they are sorted from the easiest to the
most complex actions you can take.&lt;/p&gt;

&lt;p&gt;Don’t be scared, act!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Do you use the principles of &lt;a href=&quot;https://twitter.com/hashtag/elegantobjects?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#elegantobjects&lt;/a&gt; in your project?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1274792685681901571?ref_src=twsrc%5Etfw&quot;&gt;June 21, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html">It’s time to answer one of the most popular questions I hear from junior programmers when they meet me at a software conference or online: What is the point of studying Elegant Objects (the new object-oriented paradigm I’ve been preaching for the last five years) if almost nobody is using it on real projects? Why swim against the current and learn something that may only harm my career, even if it does seem like a sound technical concept? Where is the profit in making myself an outsider? These are good questions; thanks for asking them!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/05/dog-day-afternoon.jpg" /></entry><entry><title type="html">Open Source Arms Race</title><link href="https://www.yegor256.com/2020/05/05/open-source-arms-race.html" rel="alternate" type="text/html" title="Open Source Arms Race" /><published>2020-05-05T00:00:00+00:00</published><updated>2020-05-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/05/05/open-source-arms-race</id><content type="html" xml:base="https://www.yegor256.com/2020/05/05/open-source-arms-race.html">&lt;p&gt;Some companies massively invest in open source software projects,
while others still remain skeptical and stay away from this trend.
What’s in it for those philanthropists, like Google, IBM or Microsoft?
Why spend money on something that doesn’t belong to them and
is shared among all of us developers? Don’t they understand that
the code they write may be used by their competitors? It seems they
do understand, but can’t do anything about it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Filth (2013) by Jon S. Baird&quot; src=&quot;/images/2020/05/filth.jpg&quot; longdesc=&quot;#37854d19&quot; /&gt;&lt;figcaption id=&quot;37854d19&quot;&gt;Filth (2013) by Jon S. Baird&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As David Mytton
&lt;a href=&quot;https://www.infoworld.com/article/3028600/whats-the-real-reason-microsoft-and-google-are-releasing-open-source.html&quot;&gt;noted&lt;/a&gt;,
individuals release open source projects out of altruism,
while companies have real, strategic reasons hidden behind
the warm and fuzzy glow of open source. We don’t mean just using
open source products, which is what every business
&lt;a href=&quot;https://thenewstack.io/survey-open-source-programs-are-a-best-practice-among-large-companies/&quot;&gt;does&lt;/a&gt;
nowadays, but building them so that everybody can use them, for free.&lt;/p&gt;

&lt;p&gt;First, let’s see exactly how,
among &lt;a href=&quot;https://opensource.com/article/19/4/ways-support-sustain-open-source&quot;&gt;other methods&lt;/a&gt;,
companies invest in open source:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Committers&lt;/strong&gt;.
Google, for example, encourages its employees to
open their code, and even has an
&lt;a href=&quot;https://opensource.google/docs/releasing/approval/&quot;&gt;approval procedure&lt;/a&gt; for it.
It seems that others do something similar.
Some recently published &lt;a href=&quot;https://www.infoworld.com/article/3253948/who-really-contributes-to-open-source.html&quot;&gt;research&lt;/a&gt;
demonstrates that thousands (!) of employees from
&lt;a href=&quot;https://github.com/microsoft&quot;&gt;Microsoft&lt;/a&gt; (4.3k visible GitHub contributors),
&lt;a href=&quot;https://github.com/IBM&quot;&gt;IBM&lt;/a&gt; (2.3k),
&lt;a href=&quot;https://github.com/google&quot;&gt;Google&lt;/a&gt; (1.2k),
and
&lt;a href=&quot;https://www.zdnet.com/article/its-an-open-source-world-78-percent-of-companies-run-open-source-software/&quot;&gt;others&lt;/a&gt;
actively contribute to their GitHub-hosted repositories.
In other words, being paid by Google these people write
code that doesn’t belong to Google.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;.
Aside from
&lt;a href=&quot;https://cloud.withgoogle.com/next/sf/&quot;&gt;Google Cloud Next&lt;/a&gt;,
&lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;AWS re:Invent&lt;/a&gt;, and
&lt;a href=&quot;https://www.microsoft.com/en-us/ignite&quot;&gt;Microsoft Ignite&lt;/a&gt;,
which are pure promotional events, tech giants sponsor
community-driven conferences, like
&lt;a href=&quot;https://docker.events.cube365.net/docker/dockercon/&quot;&gt;DockerCon&lt;/a&gt;,
&lt;a href=&quot;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/&quot;&gt;KubeCon&lt;/a&gt;,
&lt;a href=&quot;https://fosdem.org/2020/&quot;&gt;FOSDEM&lt;/a&gt;,
and so on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Foundations&lt;/strong&gt;.
&lt;a href=&quot;http://www.apache.org/foundation/thanks&quot;&gt;Apache&lt;/a&gt;,
&lt;a href=&quot;https://www.linuxfoundation.org/membership/members/&quot;&gt;Linux&lt;/a&gt;,
&lt;a href=&quot;https://www.eclipse.org/membership/exploreMembership.php#allmembers&quot;&gt;Eclipse&lt;/a&gt;,
&lt;a href=&quot;https://www.gnome.org/foundation/&quot;&gt;GNOME&lt;/a&gt;,
&lt;a href=&quot;https://opensource.org/sponsors&quot;&gt;OSI&lt;/a&gt;
and &lt;a href=&quot;https://opensource.com/resources/organizations&quot;&gt;others&lt;/a&gt;
are sponsored by Google, IBM, Huawei, Microsoft, Oracle, and others.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Acquisitions&lt;/strong&gt;.
They &lt;a href=&quot;https://techcrunch.com/2019/01/12/how-open-source-software-took-over-the-world/&quot;&gt;acquire&lt;/a&gt;
startups that make open source products,
e.g.
&lt;a href=&quot;https://github.com/RedHatOfficial&quot;&gt;RedHat&lt;/a&gt;
  (acquired by IBM for &lt;a href=&quot;https://www.technologyreview.com/the-download/612353/ibms-34-billion-purchase-of-red-hat-is-a-mega-bet-on-a-coding-revolution/?via=indexdotco&quot;&gt;$32b&lt;/a&gt;),
&lt;a href=&quot;https://github.com/mongodb/mongo&quot;&gt;MongoDB&lt;/a&gt;
  (&lt;a href=&quot;https://www.marketwatch.com/story/mongodb-shares-rally-above-already-elevated-ipo-price-2017-10-19&quot;&gt;$4b&lt;/a&gt;),
&lt;a href=&quot;https://github.com/docker&quot;&gt;Docker&lt;/a&gt;
  (&lt;a href=&quot;https://venturebeat.com/2015/06/13/docker-now-valued-at-1b-paid-someone-799-for-its-logo-on-99designs/&quot;&gt;$1b&lt;/a&gt;),
&lt;a href=&quot;https://github.com/elastic&quot;&gt;Elastic&lt;/a&gt;
  (&lt;a href=&quot;https://techcrunch.com/2018/10/05/search-company-elastic-pops-90-on-nyse-after-raising-252m-at-a-2-5b-market-cap-in-its-ipo/&quot;&gt;$6b&lt;/a&gt;),
&lt;a href=&quot;https://github.com/ansible/ansible&quot;&gt;Ansible&lt;/a&gt;
  (&lt;a href=&quot;http://venturebeat.com/2015/10/15/source-red-hat-is-buying-ansible-for-more-than-100m/&quot;&gt;$100m&lt;/a&gt;),
&lt;a href=&quot;https://github.com/mysql&quot;&gt;MySQL&lt;/a&gt;
  (&lt;a href=&quot;https://techcrunch.com/2008/01/16/sun-picks-up-mysql-for-1-billion-open-source-is-a-legitimate-business-model/&quot;&gt;$1b&lt;/a&gt;),
&lt;a href=&quot;https://github.com/nginx/nginx&quot;&gt;Nginx&lt;/a&gt;
  (&lt;a href=&quot;https://techcrunch.com/2019/03/11/f5-acquires-nginx-for-670m-to-move-into-open-source-multi-cloud-services/&quot;&gt;$670m&lt;/a&gt;),
and &lt;a href=&quot;https://index.co/market/open-source/acquisitions&quot;&gt;so on&lt;/a&gt;.
The market is &lt;a href=&quot;https://a16z.com/2019/10/04/commercializing-open-source/&quot;&gt;booming&lt;/a&gt;, by the way.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Donations&lt;/strong&gt;.
Google, for example, &lt;a href=&quot;https://opensource.google/docs/growing/funding/&quot;&gt;donates&lt;/a&gt; to
  &lt;a href=&quot;https://github.com/fastlane/fastlane&quot;&gt;Fastlane&lt;/a&gt;
  and
  &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;Kubernetes&lt;/a&gt;;
IBM &lt;a href=&quot;https://www.ibm.com/opensource/&quot;&gt;donates&lt;/a&gt; to
  &lt;a href=&quot;https://xomino.com/2015/06/18/ibm-is-a-platinum-sponsor-of-the-new-node-js-foundation/&quot;&gt;Node.js&lt;/a&gt;
  and
  &lt;a href=&quot;https://conferences.oreilly.com/tensorflow/tf-ca-2019/public/schedule/detail/81284&quot;&gt;TensorFlow&lt;/a&gt;;
Amazon sponsors
  &lt;a href=&quot;https://aws.amazon.com/blogs/opensource/aws-sponsorship-of-the-rust-project/&quot;&gt;Rust&lt;/a&gt;;
and &lt;a href=&quot;https://github.com/ossfriendly/open-source-supporters&quot;&gt;so on&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, the question is how this helps Google and others make their
business more profitable. For example, how is Google Cloud Platform planning
to beat Amazon AWS using open source as a weapon? Here is how,
among &lt;a href=&quot;https://simplabs.com/blog/2019/11/11/why-companies-invest-in-oss/&quot;&gt;other reasons&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Selling&lt;/strong&gt;.
The products they sponsor gather large communities of users,
who know how to work with them. Some of those users are decision-making
people. For example, &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/&quot;&gt;Google’s Container Engine&lt;/a&gt;
is a hosted version of
&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;Kubernetes&lt;/a&gt;, an open source product.
Kubernetes users, when they need
a hosted version of it, will most likely become Google customers.
&lt;a href=&quot;https://github.com/tensorflow/tensorflow&quot;&gt;TensorFlow&lt;/a&gt;,
yet another example, also runs on &lt;a href=&quot;https://cloud.google.com/tensorflow-enterprise&quot;&gt;Google Cloud Platform&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Influencing&lt;/strong&gt;.
In the modern software development world open source is the key media, where
programmers learn new ideas, design principles, and architectural solutions.
They listen to open source projects, because they trust them much more
than they trust Google, IBM or Microsoft. Tech companies are smart, but their
decisions are based on monetary reasons, while open source projects
are much more free to do what is right, instead of what is profitable.
And programmers usually get very skeptical when open projects are acquired
by large enterprises, like
&lt;a href=&quot;https://www.reddit.com/r/linux/comments/2e2c1o/what_do_we_hate_oracle_for/&quot;&gt;Java by Oracle&lt;/a&gt;
or &lt;a href=&quot;https://www.theverge.com/2018/6/18/17474284/microsoft-github-acquisition-developer-reaction&quot;&gt;GitHub by Microsoft&lt;/a&gt;
(not really an open source story, but very close).
Thus, for companies it’s much wiser to sponsor open source and stay behind the curtain
rather than talking directly to developers through corporate media
like &lt;a href=&quot;https://docs.microsoft.com/en-us/&quot;&gt;MSDN&lt;/a&gt; or &lt;a href=&quot;https://developer.oracle.com/&quot;&gt;OPN&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Branding&lt;/strong&gt;.
Being part of open source is a direct contribution to the public
image of a company. Google is no longer an
&lt;a href=&quot;https://www.theverge.com/2019/9/9/20857440/google-antitrust-investigation-attorneys-general-advertising-search&quot;&gt;Ad-selling monopoly&lt;/a&gt;,
with &lt;a href=&quot;https://www.androidauthority.com/googles-reputation-is-becoming-its-biggest-problem-1055381/&quot;&gt;questionable reputation&lt;/a&gt;,
but one of the largest software &lt;a href=&quot;https://ssir.org/articles/entry/open_source_software_is_philanthropy&quot;&gt;philanthropists&lt;/a&gt;.
Microsoft is &lt;a href=&quot;https://www.businessinsider.de/international/microsoft-reputation-institute-soaring-research-2019-11/?r=US&amp;amp;IR=T&quot;&gt;catching up&lt;/a&gt;
with its massive &lt;a href=&quot;https://www.techrepublic.com/article/whats-really-behind-microsofts-love-of-open-source/&quot;&gt;code opening&lt;/a&gt;
and the &lt;a href=&quot;https://blogs.microsoft.com/blog/2018/10/26/microsoft-completes-github-acquisition/&quot;&gt;purchase&lt;/a&gt; of GitHub.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=D12gi1x6Cdw&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/D12gi1x6Cdw/mqdefault.jpg&quot; alt=&quot;YouTube video #D12gi1x6Cdw&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M105: Open source developers inevitably have better soft and tech skills;
        23 June 2020.&lt;/div&gt;&lt;/aside&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Retaining&lt;/strong&gt;.
Being an active participant of a visible open source software product
is a great &lt;a href=&quot;https://opensource.com/article/19/11/why-contribute-open-source-software&quot;&gt;intrinsic motivator&lt;/a&gt;
for the best software engineers.
When your company is involved in open source business, you
are much more loyal and interested in staying longer with the company.
I can’t prove this assertion, but it’s my personal observation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Training&lt;/strong&gt;.
It’s &lt;a href=&quot;https://www.wired.com/insights/2013/11/open-source-a-platform-for-innovation/&quot;&gt;no secret&lt;/a&gt;
that the &lt;a href=&quot;https://www.techrepublic.com/article/the-best-open-source-innovations-of-the-last-decade/&quot;&gt;best technologies&lt;/a&gt;
nowadays are being created
in open source projects by people contributing for free
(they get their salaries somewhere else). It’s also a
&lt;a href=&quot;https://hackernoon.com/how-to-become-the-best-programmer-in-the-world-ef9f584c81fa&quot;&gt;well-known fact&lt;/a&gt;
that in order to be a better engineer one has to work with the best.
Open source projects are &lt;a href=&quot;https://www.techrepublic.com/article/10-tips-for-becoming-a-better-programmer/&quot;&gt;exactly&lt;/a&gt;
the best place to meet more experienced and very often more talented programmers,
and learn from them. Companies, by sending people there, boost
their skills without doing any internal training programs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, it seems that open source is a very powerful instrument
in the war for tech markets and for talent. Smart companies develop their open source
muscles, earning reputation and acquiring our trust. I predict
this trend not only to continue but also to escalate. We programmers
are their driving force; they need us
as users, promoters, influencers, and makers of the products.&lt;/p&gt;

&lt;p&gt;They were &lt;a href=&quot;https://hbswk.hbs.edu/item/microsoft-vs-open-source-who-will-win&quot;&gt;not paying attention&lt;/a&gt;
to the open source territory for ages
and &lt;a href=&quot;https://www.computerworld.com/article/3144063/open-source-has-won-and-microsoft-has-surrendered.html&quot;&gt;now&lt;/a&gt;
they are fighting for it, trying to acquire the largest pieces.&lt;/p&gt;

&lt;p&gt;We software developers are the territory!&lt;/p&gt;

&lt;p&gt;Thus, if you are a coder, make your own project now.
Sooner or later Google will knock on the door and offer
you a big check, just to do it earlier than Microsoft.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oss" /><summary type="html">Some companies massively invest in open source software projects, while others still remain skeptical and stay away from this trend. What’s in it for those philanthropists, like Google, IBM or Microsoft? Why spend money on something that doesn’t belong to them and is shared among all of us developers? Don’t they understand that the code they write may be used by their competitors? It seems they do understand, but can’t do anything about it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/05/filth.jpg" /></entry><entry><title type="html">Prefixed Naming</title><link href="https://www.yegor256.com/2020/03/03/prefixed-naming.html" rel="alternate" type="text/html" title="Prefixed Naming" /><published>2020-03-03T00:00:00+00:00</published><updated>2020-03-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/03/03/prefixed-naming</id><content type="html" xml:base="https://www.yegor256.com/2020/03/03/prefixed-naming.html">&lt;p&gt;If you look at the source code of
&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;Takes&lt;/a&gt; or
&lt;a href=&quot;https://github.com/yegor256/cactoos&quot;&gt;Cactoos&lt;/a&gt; for the first time,
you most probably, like many others, will be triggered by the naming
convention, which implies that most class names have two-letter prefixes:
&lt;a href=&quot;https://www.javadoc.io/static/org.takes/takes/1.9.1/org/takes/http/BkSafe.html&quot;&gt;&lt;code&gt;BkSafe&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://www.javadoc.io/static/org.takes/takes/1.9.1/org/takes/rq/RqFake.html&quot;&gt;&lt;code&gt;RqFake&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://www.javadoc.io/static/org.takes/takes/1.9.1/org/takes/rs/RsWithStatus.html&quot;&gt;&lt;code&gt;RsWithStatus&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://www.javadoc.io/static/org.takes/takes/1.9.1/org/takes/tk/TkGzip.html&quot;&gt;&lt;code&gt;TkGzip&lt;/code&gt;&lt;/a&gt;,
and so on. To be honest,
I haven’t seen a single Java developer who would be comfortable with this
convention at first sight. I have, however, seen many who are in love with it
now. This article is for those who are interested in moving from the
first category to the second one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Buffalo&amp;#39;66 (1998) by Vincent Gallo&quot; src=&quot;/images/2020/03/buffalo-66.jpg&quot; longdesc=&quot;#453e8cc2&quot; /&gt;&lt;figcaption id=&quot;453e8cc2&quot;&gt;Buffalo&amp;#39;66 (1998) by Vincent Gallo&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Any software package, module, library, or framework of a decent size has
a large amount of classes. Well, it &lt;a href=&quot;/2017/02/28/too-many-classes.html&quot;&gt;has to have&lt;/a&gt;.
If it doesn’t, there is definitely a problem with its design.
So there’s always a problem of how to name those classes. The easiest and most
obvious approach is the one used in Java and its flagship framework
&lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt;:
make class names as descriptive and as long as possible. Here are
&lt;a href=&quot;https://gist.github.com/thom-nic/2c74ed4075569da0f80b&quot;&gt;some examples&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ObjectFactoryCreatingFactoryBean&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SimpleBeanFactoryAwareAspectInstanceFactory&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;TransactionAwarePersistenceManagerFactoryProxy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;AbstractAnnotationConfigDispatcherServletInitializer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is garbage, isn’t it?&lt;/p&gt;

&lt;p&gt;A much more sophisticated and time-consuming way of naming classes is
by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;DDD paradigm&lt;/a&gt;,
which suggests using &lt;em&gt;nouns&lt;/em&gt; after &lt;em&gt;entities&lt;/em&gt; in the real world, like port, car,
book, story, user, socket, and so on. Identifying the right entities
is a big challenge for a software architect. A bad one would just resort
to &lt;code&gt;ConnectionFactoryUtils&lt;/code&gt; or &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt; and call it a day.
A more professional one may spend hours or days, but will eventually come up with
something more &lt;em&gt;domain-driven&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s assume you are the latter and you managed to find the right nouns.
How many of them will be out there in your domain? A few dozen, I believe. Even
if the application is rather complex, you won’t have more than 30 entities
in its problem domain. However, as was &lt;a href=&quot;/2017/02/28/too-many-classes.html&quot;&gt;mentioned above&lt;/a&gt;,
the amount of
classes will be much larger, sometimes over a thousand or more. Thus, the
second problem you will face is how to name classes which are
“entities with specifiers.” For example, you have a port and also a random port
and a TCP port, and a port already closed, and a port not yet opened, and so on.&lt;/p&gt;

&lt;p&gt;There will be nouns with &lt;em&gt;adjectives&lt;/em&gt;: random port, closed port, opened port,
TCP port, broken port, and so on. How do you name those classes? Maybe, as simply
as this: &lt;code&gt;RandomPort&lt;/code&gt;, &lt;code&gt;OpenedPort&lt;/code&gt;, &lt;code&gt;ClosedPort&lt;/code&gt;, &lt;code&gt;TcpPort&lt;/code&gt;.
Maybe, but I think it’s better to turn the common &lt;code&gt;Port&lt;/code&gt; part into a common prefix &lt;code&gt;Pt&lt;/code&gt;
for all classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;PtRandom&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PtOpened&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PtClosed&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PtTcp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only disadvantage of this approach is that newcomers may have no idea
what the &lt;code&gt;Pt&lt;/code&gt; prefix means. Indeed, it may take some time (a few minutes) to learn it. However,
the advantage is greater: once you learn all the prefixes that exist
in the application (and there will be just a few of them, since the amount
of entities in the domain is pretty limited), you can immediately understand
which part of the type hierarchy the class belongs to (this one is from
&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;Takes&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/c415b43f6d14c18e66db32e9d5d6e8b2.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you see the &lt;code&gt;Rq&lt;/code&gt; prefix you immediately understand that you are dealing with
an implementation of the
&lt;a href=&quot;https://www.javadoc.io/doc/org.takes/takes/latest/org/takes/Request.html&quot;&gt;&lt;code&gt;org.takes.Request&lt;/code&gt;&lt;/a&gt; interface. Not the
&lt;a href=&quot;https://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html&quot;&gt;&lt;code&gt;ServletRequest&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_servlet&quot;&gt;JDK&lt;/a&gt;,
not &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpRequest.html&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;
from Spring,
and not &lt;a href=&quot;https://square.github.io/okhttp/3.x/okhttp/okhttp3/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://square.github.io/okhttp/&quot;&gt;OkHttp&lt;/a&gt;.
You know that it’s the &lt;code&gt;Request&lt;/code&gt; from Takes!&lt;/p&gt;

&lt;p&gt;Thus, by using short prefixes instead of nouns we add clarity to the code.
We remove the noise of repeated usage of the same noun over and over again and
make referencing easier. Each prefix is a unique locator of a class in
the type hierarchy.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Which class name you would use: SynchronizedDatabaseConnection or SncConn?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1239065472491978752?ref_src=twsrc%5Etfw&quot;&gt;March 15, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">If you look at the source code of Takes or Cactoos for the first time, you most probably, like many others, will be triggered by the naming convention, which implies that most class names have two-letter prefixes: BkSafe, RqFake, RsWithStatus, TkGzip, and so on. To be honest, I haven’t seen a single Java developer who would be comfortable with this convention at first sight. I have, however, seen many who are in love with it now. This article is for those who are interested in moving from the first category to the second one.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/03/buffalo-66.jpg" /></entry><entry><title type="html">Fat vs. Skinny Design</title><link href="https://www.yegor256.com/2020/02/19/fat-skinny-design.html" rel="alternate" type="text/html" title="Fat vs. Skinny Design" /><published>2020-02-19T00:00:00+00:00</published><updated>2020-02-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/02/19/fat-skinny-design</id><content type="html" xml:base="https://www.yegor256.com/2020/02/19/fat-skinny-design.html">&lt;p&gt;It seems that type/class hierarchies in OOP may be designed in two
extreme ways: either with full encapsulation of data in mind; or with just a few
interfaces making raw data visible, and letting classes deal with it, parse it,
and turn it into smaller data elements. You may be surprised, but I’m
suggesting the second option is more elegant. It seems to me that we don’t
lose object orientation, but rather gain a lot of flexibility, reusability, testability,
and so on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Owning Mahowny (2003) by Richard Kwietniowski&quot; src=&quot;/images/2020/02/owning-mahowny.jpg&quot; longdesc=&quot;#047d1b4a&quot; /&gt;&lt;figcaption id=&quot;047d1b4a&quot;&gt;Owning Mahowny (2003) by Richard Kwietniowski&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Take a look at this (let’s call it &lt;em&gt;fat&lt;/em&gt; and I will explain why later):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To obtain the name of the author we do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// It is stored in PostgreSQL (that&amp;#39;s why the Pg&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prefix) and retrieves everything using SQL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PgArticle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Visually, this design may look like this (in UML):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/b9cc42a8e5ed92f94f4362cfd328fb0d.svg&quot; style=&quot;width:75%&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s compare it with an alternative design (which is much less
&lt;em&gt;fat&lt;/em&gt; than the previous one, I would even call it &lt;em&gt;skinny&lt;/em&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TxtHead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TxtAuthor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, in order to obtain the name of the author we have to extract
the head as a &lt;code&gt;String&lt;/code&gt;, extract the author as a &lt;code&gt;String&lt;/code&gt;, and then
extract the name as a &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PgArticle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TxtHead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TxtAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Visually in UML, it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/930f06f36724929287c1ee82fd95c77b.svg&quot; style=&quot;width:75%&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There were three interfaces in the first design, while the second one
has only one interface and two classes. I call the first one “fat” because
it returns interfaces, which already implement the functionality we are
looking for, and we don’t need to cover them with additional decorators
or adapters. Its hierarchy of &lt;em&gt;three&lt;/em&gt; interfaces is rich enough to give
us everything we need. That’s why it’s fat. The second one, on other hand
is pretty &lt;em&gt;skinny&lt;/em&gt;, there is only one interface, which returns us plain
text data, which we have to parse on our own. We need to &lt;em&gt;dress it up&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It seems that the skinny design is better, for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Extendability&lt;/strong&gt;.
The skinny design is definitely easier to extend. In order
to extract some new information from the author we just need to add a new
method to the class &lt;code&gt;TxtAuthor&lt;/code&gt;. We don’t need to re-design the entire hierarchy
of interfaces and to modify all their implementations. We deal with pure data,
which is managed and parsed later, in decorators, adapters, and other
supplementary &lt;a href=&quot;/2016/04/26/why-inputstream-design-is-wrong.html&quot;&gt;smart&lt;/a&gt; classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cohesion&lt;/strong&gt;.
The skinny design is definitely more cohesive, since everything that is
related to the management of PostgreSQL data stays in one class &lt;code&gt;SqlArticle&lt;/code&gt;. To the contrary,
the fat design spreads the functionality among many classes and, thanks to that,
makes the entire class-set more difficult to maintain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reusability&lt;/strong&gt;.
Class &lt;code&gt;TxtAuthor&lt;/code&gt; can definitely be used in any other place, where
parsing of an author’s information is required, while class &lt;code&gt;PgAuthor&lt;/code&gt; is
only suitable for one particular case: fetching and parsing
PostgreSQL-related data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Testability&lt;/strong&gt;.
Obviously, the skinny design is much easier to test, because mocking
a single interface is a much simpler task than mocking the entire
hierarchy. To test the class &lt;code&gt;TxtAuthor&lt;/code&gt; we just pass some fake text to
its constructor and check how it works. To test the class &lt;code&gt;PgAuthor&lt;/code&gt; we
would need to do much more, including running a fake instance of a PostgreSQL server.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything said above is true for both 1) from-PostgreSQL data retrievals
and 2) to-PostgreSQL data manipulations. Of course, manipulations may
require many methods to exist in &lt;code&gt;SqlArticle&lt;/code&gt;, which will make the skinny
design look ugly, and it will become obvious that some of these methods
have to be moved to lower-level classes/interfaces. This only demonstrates
that it’s not always possible to make skinny design with a single interface,
like in the example above. Sometimes we simply &lt;em&gt;have&lt;/em&gt; to make it more fat.&lt;/p&gt;

&lt;p&gt;However, there is one serious concern related to the skinny design: it lets
the raw &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;naked&lt;/a&gt;
data jump out of &lt;code&gt;SqlArticle&lt;/code&gt;, which is against the very idea
of object-oriented programming, as
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;we know&lt;/a&gt;. Indeed, if we let
&lt;code&gt;TxtHead&lt;/code&gt; do the parsing, we may lose some interesting PostgreSQL-related
context, which is available only inside &lt;code&gt;SqlArticle&lt;/code&gt;. We don’t want
complex data parsing to happen far away from the place where the data
is born. We want everything data-related to happen where the data lives:
inside &lt;code&gt;SqlArticle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a valid concern, but letting PostgreSQL-related information (like connection
settings) move from &lt;code&gt;PgArticle&lt;/code&gt; to &lt;code&gt;PgHead&lt;/code&gt; and then to &lt;code&gt;PgAuthor&lt;/code&gt; is an even
larger violation of the data encapsulation principle.&lt;/p&gt;

&lt;p&gt;In real-life situations, of course, it’s not possible to imagine pure
one-interface skinny designs. They will all be fat to some extent. My suggestion, though,
is to try to make designs less fat, letting interface users
dress them up however they like. This suggestion is very close to
what I said earlier about &lt;a href=&quot;/2016/04/26/why-inputstream-design-is-wrong.html&quot;&gt;smart classes&lt;/a&gt;,
but this time the principle is broader.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">It seems that type/class hierarchies in OOP may be designed in two extreme ways: either with full encapsulation of data in mind; or with just a few interfaces making raw data visible, and letting classes deal with it, parse it, and turn it into smaller data elements. You may be surprised, but I’m suggesting the second option is more elegant. It seems to me that we don’t lose object orientation, but rather gain a lot of flexibility, reusability, testability, and so on.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/02/owning-mahowny.jpg" /></entry><entry><title type="html">Object Cohesion: Why It Matters</title><link href="https://www.yegor256.com/2020/02/11/object-cohesion.html" rel="alternate" type="text/html" title="Object Cohesion: Why It Matters" /><published>2020-02-11T00:00:00+00:00</published><updated>2020-02-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/02/11/object-cohesion</id><content type="html" xml:base="https://www.yegor256.com/2020/02/11/object-cohesion.html">&lt;p&gt;You most probably know about &lt;a href=&quot;https://www.elegantobjects.org&quot;&gt;Elegant Objects&lt;/a&gt; (EO),
an alternative object-oriented paradigm, which claims that objects must
be immutable, have no
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;static methods&lt;/a&gt;,
never use
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL&lt;/a&gt; in their code,
use &lt;a href=&quot;/2016/04/12/java-annotations-are-evil.html&quot;&gt;no annotations&lt;/a&gt;,
and so on. We, the EO adepts, claim many things, but not so many people
believe us. Those non-believers &lt;a href=&quot;/testimonials.html&quot;&gt;say&lt;/a&gt;
that we are trolls,
&lt;a href=&quot;/2020/05/13/career-killer.html&quot;&gt;at best&lt;/a&gt;.
Their main argument is: everybody works differently,
why should we listen to you? I have no answer for them… well I had no answer, until I
created &lt;a href=&quot;https://www.jpeek.org&quot;&gt;jPeek&lt;/a&gt; and started researching object &lt;em&gt;cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Кин-дза-дза! by Георгий Данелия&quot; src=&quot;/images/2020/02/kin-dza-dza.jpg&quot; longdesc=&quot;#62ef486d&quot; /&gt;&lt;figcaption id=&quot;62ef486d&quot;&gt;Кин-дза-дза! by Георгий Данелия&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me explain how cohesion can help us, EO adepts, to &lt;em&gt;prove&lt;/em&gt; some of our
assumptions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;Cohesion&lt;/a&gt;,
as a characteristic of a software module, was invented by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Constantine&quot;&gt;Larry Constantine&lt;/a&gt;
when I didn’t even exist yet, in 1974.
Here is what it means; take a look at this simple Java class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are two attributes and two methods. The method &lt;code&gt;addTitle()&lt;/code&gt; works with
the attribute &lt;code&gt;titles&lt;/code&gt;, while the method &lt;code&gt;addPrice()&lt;/code&gt; works only with the
attribute &lt;code&gt;prices&lt;/code&gt;. The cohesion is &lt;em&gt;low&lt;/em&gt; in this class, because the attributes
&lt;code&gt;titles&lt;/code&gt; and &lt;code&gt;prices&lt;/code&gt; are not related to each other in any way. We can easily
break this class into two pieces without losing anything:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we have two much more cohesive classes: their attributes and methods
are related to each other. We can’t break &lt;code&gt;Books1&lt;/code&gt; anymore, since each
attribute is needed by each method.&lt;/p&gt;

&lt;p&gt;Here is yet another example of a &lt;em&gt;highly&lt;/em&gt; cohesive class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can we break it into smaller pieces? No, we can’t. We can’t take any part
of the class out. The attribute &lt;code&gt;titles&lt;/code&gt; and both of the methods must stay
together. This means that the class is &lt;em&gt;highly&lt;/em&gt; cohesive.&lt;/p&gt;

&lt;p&gt;It was demonstrated a long time ago that more cohesive classes are better,
in terms of their error-proneness, than the ones with low cohesion,
for example by Victor R. Basili et al. in their study
&lt;a href=&quot;https://pdfs.semanticscholar.org/2bb8/c1f4eeb5e5ae353adeea0fd6933551b9e932.pdf&quot;&gt;A Validation of Object-Oriented Design Metrics as Quality Indicators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, if we can empirically prove that, for example, classes without static methods
are, on average, more cohesive than their static-rich fellows, we can say
that the claim that “static methods are evil” (postulated by Elegant Objects) is
scientifically validated. We can take a large set of
random Java classes and calculate their cohesion. Then, we can separate those
with static methods from those without them. Next, we can calculate which group
has higher average cohesion. If the group without static methods wins,
the assumption would be valid.&lt;/p&gt;

&lt;p&gt;Of course, another random set of Java classes may produce different results,
but this is how empirical science works: we can’t prove the theorem other
than by some experiments.&lt;/p&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;https://www.jpeek.org&quot;&gt;&lt;img src=&quot;https://www.jpeek.org/logo.svg&quot; style=&quot;width:64px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I created an open source software library to help me do these experiments and called
it &lt;a href=&quot;https://www.jpeek.org&quot;&gt;jPeek.org&lt;/a&gt;. It is a calculator of cohesion metrics
for Java code. No surprise, there are many metrics we can use to calculate cohesion. At least
&lt;a href=&quot;http://www.math.md/files/csjm/v25-n1/v25-n1-%28pp44-74%29.pdf&quot;&gt;thirty&lt;/a&gt;
of them are published, while only a few of them were properly implemented.
In jPeek, thanks to its contributors, we managed to implement over a dozen.&lt;/p&gt;

&lt;p&gt;Using this tool we can empirically prove some of the key points of EO.
For example, we can prove that
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;mutable&lt;/a&gt;
classes are less cohesive, annotations
negatively affect cohesion,
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt; are low-cohesion creatures,
and many other things. Thus cohesion will become the vehicle which will
drive Elegant Objects to a place where most of its claims will be scientifically
proven. Give us a few more years and we will have very interesting results.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A reviewer rejects your code and says: &amp;quot;This class is not cohesive enough!&amp;quot; What would you answer?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1228936961035001856?ref_src=twsrc%5Etfw&quot;&gt;February 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">You most probably know about Elegant Objects (EO), an alternative object-oriented paradigm, which claims that objects must be immutable, have no static methods, never use NULL in their code, use no annotations, and so on. We, the EO adepts, claim many things, but not so many people believe us. Those non-believers say that we are trolls, at best. Their main argument is: everybody works differently, why should we listen to you? I have no answer for them… well I had no answer, until I created jPeek and started researching object cohesion.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/02/kin-dza-dza.jpg" /></entry><entry><title type="html">One Question You Should Never Ask Your Boss</title><link href="https://www.yegor256.com/2020/01/15/question-never-ask.html" rel="alternate" type="text/html" title="One Question You Should Never Ask Your Boss" /><published>2020-01-15T00:00:00+00:00</published><updated>2020-01-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/01/15/question-never-ask</id><content type="html" xml:base="https://www.yegor256.com/2020/01/15/question-never-ask.html">&lt;p&gt;There are good and bad soldiers in any team. The job of a manager is to
understand which is which. Then to promote the good ones and discharge the bad ones.
There is one simple indicator I use to make this segregation. It’s a simple
question I either hear from my people or don’t. Those who ask it
are the bad soldiers. Their attitude and their behavior require immediate
corrective actions. Some of them are curable, while others are not. This
question tells me everything, if it’s being asked. I immediately understand
that I am dealing with a loser if I hear it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Broadchurch (2013) by Chris Chibnall&quot; src=&quot;/images/2020/01/broadchurch.jpg&quot; longdesc=&quot;#7bd6e061&quot; /&gt;&lt;figcaption id=&quot;7bd6e061&quot;&gt;Broadchurch (2013) by Chris Chibnall&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The question is: “What should I do next?”&lt;/p&gt;

&lt;p&gt;What’s wrong with that, you may wonder. Let me explain by a counter example.
A good soldier behaves differently. A good one wants to do interesting things,
wants to work with the most challenging problems, wants to resolve complex
issues, and wants to do what he/she wants to do!
A good soldier cares and doesn’t want to do what’s not important or not interesting.
A good one asks “What is our ultimate goal?” and then, after getting my answer and thinking
for a while, comes back to me with a plan for achieving this goal. A good one
&lt;em&gt;tells&lt;/em&gt; me what is next, instead of asking. All I need to do is to approve
or reject the plan proposed.&lt;/p&gt;

&lt;p&gt;Good soldiers don’t sit and passively wait until I come to them and say what exactly
needs to be done. Good soldiers pro-actively build their own plans by themselves and
do everything to convince me that they make sense.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Good soldiers pro-actively build their own plans and do everything to convince me that they make sense.
&lt;/aside&gt;

&lt;p&gt;Bad soldiers, on the other hand, ask me “What’s next?” and it gets very annoying.
It’s absolutely no fun to work with these people and I either try to explain to them
why such a question is a terrible mistake, or I simply get rid of them.&lt;/p&gt;

&lt;p&gt;Moreover, if the boss starts telling you what to do, you must realize that this
is the moment where the credit is lost. You’ve already been classified
as a bad soldier, a loser, an underachiever. Your chances of recovery are very
low. You must not allow this to happen. Act proactively; don’t wait until
it’s too late and the boss starts assigning tasks to you.&lt;/p&gt;

&lt;p&gt;P.S. By the way, I &lt;a href=&quot;https://www.google.com/search?q=questions+you+never+ask+your+boss&quot;&gt;googled&lt;/a&gt;
“questions you never ask your boss” and found
a lot of articles which prohibit many different questions. I wasn’t
surprised to find that none of them mention the question I’m talking about.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What do you do when you finish what your boss asked you to do?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1226410473354080256?ref_src=twsrc%5Etfw&quot;&gt;February 9, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="career" /><summary type="html">There are good and bad soldiers in any team. The job of a manager is to understand which is which. Then to promote the good ones and discharge the bad ones. There is one simple indicator I use to make this segregation. It’s a simple question I either hear from my people or don’t. Those who ask it are the bad soldiers. Their attitude and their behavior require immediate corrective actions. Some of them are curable, while others are not. This question tells me everything, if it’s being asked. I immediately understand that I am dealing with a loser if I hear it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/01/broadchurch.jpg" /></entry></feed>