<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2023-10-30T04:33:46+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">The Method Section: A Recipe for Research</title><link href="https://www.yegor256.com/2023/10/11/method-of-research.html" rel="alternate" type="text/html" title="The Method Section: A Recipe for Research" /><published>2023-10-11T00:00:00+00:00</published><updated>2023-10-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/10/11/method-of-research</id><content type="html" xml:base="https://www.yegor256.com/2023/10/11/method-of-research.html"><![CDATA[<p>Every empirical research paper must have a section titled “Method” (or “Methodology,” or “Study Design”). In this section, you describe what was done to obtain the data presented in the following “Results” section. You explain the <em>recipe</em>, which may be replicated later by another researcher, leading to the same (or very similar) results.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Underground (1995) by Emir Kusturica" src="/images/2023/10/underground.jpg" longdesc="#952f1bf5" /><figcaption id="952f1bf5">Underground (1995) by Emir Kusturica</figcaption></figure>

<p>The Method section is the essence of the research. Think of it as a recipe: you
tell the reader what ingredients you used, how you mixed them, and—most
importantly—why.</p>

<p>You start the section with a paragraph where you state the main <em>objective</em> of the
research, then break it down into a few 
<a href="https://en.wikipedia.org/wiki/Research_question"><em>research questions</em></a>.</p>

<p>Then, you explain, paragraph by paragraph, the <em>procedures</em> of the method. In each
step, you either collect, combine, or generate data. First, you explain what
you do. Second, you highlight how your procedures contribute to one of the
research questions. Third, you justify your actions by providing strong enough
reasons for why you performed these specific manipulations with the data.</p>

<p>Here is a toy sample of the Method section:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The goal of this study is to understand whether 
cats love fruits. This leads to the following 
research questions: 
  RQ1: What is a correlation between the color 
  of a cat's fur and its passion for fruits? 
  RQ2: Which fruits are preferred by cats: 
  bananas, apples, or marakujas?

First, we found 15 cats: 2 white, 3 black, 
and 10 of mixed color. It is important for RQ1 
that they are of different colors. We believe 
that 15 is enough because this is a toy research.

Second, we excluded 5 cats: those who were 
younger than one year old or older than 8 years 
old. This was motivated by RQ2; we believe that 
young and old cats may have difficulty cracking 
the hard cover of a marakuja.

Third, we gave our cats all three fruits mentioned 
in RQ2, left them for an hour, and observed their 
behavior. We believe one hour is enough for a hungry
cat to make a decision.

All cat owners agreed to have their cats 
participate in the study. 
</code></pre></div></div>

<p>At the end of the section, we mentioned that all participants in the experiment
provided informed consent—this is important if humans (or cats) are involved,
so don’t forget about it.</p>

<p>In the “Results” section, which follows the Method, you present the data that
were collected, combined, or generated (without giving any opinion or
subjective interpretation of it!). Some of this data may have already been
mentioned in the Method section, but not the most important details. For
example, we’ve already said that we found 15 cats, but we didn’t provide their
names, ages, or breeds—this information goes into the Results, in the form of
a nicely formatted table. How much “results” to show in the Method and how much
in the Results is, I believe, a matter of taste.</p>

<p>In the “Discussion” section, which follows the Results, you engage in a dialogue
with yourself, questioning the procedures of the Method. This is where
you are allowed to have an opinion about the data collected, combined, and
generated. For example, we may discuss whether the results of our research
are trustworthy enough, taking into account that we only analyzed the behavior
of just 15 cats, while in the Method, we were absolutely sure that we were doing
the right thing. In the Discussion, you play the opposite role by doubting
every single step of the Method, highlighting its weaknesses and limitations.</p>

<hr />

<p>You may find inspiration in these papers 
(use <a href="https://scholar.google.com/">Google Scholar</a> to download their PDFs):</p>

<ul>
  <li>Melina Vidoni, <em>Evaluating Unit Testing Practices in R Packages</em>, ICSE 2021</li>
  <li>Reem S. Alsuhaibani, et al., <em>On the Naming of Methods: A Survey of Professional Developers</em>, ICSE 2021</li>
  <li>Anastasia Ruvimova, et al., <em>An Exploratory Study of Productivity in Software Teams</em>, ICSE 2022</li>
</ul>

<hr />

<p>These opinions might also be helpful:</p>

<ul>
  <li><a href="https://research.com/research/how-to-write-research-methodology">How to Write Research Methodology</a>
by <a href="https://scholar.google.com/citations?user=kudrpNsAAAAJ">Imed Bouchrika</a></li>
  <li><a href="https://www.youtube.com/watch?v=SxKd66g7M1s">Writing the ‘Research Methods’…</a> (video)
by <a href="https://soc.appstate.edu/faculty-staff/david-russell-phd">David Russell</a></li>
  <li><a href="https://www.youtube.com/watch?v=jWPul_eifeU">How To Write Methodology…</a> (video)
by <a href="https://scholar.google.com/citations?user=MR45-AwAAAAJ">Marek Kiczkowiak</a></li>
  <li><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6322175/">Formulation of Research Question</a>
by Simmi K. Ratan</li>
</ul>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html"><![CDATA[The essence of a research paper is the Method section, which may be easier to write if you follow a few simple principles.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/10/underground.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/10/underground.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Related Work: A Critical Taxonomy of Prior Art</title><link href="https://www.yegor256.com/2023/09/29/how-to-write-related-work-section.html" rel="alternate" type="text/html" title="Related Work: A Critical Taxonomy of Prior Art" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/09/29/how-to-write-related-work-section</id><content type="html" xml:base="https://www.yegor256.com/2023/09/29/how-to-write-related-work-section.html"><![CDATA[<p>In almost any research paper, it is mandatory to have a section titled “Related Work”
(<a href="https://english.stackexchange.com/questions/55898/related-work-or-related-works">or “Related Works”</a>), 
where you refer to the results previously obtained by other
authors or yourself. By including this section in your paper, you are not only paying
respect to those who laid the foundation for your results, but also motivating and guiding
your readers. Most of them may not be aware of existing studies or
the importance of the problem you are solving. You must put these guys into
<a href="/2018/10/16/dont-make-me-guess.html">context</a>.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Mean Streets (1973) by Martin Scorsese" src="/images/2023/09/mean-streets.jpg" longdesc="#39399260" /><figcaption id="39399260">Mean Streets (1973) by Martin Scorsese</figcaption></figure>

<p>As far as I understand it, a well-crafted “Related Work” section should convey the following <em>message</em>:</p>

<ul>
  <li>Not only you believe that the problem is important,</li>
  <li>Previous studies have either overlooked or failed to solve it, and</li>
  <li>Your research is not a mere replication of someone else’s work.</li>
</ul>

<p>Before diving in, let’s clarify that the “Related Work” section 
<a href="https://academia.stackexchange.com/questions/157842">is not</a> the place 
to explain foundational concepts like 
<a href="https://en.wikipedia.org/wiki/Deep_learning">Deep Learning</a> or 
<a href="https://en.wikipedia.org/wiki/Dataflow_architecture">Dataflow Architecture</a>. 
That’s what the “<a href="https://scientific-publishing.webshop.elsevier.com/manuscript-preparation/what-background-study-and-how-should-it-be-written/">Background</a>” section is for. 
In “Related Work,” it’s assumed that the reader is already familiar with the subject matter.</p>

<p>To effectively communicate the three-fold message, create a <em>taxonomy</em> of existing studies. 
In simple terms, classify them. For instance, if your paper focuses on a new type 
of cat food designed to extend feline longevity and improve happiness, 
your “Related Work” section might look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>There are three categories of research related to our 
study: cat food, cat happiness, and cat lifespan.

Earlier studies [2, 13, 8] have suggested that 
cat food containing meat [21], potato [11], and 
fish [7] results in complaints in only 7.5% of all 
cases. However, no experiments have been conducted 
with food made from fruits.

The happiness of cats and other pets has been 
studied by Johnson [22] and Dickson [17]. They 
identified a strong correlation between the mood 
of a pet's owner and the mood of the pet. However, 
they did not investigate the effect of food on cat 
happiness.

It has been observed [15, 18] that cats live 
longer when they consume food with fewer carbohydrates 
and more protein. However, these experiments were 
conducted with cats living in only one city, which
limits the applicability of these studies.

To the best of our knowledge, the method of feeding 
cats with fruits to increase their happiness and 
prolong their lives has not been studied yet.
</code></pre></div></div>

<p>Note the use of the word “however” in the last sentence of each paragraph. 
It highlights gaps in existing research that your study aims to fill. 
The final paragraph confirms your awareness that your research is unique. 
While you might be mistaken, explicitly stating your unawareness would make it an honest mistake.</p>

<p>In this toy example, we’ve categorized all relevant prior work into 
three groups. We’ve cited key papers in each category and summarized 
their findings relevant to our study. We’ve also highlighted areas 
that our research will address, emphasizing its novelty.</p>

<p>When gathering references for the “Related Work” section, you’ll likely 
encounter many papers worth mentioning. How do you decide which to cite? 
Consider the following factors:</p>

<ul>
  <li>Relevance: The closer it is to your topic, the better.</li>
  <li>Citations: Opt for papers that are cited more frequently.</li>
  <li>Venue: Consult <a href="https://www.scimagojr.com/journalrank.php">journal rankings</a> and <a href="http://portal.core.edu.au/conf-ranks/">conference rankings</a> to choose the most reputable sources.</li>
</ul>

<p>Lastly, <a href="https://scholar.google.com">Google Scholar</a> is the best place
for finding prior work. If you can’t access a PDF version of a paper, try the Telegram bot: 
<a href="https://t.me/scihubbot">@scihubbot</a>.</p>

<hr />

<p>These articles and books might also be helpful:</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=tBud5yewkkc&amp;t=19s">How to write a Related Work…</a> (video) 
by <a href="https://scholar.google.com/citations?user=cZ5pY9wAAAAJ">Simone Silvestrini</a></li>
  <li><a href="https://www.youtube.com/watch?v=rk_jgtdJOD0">Literature Review: Step by Step Guide…</a> (video)
by <a href="https://scholar.google.com/citations?user=W03REUoAAAAJ">David Stuckler</a></li>
  <li><a href="http://slowsearching.blogspot.com/2014/11/a-formula-for-academic-papers-related.html">A Formula for Academic Papers: Related Work</a> 
by <a href="https://scholar.google.com/citations?user=F5Ik84MAAAAJ">Jaime Teevan</a></li>
  <li><a href="http://lucalongo.eu/howtowritearesearchpaper.html">How to write a research paper in science</a> 
by <a href="https://scholar.google.com/citations?user=oBqRuY8AAAAJ">Luca Longo</a></li>
  <li><a href="https://sites.umiacs.umd.edu/elm/2019/02/22/writing-the-literature-review/">Writing the Literature Review</a>
by <a href="https://scholar.google.com/citations?user=LoQXe24AAAAJ">Niklas Elmqvist</a></li>
  <li><a href="http://steveharoz.com/blog/2015/related-work-section/">Why I Don’t Write a “Related Work” Section</a>
by <a href="https://scholar.google.com/citations?user=OcKUn3gAAAAJ">Steve Haroz</a></li>
  <li><a href="https://dl.acm.org/doi/10.1145/165854.165934">How to get a paper accepted at OOPSLA</a> 
by Kent Beck et al.</li>
  <li><a href="https://lemire.me/blog/rules-to-write-a-good-research-paper/">Write good papers</a>
by <a href="https://scholar.google.com/citations?user=q1ja-G8AAAAJ">Daniel Lemire</a></li>
  <li><a href="https://cs.dartmouth.edu/~wjarosz/writing.md.html">Common mistakes in technical writing</a>
by <a href="https://scholar.google.com/citations?user=vrjL9p0AAAAJ">Wojciech Jarosz</a></li>
  <li><a href="https://spie.org/samples/9781510619142.pdf">How to Write a Good Scientific Paper</a>
by <a href="https://scholar.google.com/citations?hl=en&amp;user=kMsXV0oAAAAJ">Chris A. Mack</a></li>
  <li><a href="https://link.springer.com/book/10.1007/978-1-4471-6639-9">Writing for Computer Science</a> 
by <a href="https://scholar.google.com/citations?hl=en&amp;user=uEHvqE8AAAAJ">Justin Zobel</a></li>
</ul>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html"><![CDATA[In every reseach paper, the "Related Work" section is one of the most important and probably the most difficult to write.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/09/mean-streets.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/09/mean-streets.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Five Ingredients of Tech Career</title><link href="https://www.yegor256.com/2023/09/19/five-ingredients-career.html" rel="alternate" type="text/html" title="Five Ingredients of Tech Career" /><published>2023-09-19T00:00:00+00:00</published><updated>2023-09-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/09/19/five-ingredients-career</id><content type="html" xml:base="https://www.yegor256.com/2023/09/19/five-ingredients-career.html"><![CDATA[<p>A friend of mine recently asked me what five things he should do in order to
grow his technical career in a big company. He is not interested in being a big
manager, or a CEO. Rather, he wants to be a software expert, an architect, an
owner of a technology, and eventually a “Fellow.” I’m not sure I was qualified
to give such advice, but I did anyway. This is what I told him. Maybe this will
also work for you.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="8½ (1963) by Federico Fellini" src="/images/2023/09/eight-and-half.jpg" longdesc="#39678366" /><figcaption id="39678366">8½ (1963) by Federico Fellini</figcaption></figure>

<h2 id="boredom">Boredom</h2>

<p>Stay focused on one problem for many years. I literally mean
a “problem”—something that bothers people now but will stop bothering them
when you solve it. Ideally, first and foremost, it should bother you
personally. If you can’t specify in one sentence what the meaning of your
office life is—you don’t have a problem to solve. Find one.</p>

<p>A strong multi-year focus on one particular problem will most likely lead to a
rather boring office life. People around you will be switching projects,
accepting offers from crypto-startups, changing technologies, programming
languages, and teams. You, unlike them, will remain focused on one thing for
years and years. Imagine how boring it will look to them and to yourself. So be
it. Accept it.</p>

<p>Moreover, if you don’t see significant results (and you won’t for years!),
you’ll be tempted to switch to something else, where the outcomes seem more
promising. Don’t.</p>

<p>Even when you change companies, remain loyal to the problem you chose as “yours”
years ago. Don’t betray it. It’s yours. Your lifetime mission is to solve it.
Who cares which company you are in? A company is just a temporary sponsor of
your mission.</p>

<h2 id="enemies">Enemies</h2>

<p>The problem must be as monumental as finding a cure for cancer. Ensure it’s
bigger than your team, your company, and even your lifespan. The
word “ambitious” certainly fits: it must be an ambitious idea. How do you know
it’s big and ambitious enough? Count your enemies. If you have many of
them—which could include your bosses, colleagues, spouse, and, of course,
your haters on Twitter—you have a solid case. Conversely, if everyone loves
your idea and supports you, your challenge might not be big enough.</p>

<p>Think about it: If it is big enough, many people have already tried to solve it.
They failed. Naturally, they would love to see you fail too. If you don’t, it
could dent their self-respect. It’s basic psychology.</p>

<h2 id="patrons">Patrons</h2>

<p>The more enemies, the better! However, you should have a few allies. I’m
referring to high-level technical people, like a CTO, VP of Technology, Chief
Architect, or Fellow. They might not be technically competent in your
particular domain, but that doesn’t matter. Strive to establish an information
channel between you and them, and periodically share updates. Keep them
informed about your progress and occasionally seek their advice. They will
shield you from most of the attacks your enemies might launch.</p>

<h2 id="friends">Friends</h2>

<p>To clarify, it’s impossible to ascend in a human hierarchy on your own, no
matter how bright you are. You need a cadre of supporters within the
company—individuals who back you unconditionally. A few are sufficient. They
must be personally loyal to you. If you leave the company, they should follow
you without hesitation.</p>

<p>It would be ideal for all of these friends to be part of your team. However,
that’s not always feasible. Similarly, it would be wonderful if all these
friends were technically competent, but that’s not always the case. In
contrast, loyalty doesn’t often coincide with expertise. Having a friend who is
both loyal and intelligent is a luxury.</p>

<h2 id="students">Students</h2>

<p>Finally, maintain a connection with the younger generation that’s succeeding
us—students. Engage with them, learn from them, and ensure you understand
their needs and aspirations. They represent the industry’s future. If you treat
them right, they will work for you with enthusiasm unmatched by any other
employee.</p>

<p>Strengthening ties with the academic world will unquestionably reinforce your
position within your company.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html"><![CDATA[What is the recipe of success in a big technical organization? Aside from the usual butt-kissing, what may guarantee career growth?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/09/eight-and-half.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/09/eight-and-half.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bibcop: Style Checker for BibTeX</title><link href="https://www.yegor256.com/2023/09/05/style-checker-for-bibtex-files.html" rel="alternate" type="text/html" title="Bibcop: Style Checker for BibTeX" /><published>2023-09-05T00:00:00+00:00</published><updated>2023-09-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/09/05/style-checker-for-bibtex-files</id><content type="html" xml:base="https://www.yegor256.com/2023/09/05/style-checker-for-bibtex-files.html"><![CDATA[<p>Almost every document you may write in 
<a href="https://en.wikipedia.org/wiki/LaTeX">LaTeX</a> format will
have a list of references at the end. Most likely, you will
use <a href="https://www.ctan.org/pkg/bibtex">BibTeX</a> 
or <a href="https://www.ctan.org/pkg/biblatex">BibLaTeX</a> 
to print this list of references in a nicely formatted way.
It is also highly probable that your <code class="language-plaintext highlighter-rouge">.bib</code> file will contain
many typographic, stylistic, and logical mistakes. I’m fairly
certain that you won’t find the time to identify and correct them.
As a result, the “References” section in your paper may appear sloppy.
I suggest using the <a href="https://www.ctan.org/pkg/bibcop"><code class="language-plaintext highlighter-rouge">bibcop</code></a> 
package, which identifies mistakes in the <code class="language-plaintext highlighter-rouge">.bib</code> file 
and auto-fixes some of them.</p>

<!--more-->

<p>Here is a practical example. Let’s say, you want to 
cite a famous paper about transformers. First, you find it in
<a href="https://scholar.google.com/">Google Scholar</a> and click “Cite”:</p>

<figure class="picture"><img src="/images/2023/09/bibcop-scholar.png" style="width:600px;max-width:100%;" alt="picture" /></figure>

<p>Then, you put this “bib” item into your <code class="language-plaintext highlighter-rouge">main.bib</code> file:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@article</span><span class="o">{</span><span class="n">vaswani2017attention</span><span class="o">,</span>
  <span class="n">title</span><span class="o">={</span><span class="nc">Attention</span> <span class="n">is</span> <span class="n">all</span> <span class="n">you</span> <span class="n">need</span><span class="o">},</span>
  <span class="n">author</span><span class="o">={</span><span class="nc">Vaswani</span><span class="o">,</span> <span class="nc">Ashish</span> <span class="n">and</span> <span class="nc">Shazeer</span><span class="o">,</span> <span class="nc">Noam</span> <span class="n">and</span> 
    <span class="nc">Parmar</span><span class="o">,</span> <span class="nc">Niki</span> <span class="n">and</span> <span class="nc">Uszkoreit</span><span class="o">,</span> <span class="nc">Jakob</span> <span class="n">and</span> <span class="nc">Jones</span><span class="o">,</span> <span class="nc">Llion</span> <span class="n">and</span> 
    <span class="nc">Gomez</span><span class="o">,</span> <span class="nc">Aidan</span> <span class="no">N</span> <span class="n">and</span> <span class="nc">Kaiser</span><span class="o">,</span> <span class="o">{</span><span class="err">\</span><span class="no">L</span><span class="o">}</span><span class="n">ukasz</span> <span class="n">and</span> <span class="nc">Polosukhin</span><span class="o">,</span> <span class="nc">Illia</span><span class="o">},</span>
  <span class="n">journal</span><span class="o">={</span><span class="nc">Advances</span> <span class="n">in</span> <span class="n">neural</span> <span class="n">information</span> <span class="n">processing</span> <span class="n">systems</span><span class="o">},</span>
  <span class="n">volume</span><span class="o">={</span><span class="mi">30</span><span class="o">},</span>
  <span class="n">year</span><span class="o">={</span><span class="mi">2017</span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then, you write something like this in your paper:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">\</span><span class="n">documentclass</span><span class="o">{</span><span class="n">article</span><span class="o">}</span>
<span class="err">\</span><span class="n">usepackage</span><span class="o">[</span><span class="n">maxbibnames</span><span class="o">=</span><span class="mi">9</span><span class="o">]{</span><span class="n">biblatex</span><span class="o">}</span>
<span class="err">\</span><span class="n">addbibresource</span><span class="o">{</span><span class="n">main</span><span class="o">.</span><span class="na">bib</span><span class="o">}</span>
<span class="err">\</span><span class="n">begin</span><span class="o">{</span><span class="n">document</span><span class="o">}</span>
<span class="nc">Transformers</span><span class="o">~</span><span class="err">\</span><span class="n">cite</span><span class="o">{</span><span class="n">vaswani2017attention</span><span class="o">}</span> 
<span class="n">changed</span> <span class="n">everything</span><span class="o">!</span>
<span class="err">\</span><span class="n">printbibliography</span>
<span class="err">\</span><span class="n">end</span><span class="o">{</span><span class="n">document</span><span class="o">}</span>
</code></pre></div></div>

<p>This is what you will get:</p>

<figure class="picture"><img src="/images/2023/09/bibcop-before.png" style="width:600px;max-width:100%;" alt="picture" /></figure>

<p>Looks more or less fine. 
However, if you go to <a href="https://proceedings.neurips.cc/paper_files/paper/2017">the website</a> 
of the publisher of this article, you will see that:</p>

<ul>
  <li>The name of <a href="https://proceedings.neurips.cc/">the journal</a> is typed with first letters capitalized in all major words,</li>
  <li>The title of the paper is also capitalized,</li>
  <li>The middle name of “Aidan N. Gomez” has a trailing dot.</li>
</ul>

<p>In other words, Google Scholar gave you the citation with a few typographic
mistakes. While not fatal, the quality of the “References” section 
can sometimes be seen as reflective of the quality of the paper as a whole. 
Simply put, negligence is not forgivable when dealing with information about other authors. 
We must be accurate down to every letter and every dot.</p>

<p>By including <code class="language-plaintext highlighter-rouge">bibcop</code> package to the document, the problem may be solved.
First, you install it (I assume, you are using <a href="https://tug.org/texlive/">TeX Live</a>):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>tlmgr <span class="nb">install </span>bibcop
</code></pre></div></div>

<p>Then, you add this to your document, right before the <code class="language-plaintext highlighter-rouge">\addbibresource</code> command:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span>
<span class="err">\</span><span class="n">usepackage</span><span class="o">{</span><span class="n">bibcop</span><span class="o">}</span>
<span class="err">\</span><span class="n">addbibresource</span><span class="o">{</span><span class="n">main</span><span class="o">.</span><span class="na">bib</span><span class="o">}</span>
<span class="o">...</span>
</code></pre></div></div>

<p>When you compile the document, the following warnings will be printed
to the console, together with other logs:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Package bibcop Warning: A shortened name must have 
  a tailing dot in the 6th 'author', as in 'Knuth, Donald E.', 
  in the 'vaswani2017attention' entry.
Package bibcop Warning: All major words in the 'title' 
  must be capitalized, while the 2nd word 'is' is not, 
  in the 'vaswani2017attention' entry.
Package bibcop Warning: A mandatory 'doi' tag for '@article' 
  is missing among (author, journal, title, volume, year), 
  in the 'vaswani2017attention' entry.
Package bibcop Warning: The 'title' must be wrapped 
  in double curled brackets, 
  in the 'vaswani2017attention' entry.
</code></pre></div></div>

<p>You fix them all in the <code class="language-plaintext highlighter-rouge">main.bib</code> file and recompile the document:</p>

<figure class="picture"><img src="/images/2023/09/bibcop-after.png" style="width:600px;max-width:100%;" alt="picture" /></figure>

<p>This one looks much better to me 
(especially with the <a href="https://en.wikipedia.org/wiki/Digital_object_identifier">DOI</a>, which 
was not provided by Google Scholar).</p>

<p>By the way, some formatting problems may be auto-fixed by bibcop.
You can use it from the command line, assuming you have your
<code class="language-plaintext highlighter-rouge">main.bib</code> file in the current directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bibcop <span class="nt">--fix</span> <span class="nt">--in-place</span> main.bib
</code></pre></div></div>

<p>This command will make as many fixes as possible. 
Then, you can run <code class="language-plaintext highlighter-rouge">bibcop</code> again, from the command line, 
in order to check what style violations are still there:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bibcop main.bib
</code></pre></div></div>

<p>This will print the same errors as you saw earlier in the LaTeX log.</p>

<hr />

<p><a href="https://ctan.org/pkg/bibcop">In CTAN</a>, you can find full PDF documentation.</p>

<p>You are welcome to suggest additional style checkers, 
via <a href="https://github.com/yegor256/bibcop">GitHub issues</a>.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="latex" /><summary type="html"><![CDATA[By the quality of the 'References' section some people may judge the quality of your research paper; bibcop helps you keep everything clean.]]></summary></entry><entry><title type="html">Robots vs. Programmers</title><link href="https://www.yegor256.com/2023/08/29/ai-for-software-engineering.html" rel="alternate" type="text/html" title="Robots vs. Programmers" /><published>2023-08-29T00:00:00+00:00</published><updated>2023-08-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/29/ai-for-software-engineering</id><content type="html" xml:base="https://www.yegor256.com/2023/08/29/ai-for-software-engineering.html"><![CDATA[<p>The <a href="https://venturebeat.com/ai/openai-debuts-chatgpt-and-gpt-3-5-series-as-gpt-4-rumors-fly/">release</a> 
of <a href="https://chat.openai.com/">ChatGPT</a> 3.5 has changed everything for us programmers. 
Even though most of us (including me) don’t understand how it works, 
some of us use it more frequently than Stack Overflow, Google, and IDE built-in features. 
I believe this is just the beginning. Even though, only <a href="https://www.githubnext.com">Microsoft</a> 
knows what will happen next, let me try to make a humble prediction too. 
Below, I list what I believe robots (with Generative AI on board) will do in the future.
The further into the future, the lower on the list.
I tried not to repeat what <a href="https://www.githubnext.com">GitHubNext</a> is already saying.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Blade Runner (1982) by Ridley Scott" src="/images/2023/08/blade-runner.jpg" longdesc="#19d07357" /><figcaption id="19d07357">Blade Runner (1982) by Ridley Scott</figcaption></figure>

<p><strong>Report Bugs</strong>. They will go through the codebase, analyze the code, and maybe
  even try to run some tests, then submit bug reports when problems are
  obvious. They will also submit bug reports when they find code that is hard
  to understand, improperly documented, not covered by automated tests, or has security vulnerabilities.
  Additionally, they will report when they see that the code is not following
  conventions or best practices. They will write their reports so nicely and
  provide so many technical details and supplementary links that programmers
  will prefer the reports from robots much more than reports from humans.</p>

<p><strong>Review Pull Requests</strong>. They will examine the pull requests submitted to the
  repository (either by humans or robots) and review them by making comments on
  certain lines of code, either criticizing the quality of the code and/or
  suggesting better alternatives. They will keep track of the suggestions made
  earlier and will insist where necessary. In the end, the authors of the pull
  requests won’t even know who is reviewing them: a human or a robot.</p>

<aside class="youtube">
        <a href="https://www.youtube.com/watch?v=gHznfuhRR60"><div class="box">
        <img src="https://i.ytimg.com/vi/gHznfuhRR60/mqdefault.jpg" alt="YouTube video #gHznfuhRR60" />
        <div class="play"><i class="icon icon-play"></i></div>
        </div></a>
        <div>AIIN&#39;23: Robots vs. Programmers, How soon will computers fire us?;
        7 September 2023.</div></aside>

<p><strong>Refactor</strong>. From a huge collection of well-known micro-refactorings, they will
  select the few most important at any given moment and will submit pull
  requests with the changes. They won’t alter the functionality of the code or
  make massive modifications. Instead, they will improve the quality of the
  code in small increments, making it easy for us humans to merge their
  suggested changes. They won’t change too much, so we won’t feel managed by
  robots, but we will be. Slowly and incrementally, they will improve the
  codebase, making it more readable, maintainable, and better understood …
  by other robots.</p>

<p><strong>Backlog Prioritization</strong>. They will sort tasks and tickets into their
  appropriate milestones, determining which ones are of higher priority. They
  will decide which bug should be fixed first and which feature request is more
  important than others. Utilizing historical data, current team velocity, and
  other relevant metrics, they will create a prioritized backlog that aligns
  with both short-term objectives and long-term goals.</p>

<p><strong>Refine Bug Reports</strong>. They will examine already reported bugs and refine them,
  providing supplementary information, explaining the code to which the bug
  refers, and suggesting code snippets that could potentially reproduce the
  bug. They will do the work that most programmers are too lazy to do: properly
  explain the bug in order to help its fixer.</p>

<p><strong>Document Source Code</strong>. They will find places in the code that are hard to
  comprehend, such as complex functions, large classes, and big data
  structures. They will generate documentation blocks and then submit pull
  requests with them. Humans will be happy to accept these, since documenting
  someone else’s code is a routine and boring part of work. Moreover, keeping
  the documentation in sync with the source code is one of the areas where our
  human negligence is most visible.</p>

<p><strong>Fix Bugs</strong>. According to the code they already see in the codebase and the
  list of bugs reported in issues, they will generate some fixes and submit
  them as new pull requests. They will explain what the fixes are doing, why
  the improvement is made in this or that way, how critical the fix is, and
  also suggest possible alternatives. We will simply merge them.</p>

<p><strong>Formalize Requirements</strong>. They will examine the codebase and the comments
  where we discuss it, and will derive a formal definition of the requirements
  we implement. Then, they will formulate the requirements using Use Case
  diagrams, Requirement Matrix, or even informal textual documents like README
  or Wiki. They will keep these documents up to date throughout the entire
  lifecycle of the codebase—something we humans are often too lazy to do.</p>

<p><strong>Onboard</strong>: 
  They will assist in the onboarding process of new developers, 
  guiding them through the codebase, explaining architectural decisions, 
  and offering personalized tutorials. They will also help us understand
  certain code blocks by providing interactive guidance.</p>

<p><strong>Analyze Technical Debt</strong>
  They could analyze the codebase to identify areas where technical debt is 
  accumulating and suggest steps to mitigate it before it becomes problematic.
  They will submit tickets where the biggest debt territories will be
  identified and improvements suggested.</p>

<p><strong>Cleanup Documentation</strong>.
  They will reformat the doc blocks that we humans write for our classes
  and methods, and then submit pull requests with the changes. 
  Formatting the documentation correctly, using HTML, Markdown, Doxia,
  and many other formats, is a boring work where we humans fall short.</p>

<p><strong>Suggest New Features</strong>. They will examine already implemented functionality
  and will suggest additional features, submitting tickets. They will explain
  the reasons behind such new feature requests, find proper justification, and
  provide examples of how users will interact with the new functionality.</p>

<p><strong>Document Architecture</strong>. They will observe the codebase and then update the
  documentation about the architecture it implements. This is something
  programmers usually forget to do, or simply don’t know how to do right. The
  robots will use UML or perhaps less formal instruments to document the
  architecture, thus making the entire product easier to maintain.</p>

<p><strong>Estimate</strong>. They will estimate the complexity of every bug report or feature
  request in staff-hours, calendar days, or maybe even in lines of code. This
  information will help the team make planning decisions.</p>

<p><strong>Predict</strong>. By examining events in a repository, they will spot anomalies in
  our human behavior, such as changes in the mood of programmers in the
  comments, spikes in the intensity of commits, failures in CI/CD pipelines,
  and so on. They will be able to predict larger troubles before it’s too late.
  They will predict and then suggest corrective and preventive actions,
  submitting tickets with management or technical suggestions.</p>

<p><strong>Appraise</strong>. They will observe the activity of every programmer and will
  appraise their productivity. The results will be published directly to GitHub
  issues or perhaps sent to project managers by email. In the end,
  they will decide who of us humans are more valuable to their projects.</p>

<p>I’m thankful to ChatGPT for helping me build this list.</p>

<p>What do you think <del>I</del> we missed?</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="ai" /><category term="programming" /><summary type="html"><![CDATA[Robots will likely revolutionize software engineering ranging from code reviews and bug fixing to automated refactoring, backlog prioritization, and employee appraisals.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/blade-runner.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/blade-runner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Fast Tests Help Humans, Deep Tests Help Servers</title><link href="https://www.yegor256.com/2023/08/22/fast-vs-deep-testing.html" rel="alternate" type="text/html" title="Fast Tests Help Humans, Deep Tests Help Servers" /><published>2023-08-22T00:00:00+00:00</published><updated>2023-08-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/22/fast-vs-deep-testing</id><content type="html" xml:base="https://www.yegor256.com/2023/08/22/fast-vs-deep-testing.html"><![CDATA[<p>In order to reveal errors of higher complexity, automated tests are 
turned into integration tests that involve external resources in test 
scenarios, instead of their mocks. While this approach improves test 
coverage, it slows down the entire build pipeline. This compromises 
the very idea of automated tests, which are meant to be a 
<a href="/2022/07/05/safety-net.html">safety net</a>
and help programmers edit code safely. Splitting the tests into “fast” 
and “deep,” and then allowing humans to run the former while servers 
run the latter, might be a good solution to the problem.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Inglourious Basterds (2009) by Quentin Tarantino" src="/images/2023/08/inglourious-basterds.jpg" longdesc="#98a0f5f2" /><figcaption id="98a0f5f2">Inglourious Basterds (2009) by Quentin Tarantino</figcaption></figure>

<p>Consider this Java code with a simple <code class="language-plaintext highlighter-rouge">toString()</code> static method:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">stream</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="kd">final</span> <span class="nc">StringBuilder</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">d</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">buf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It reads the <code class="language-plaintext highlighter-rouge">stream</code> byte by byte, appends them to the buffer, and
returns the buffer to the client. Here is the JUnit5 test that validates
the functionality:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">readsSomeData</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="nc">Assertions</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span>
    <span class="s">"ABC"</span><span class="o">,</span>
    <span class="n">toString</span><span class="o">(</span>
      <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span>
        <span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x41</span><span class="o">,</span> <span class="mh">0x42</span><span class="o">,</span> <span class="mh">0x43</span><span class="o">}</span>
      <span class="o">)</span>
    <span class="o">)</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>So far, so good. The test works, and the method seems to be correct. Moreover, the test 
completes very quickly—just 5ms on my laptop. However, upon closer 
inspection, we can identify a bug in the method: it doesn’t close the 
input stream. This issue doesn’t impact the test because the input 
stream is in memory and doesn’t hold any valuable resources that might leak. 
However, if we introduce a new test, it will expose this problem:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">readsFromManyFiles</span><span class="o">(</span><span class="nd">@TempDir</span> <span class="nc">Path</span> <span class="n">tmp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="nc">Path</span> <span class="n">f</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"test.txt"</span><span class="o">);</span>
  <span class="nc">Files</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="s">"Hello, world!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20000</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Assertions</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span>
      <span class="mi">13</span><span class="o">,</span>
      <span class="n">toString</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">toFile</span><span class="o">())).</span><span class="na">length</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>When I run this test, I get a <code class="language-plaintext highlighter-rouge">FileNotFoundException</code> with a message saying 
<code class="language-plaintext highlighter-rouge">Too many open files</code>. If I reduce the upper limit in the for loop to 10000, 
the error disappears. This most definitely happens because the maximum number of open files 
on Mac OS X <a href="https://superuser.com/a/443168">is 12,288</a>. However, on Ubuntu, 
this limit is <a href="https://askubuntu.com/questions/1049058">set to 65536</a>. Thus, my test 
won’t spot an error if I run it on Ubuntu. I’m sure you know how to fix this error in the toString() method.</p>

<p>Obviously, the second test is much slower than the first one, taking 
650ms on my laptop (130 times slower!). This is just an example of a test that 
aids in bug detection but is time-consuming. Typically, integration tests 
demonstrate such a negative impact on performance because they involve “external” 
resources, which are slow. The file system, used by the second test, is one such external resource.</p>

<p>650ms might not be problematic when there are only a few test methods in 
a young project. However, as the number of tests increases, slow tests 
quickly become an issue since the overall build time lengthens, frustrating 
programmers. Automated tests, meant to assist coders, turn into a hindrance. 
If a coder has to wait several minutes after every code change to ensure nothing broke, 
frustration ensues. Often, the frustrated coder might remove those slow tests.</p>

<aside class="quote">It’s impossible to make integration tests faster since they are inherently slow for a reason.
</aside>

<p>It goes without saying that deleting slow tests isn’t the solution. 
So, what is? Speeding them up? Not quite. It’s almost always challenging, 
if not impossible, to make integration tests faster since they are inherently 
slow for a reason. The only way to speed them up is to mock those slow 
external resources. But these resources are tested specifically to detect 
bugs that unit tests might miss. For instance, in our case, if we mock 
the input stream, the second test will miss the bug. Therefore, the 
second (integration) test must be slow to be valuable.</p>

<p>Classifying tests into <em>fast</em> and <em>deep</em> may be a solution. The first category comprises 
tests that mock as much as possible and take no more than 20ms to run. 
The second category consists of tests that probe deeper to uncover elusive bugs, 
which might be overlooked by faster tests. More often than not, unit tests 
fall into the first category, while integration tests fit into the second. 
The distinction of “unit-vs-integration” is, in my view, misleading. “Fast-vs-deep” 
is much clearer since it’s evident to which category a test belongs. 
If a test takes under 20ms, it’s fast; if not, it’s deep.</p>

<p>Once tests are designated as either fast or deep, they should be run in two 
distinct scenarios: programmers run the fast tests during coding, 
while servers execute the deep tests during software build and/or release phases. 
In JUnit5, this categorization can be achieved using the @Tag annotation:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="nd">@Tag</span><span class="o">(</span><span class="s">"fast"</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">readsSomeData</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
<span class="nd">@Test</span>
<span class="nd">@Tag</span><span class="o">(</span><span class="s">"deep"</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">readsFromManyFiles</span><span class="o">(</span><span class="nd">@TempDir</span> <span class="nc">Path</span> <span class="n">tmp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>In most cases, obvious bugs will be detected by fast tests, giving programmers 
confidence when editing the code. On the rare occasions when fast tests 
fail to identify certain bugs, the deep tests will catch them. Only then 
will programmers run the slow tests on their laptops.</p>

<p>This is how <code class="language-plaintext highlighter-rouge">pom.xml</code> may be configured to turn “fast” tests ON, by default:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;configuration&gt;</span>
    <span class="nt">&lt;groups&gt;</span>fast<span class="nt">&lt;/groups&gt;</span>
  <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>In the CI environment, Maven must be started with the following flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mvn test -Dgroups=slow
</code></pre></div></div>

<p>A programmer can also run the “slow” tests on their own laptop using 
the same command line flag. However, this will typically only be done 
when the server issues a red signal.</p>

<p>P.S. By the way, the <code class="language-plaintext highlighter-rouge">toString()</code> method has another bug that 
isn’t detected by either the first or second test. Can you identify it? 
Could you devise a test that would expose this bug? 
Would you categorize this test as “fast” or “deep”?</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><category term="java" /><summary type="html"><![CDATA[Humans should run "fast" tests to catch obvious mistakes, while servers should execute "deep" tests to ensure the highest quality.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/inglourious-basterds.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/inglourious-basterds.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Double-Blind Review Is What Makes Decisions Fair</title><link href="https://www.yegor256.com/2023/08/15/decision-making-process.html" rel="alternate" type="text/html" title="The Double-Blind Review Is What Makes Decisions Fair" /><published>2023-08-15T00:00:00+00:00</published><updated>2023-08-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/15/decision-making-process</id><content type="html" xml:base="https://www.yegor256.com/2023/08/15/decision-making-process.html"><![CDATA[<p>How does your team review ideas, project proposals, or paper drafts?
Imagine I’m on your team and I need a budget allocated to a new project. 
I craft a proposal, elucidate the motivation, assess the risks, develop a plan, 
and then what? Do I create a PowerPoint presentation, present to my teammates 
for half an hour, answer their questions for another half hour, hear their honest 
feedback, after which they vote and a decision is made? If this is how 
things are organized within your team, you risk stifling creativity and motivation.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Возвращение (2003) by Andrey Zvyagintsev" src="/images/2023/08/the-return.jpg" longdesc="#b5305e77" /><figcaption id="b5305e77">Возвращение (2003) by Andrey Zvyagintsev</figcaption></figure>

<p>There are several problems with this fairly typical decision-making process 
in software teams or companies (with the most critical ones listed last):</p>

<ul>
  <li>
    <p><strong>Overload</strong>.
  Regardless of how crucial your proposal is, many meeting attendees have their own priorities. 
  You cannot expect them to concentrate fully on your idea or actively engage 
  in the discussion. Furthermore, some might just be lazy by nature.</p>
  </li>
  <li>
    <p><strong>Incompetence</strong>.
  No matter how talented your teammates are, expecting them to grasp 
  every detail of your proposal in just thirty minutes and then evaluate 
  it both objectively and professionally is unrealistic. It’s more likely 
  they’ll base their judgments on personal feelings towards you.</p>
  </li>
  <li>
    <p><strong>Friendship</strong>.
  The decision-makers at the meeting are your colleagues. It’s challenging 
  for them to provide unbiased and candid feedback since they don’t want 
  to risk upsetting a friend. Very few can maintain both 
  honesty and friendship—it’s a rare quality.</p>
  </li>
  <li>
    <p><strong>Jealousy</strong>.
  Since you’re presenting a proposal, it inherently becomes a contest for resources. 
  You’re seeking either a project budget or a reallocation of team efforts. 
  This puts you in opposition to others at the meeting. Many attendees might 
  resent your initiative, even subconsciously attempting to thwart you.</p>
  </li>
  <li>
    <p><strong>Fear</strong>.
  If you’re the one presenting today, someone else might be in your 
  shoes tomorrow. The same individuals critiquing your idea today 
  might face similar scrutiny tomorrow. As much as we aim for professionalism, 
  the urge for revenge can be strong, making candid feedback risky.</p>
  </li>
</ul>

<p>Considering these factors, it’s logical to presume that at the end of such 
meetings—especially if the decision goes against you—you might feel frustrated. 
You might view your team as lacking competence and feel that your talents 
go unrecognized. Best-case scenario: you decide not to present any new proposals. 
Worst-case: you begin seeking out a new team.</p>

<p>The issue isn’t necessarily with the team (they all are more or less the same) 
or your proposal (we all make mistakes). The crux of the problem lies in the 
decision-making process itself. Traditional meetings might not be the best avenue. 
Instead, I propose the following approach:</p>

<ul>
  <li>There is a review board of 10+ members and a secretary;</li>
  <li>Proposals are submitted directly to the secretary;</li>
  <li>The secretary randomly selects three board reviewers;</li>
  <li>Each reviewer evaluates the proposal in writing;</li>
  <li>Reviewers aren’t aware of the author’s identity;</li>
  <li>They then submit their written feedback to the secretary;</li>
  <li>A decision is made if 2+ reviewers endorse the proposal;</li>
  <li>The secretary informs you of the verdict;</li>
  <li>You don’t know the names of reviewers.</li>
</ul>

<p>This method introduces two vital elements that can enhance the objectivity 
of decisions and increase proposal authors’ satisfaction: <em>anonymity</em> and <em>authorship</em>. 
On one hand, reviewers can offer genuine feedback without fear of backlash, 
knowing their identity remains confidential. Conversely, since their feedback 
is documented, they’re incentivized to remain professional and objective. 
Not knowing the author ensures decisions aren’t influenced by personal relationships.</p>

<p>Moreover, this system can elevate the <em>quality of proposals</em>. As authors 
can’t verbally elaborate during meetings, they’re compelled to articulate 
their ideas comprehensively in writing. The standard of feedback might 
also improve, particularly if the secretary mandates specific criteria 
for review summaries, as opposed to vague remarks.</p>

<p>A very similar review mechanism is practiced by <a href="/2021/04/14/how-we-organized-iccq.html">scientific conferences</a>. 
When you submit a paper to one, they don’t organize a meeting where you present it in an attempt 
to persuade them to accept your work. Instead, they ask you to 
<a href="https://www.journals.elsevier.com/social-science-and-medicine/policies/double-blind-peer-review-guidelines">double-blind</a> 
your paper and then they send it to a few, more or less, randomly selected reviewers. 
When your paper is rejected (or accepted), you receive a detailed summary of the reasons, 
along with suggestions on how to improve it. If the conference is of a high level 
and its reviewers are doing their job correctly, you will be 
satisfied even in the case of rejection.</p>

<p>In conclusion, the suggested process can lead to superior decision 
quality and boost the motivation of those proposing ideas. Even if some suggestions 
are declined, they’re more likely to return to the review board with renewed proposals.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html"><![CDATA[If your team practices decision making meetings I have a better idea for you: establish a review board with the principles of anonymity and authorship.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/the-return.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/the-return.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Is Two-Step Initialization a Solution or a Symptom?</title><link href="https://www.yegor256.com/2023/08/08/two-step-initialization.html" rel="alternate" type="text/html" title="Is Two-Step Initialization a Solution or a Symptom?" /><published>2023-08-08T00:00:00+00:00</published><updated>2023-08-08T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/08/two-step-initialization</id><content type="html" xml:base="https://www.yegor256.com/2023/08/08/two-step-initialization.html"><![CDATA[<p>At times, it might appear practical to execute additional initialization steps 
for an object after its constructor has completed. However, I’m of the belief that 
such requirements signal underlying design flaws, such as object mutability,
base class fragility, violation of layering, and unfocused abstraction. 
A constructor should be good enough for all scenarios. If it’s not, refactor the object.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Нирвана (2008) by Igor Voloshin" src="/images/2023/08/nirvana.jpg" longdesc="#879ce886" /><figcaption id="879ce886">Нирвана (2008) by Igor Voloshin</figcaption></figure>

<p>This is how it usually happens (I found it in <a href="https://github.com/apache/kafka/blob/e0b7499103df9222140cdbf7047494d92913987e/clients/src/main/java/org/apache/kafka/common/security/oauthbearer/internals/secured/RefreshingHttpsJwks.java">Apache Kafka</a>):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">X</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isInitialized</span><span class="o">;</span>
  <span class="nc">Foo</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">items</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="c1">// initialize other fields</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="c1">// fill up "items" with data</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
      <span class="n">isInitialized</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It is expected that the object is used this way:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Foo</span><span class="o">();</span>
<span class="n">x</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</code></pre></div></div>

<p>There might be practical justifications for this <em>two-stage construction</em>, 
which, <a href="https://learn.microsoft.com/en-us/cpp/mfc/one-stage-and-two-stage-construction-of-objects?view=msvc-170">as per Microsoft</a>, 
is touted as an “always safer” approach to object creation. Yet, I’m convinced 
that each of these reasons signifies a flawed design and should 
serve as a catalyst for refactoring.</p>

<h2 id="resource-leakage">Resource Leakage</h2>

<p>Consider an <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html">auto-closeable</a> Java class
that opens a stream in its constructor and then 
reasonably expects it to be closed in the <code class="language-plaintext highlighter-rouge">close()</code> method:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="nc">Closeable</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">InputStream</span> <span class="n">in</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">Book</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"a.tex"</span><span class="o">));</span>
    <span class="c1">// a bit later:</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"oops!"</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>However, if the runtime exception is raised in the constructor, the stream will not be
closed and the resource <a href="https://stackoverflow.com/a/29243066/187141">will be leaked</a>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">Book</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">())</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">close()</code> will not be called by the 
<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">try-with-resources</a> statement, 
as the object will not be fully constructed and its initialization won’t be completed.
However, even if the initialization isn’t finalized, the instance
of <code class="language-plaintext highlighter-rouge">FileInputStream</code> will do part of its work: it will open the file. 
It will never close it though.</p>

<p>Two-steps initialization might be a solution:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="nc">Closeable</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">InputStream</span> <span class="n">in</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">Book</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// nothing</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"a.tex"</span><span class="o">));</span>
    <span class="c1">// a bit later:</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"oops!"</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, the code can be used in the following manner, which is indeed safer 
because the stream will always be closed:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">Book</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">())</span> <span class="o">{</span>
  <span class="n">b</span><span class="o">.</span><span class="na">init</span><span class="o">();</span> <span class="c1">// IOException raised here</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Even though this may be a good workaround, it is only a cover for
the design flaw: mutability of the attribute. A better solution would
be to get rid of <a href="/2014/06/09/objects-should-be-immutable.html">mutability</a> 
of the <code class="language-plaintext highlighter-rouge">Book</code> and remove the <code class="language-plaintext highlighter-rouge">init()</code> method.</p>

<p>Thus, the <a href="https://en.wikipedia.org/wiki/Initialization_%28programming%29">initialization</a> of the stream should be done
outside of the <code class="language-plaintext highlighter-rouge">Book</code> object and then provided to it as an argument
of the constructor (pay attention to the <code class="language-plaintext highlighter-rouge">final</code> modifier of the <code class="language-plaintext highlighter-rouge">in</code> field):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="nc">Closeable</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">InputStream</span> <span class="n">in</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span> <span class="o">=</span> <span class="n">in</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then, this is how we can use it:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"a.tex"</span><span class="o">)))</span> <span class="o">{</span>
  <span class="nc">Book</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, both the stream and the book will definitely be closed.</p>

<p>The root cause of the issue here stems from the <a href="/2014/06/09/objects-should-be-immutable.html">mutability</a> 
of the <code class="language-plaintext highlighter-rouge">in</code> attribute, 
which creates potential for resource leakage. If we were to agree upfront that 
every object must be immutable, this problem wouldn’t arise in the first place. 
We wouldn’t need a workaround like two-step initialization, because we wouldn’t 
encounter a class where an attribute might remain 
<a href="/2014/05/13/why-null-is-bad.html">uninitialized</a>. It seems that 
this example serves as <a href="/2014/11/07/how-immutability-helps.html">yet another</a> 
testament to the benefits of object immutability.</p>

<h2 id="fragile-base-class">Fragile Base Class</h2>

<p>Consider this parent class, with an immutable attribute <code class="language-plaintext highlighter-rouge">title</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="nc">Product</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Title: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, let’s extend it (again, the <code class="language-plaintext highlighter-rouge">author</code> attribute is immutable):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">extends</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">author</span><span class="o">;</span>
  <span class="nc">Book</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">,</span> <span class="nc">String</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="nd">@Override</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Author: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">author</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>What do you think will be printed after we do the following?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">Book</span><span class="o">(</span><span class="s">"Object Thinking"</span><span class="o">,</span> <span class="s">"David West"</span><span class="o">);</span>
</code></pre></div></div>

<p>This is what:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">Title:</span> <span class="nc">Object</span> <span class="nc">Thinking</span>
<span class="nl">Author:</span> <span class="kc">null</span>
</code></pre></div></div>

<p>Why does the <code class="language-plaintext highlighter-rouge">author</code> print as <code class="language-plaintext highlighter-rouge">null</code> when we provided the <code class="language-plaintext highlighter-rouge">"David West"</code> 
string in the constructor? The reason is that <code class="language-plaintext highlighter-rouge">super()</code>, the constructor 
of the parent class, was invoked before <code class="language-plaintext highlighter-rouge">this.author</code> was initialized. 
The constructor of the <code class="language-plaintext highlighter-rouge">Product</code> class called its own 
<a href="https://en.wikipedia.org/wiki/Virtual_function">virtual</a> method <code class="language-plaintext highlighter-rouge">print()</code>, 
which the derived class <code class="language-plaintext highlighter-rouge">Book</code> had overridden. This issue can be more 
generically referred to as the “<a href="https://en.wikipedia.org/wiki/Fragile_base_class">fragile base class</a>” 
problem: the base class calls its own method, expecting it to operate as defined, 
but this method is unexpectedly replaced by a different implementation in the derived class, 
leading to unintended and incorrect behavior. Such potential for method 
replacement is what renders the base class fragile.</p>

<p>Using two-phase construction could address this issue by keeping 
attribute initialization in the constructor while relocating the 
“printing” functionality to a new <code class="language-plaintext highlighter-rouge">init()</code> method. 
However, this approach merely masks the underlying design flaw: 
the class’s inherent fragility.</p>

<p>A more comprehensive solution is twofold. Firstly, maintain constructors code-free, as 
<a href="/2015/05/07/ctors-must-be-code-free.html">suggested earlier</a>. 
Secondly, opt for <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">composition over inheritance</a>, 
as has also been <a href="/2016/09/13/inheritance-is-procedural.html">previously recommended</a>.”
This is how:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="nc">Product</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Title: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Product</span> <span class="n">product</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">author</span><span class="o">;</span>
  <span class="nc">Book</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">,</span> <span class="nc">String</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">product</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Author: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">author</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, both classes are marked as <code class="language-plaintext highlighter-rouge">final</code>, making it technically impossible 
to override any of their methods. Instead of extending <code class="language-plaintext highlighter-rouge">Product</code>, the <code class="language-plaintext highlighter-rouge">Book</code> 
class encapsulates an instance of it. The <code class="language-plaintext highlighter-rouge">print()</code> method in the <code class="language-plaintext highlighter-rouge">Book</code> 
class oversees the printing functionality, delegating part of this responsibility to 
<code class="language-plaintext highlighter-rouge">product.print()</code>. Such a design becomes the only viable option if we mutually 
agree from the outset that all constructors should remain 
<a href="/2015/05/07/ctors-must-be-code-free.html">code-free</a> and that 
implementation inheritance is <a href="/2016/09/13/inheritance-is-procedural.html">off-limits</a>.</p>

<h2 id="defaults-and-configs">Defaults and Configs</h2>

<p>If you’ve coded in Java for a sufficient amount of time, 
you’ll undoubtedly find this design approach quite familiar:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Database</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">login</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
  <span class="nc">Database</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="s">"localhost"</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="mi">5432</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="s">"pgsql"</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">Config</span> <span class="n">cfg</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getHost</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getPort</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getLogin</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getPassword</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Here, the constructor assigns default values to four object attributes, while the 
<code class="language-plaintext highlighter-rouge">init()</code> method subsequently updates them based on the values from the “configuration” 
<a href="/2016/07/06/data-transfer-object.html">DTO</a>. 
This method of object initialization may seem more appealing than a series of 
<a href="/2014/09/16/getters-and-setters-are-evil.html">setter</a> 
calls, as it ensures all necessary attributes are assigned simultaneously, 
with none overlooked. Such assurance isn’t guaranteed with isolated 
<a href="/2014/09/16/getters-and-setters-are-evil.html">setters</a>. 
Furthermore, the DTO can be auto-populated from an XML or JSON file, which, when
passed to the <code class="language-plaintext highlighter-rouge">init()</code> method, further streamlines the code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Database</span><span class="o">();</span> <span class="c1">// first initialization step</span>
<span class="kt">var</span> <span class="n">cfg</span> <span class="o">=</span> <span class="n">loadFromXML</span><span class="o">(</span><span class="s">"db-config.xml"</span><span class="o">);</span>
<span class="n">db</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">cfg</span><span class="o">);</span> <span class="c1">// second initialization step</span>
</code></pre></div></div>

<p>However, this merely masks the underlying design flaw: the class is too expansive. 
It’s not about the lines of code, but rather the multitude of external elements 
it tries to abstract: the Internet address, the TCP port, the login string, the password, 
and likely more in the future. While the <code class="language-plaintext highlighter-rouge">Config</code> DTO currently suffices 
due to its modest size, it seems to pave the way for future expansion, 
tempting programmers to augment it as they see fit. As the size of <code class="language-plaintext highlighter-rouge">Config</code> increases, 
so will the number of attributes in <code class="language-plaintext highlighter-rouge">Database</code>. It’s probable that they will 
soon fall out of sync. Over time, it may become challenging to discern 
if constructing the <code class="language-plaintext highlighter-rouge">Database</code> object readies it for operation, or if a preliminary 
<code class="language-plaintext highlighter-rouge">init()</code> call is required. Further, will just invoking <code class="language-plaintext highlighter-rouge">init()</code> be sufficient to utilize the object fully?</p>

<p>If we had initially agreed that our objects should not encapsulate more than 
three attributes, as <a href="/2014/12/15/how-much-your-objects-encapsulate.html">suggested earlier</a>, 
we would have refactored this class. The <code class="language-plaintext highlighter-rouge">init()</code> method would be removed, and all 
necessary parameters would be passed through its 
<a href="/2015/05/28/one-primary-constructor.html">primary or secondary</a> constructors.
Keeping all attributes immutable would be helpful too.</p>

<p>It seems that even the <a href="https://en.wikipedia.org/wiki/Builder_pattern">Builder design pattern</a> 
would be a better solution than the <code class="language-plaintext highlighter-rouge">init()</code> method in this particular case.</p>

<h2 id="violation-of-layering">Violation of Layering</h2>

<p>Consider the following two Java classes, which depend on each other:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Order</span> <span class="n">order</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">language</span><span class="o">;</span>
  <span class="nc">Book</span><span class="o">(</span><span class="nc">Order</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">order</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">language</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="na">language</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">total</span><span class="o">;</span>
  <span class="nc">Order</span><span class="o">(</span><span class="nc">Book</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">book</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">total</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">price</span><span class="o">()</span> <span class="o">+</span> <span class="mi">10</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Clearly, instantiating either the <code class="language-plaintext highlighter-rouge">Book</code> or the <code class="language-plaintext highlighter-rouge">Order</code> is impossible, 
as each requires the other to be instantiated first.
Two-phase construction accompanied by 
<a href="/2014/06/09/objects-should-be-immutable.html">attributes mutability</a>
and 
<a href="/2014/09/16/getters-and-setters-are-evil.html">setters</a> 
may look like a solution:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Order</span> <span class="n">order</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">language</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">setOrder</span><span class="o">(</span><span class="nc">Order</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">order</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span> <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">language</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">order</span><span class="o">.</span><span class="na">language</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">total</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">setBook</span><span class="o">(</span><span class="nc">Book</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">book</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span> <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">total</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">price</span><span class="o">()</span> <span class="o">+</span> <span class="mi">10</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, it’s possible to instantiate them:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
<span class="n">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">();</span>
<span class="n">order</span><span class="o">.</span><span class="na">setBook</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
<span class="n">book</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
<span class="n">order</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
<span class="n">book</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</code></pre></div></div>

<p>However, this design exhibits a significant flaw: both the <code class="language-plaintext highlighter-rouge">order</code> and <code class="language-plaintext highlighter-rouge">book</code> objects 
remain in an incomplete state until their respective <code class="language-plaintext highlighter-rouge">init()</code> methods are invoked. 
As the code takes shape, its original author understands the correct sequence of 
method calls: the constructor first, followed by the setter, and only then 
the <code class="language-plaintext highlighter-rouge">init()</code> method. However, in the future, as others modify the code, this 
<a href="/2015/12/08/temporal-coupling-between-method-calls.html">temporal coupling</a> 
between method calls could be easily missed. An inadvertent call to 
<code class="language-plaintext highlighter-rouge">init()</code> prior to the setter could result in runtime errors that are difficult to diagnose.</p>

<p>The underlying issue here stems from a violation of the layering principle present 
in the design of both <code class="language-plaintext highlighter-rouge">Book</code> and <code class="language-plaintext highlighter-rouge">Order</code>: they are mutually dependent. 
If I recall correctly, Martin Fowler postulated that “a layer can only access layers beneath it.” 
In the context of our book-and-order design, there’s no clear distinction of 
these layers: it’s indeterminable which is foundational to the other. 
The difficulties in instantiation are just manifestations of this issue, 
and two-step initialization serves more as a band-aid rather than an actual solution.</p>

<p>I’m at a loss for how to enhance this code directly. It’s likely that the entire architecture 
needs a thorough reassessment, with the introduction of more adequate abstractions 
in place of <code class="language-plaintext highlighter-rouge">Book</code> and <code class="language-plaintext highlighter-rouge">Order</code>.</p>

<hr />

<p>It appears that two-step initialization doesn’t truly solve problems; 
rather, it merely masks them for a time. While you can have <code class="language-plaintext highlighter-rouge">init()</code> methods in your objects, 
they look like flags with “I failed to design this class properly!” written on them.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[Sometimes you might be tempted to use a two-stage construction for your object. However, I suggest reevaluating your design principles if you feel such an inclination.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/nirvana.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/nirvana.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Hidden Dangers of Method Overloading</title><link href="https://www.yegor256.com/2023/08/01/method-overloading.html" rel="alternate" type="text/html" title="The Hidden Dangers of Method Overloading" /><published>2023-08-01T00:00:00+00:00</published><updated>2023-08-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/01/method-overloading</id><content type="html" xml:base="https://www.yegor256.com/2023/08/01/method-overloading.html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Function_overloading">Method overloading</a> 
is a common feature in many programming languages that allows 
a class to have two or more methods with the same name but different parameters.
<a href="https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading">According</a> 
to Microsoft, method overloading is “one of the most important techniques 
for <em>improving</em> usability, productivity, and readability of reusable libraries.”
I disagree. In my opinion, method overloading may lead to less readable code and more bugs,
because maintaining two or more implementations under the same name gives rise to 
concealed semantics, which inevitably result in misunderstandings and functional defects.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Youth (2015) by Paolo Sorrentino" src="/images/2023/08/youth.jpg" longdesc="#62f78b0f" /><figcaption id="62f78b0f">Youth (2015) by Paolo Sorrentino</figcaption></figure>

<p>Let’s start with a Java example.
Suppose you wish to enable the addition of a product to the shopping cart, 
having either the product ID or the <code class="language-plaintext highlighter-rouge">Product</code> object at your disposal. 
If only the ID is provided, you’d want the shopping cart to access 
the product catalog, locate the corresponding <code class="language-plaintext highlighter-rouge">Product</code> object, and add it. 
This is where method overloading can prove beneficial (the <code class="language-plaintext highlighter-rouge">add()</code> method is
defined twice with two different <a href="https://stackoverflow.com/questions/8516498">signatures</a> 
and implementations):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cart</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Catalog</span><span class="o">().</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kt">var</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cart</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"book"</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>
</code></pre></div></div>

<p>This approach is indeed convenient for at least two reasons. First, the 
<code class="language-plaintext highlighter-rouge">add(int)</code> method handles the conversion from <code class="language-plaintext highlighter-rouge">int</code> to <code class="language-plaintext highlighter-rouge">Product</code>, 
which need not be repeated elsewhere—they can simply pass the product’s ID 
to this method and let it do the work—thereby eliminating code duplication. 
Second, because the functionality of “searching the catalog” is not exposed 
beyond the <code class="language-plaintext highlighter-rouge">Cart</code> class, it simplifies the surrounding code. It appears that, 
indeed, the usability and readability of the code are enhanced.</p>

<p>However, the issues addressed (code duplication and complexity) are lesser 
than the problems introduced. While the semantics of the <code class="language-plaintext highlighter-rouge">add(Product)</code> method are 
obvious, the workings of the <code class="language-plaintext highlighter-rouge">add(int)</code> method are not clear to its users. 
Perhaps it searches the catalog? Maybe it selects the n-th product from 
the existing cart and re-adds it to the end of the cart? Or perhaps it searches 
the orders previously placed by the user and extracts the n-th product from there? 
We simply don’t know when we examine the method’s signature.</p>

<aside class="quote">When something is obscured, it prompts assumptions, which in turn lead to misunderstandings, and eventually to bugs.
</aside>

<p>In order to comprehend what the <code class="language-plaintext highlighter-rouge">add(int)</code> method does, we must refer to 
its Javadoc block, which may not be sufficiently accurate. Furthermore, 
<a href="https://stackoverflow.com/a/913342/187141">as is often the case</a>, 
the documentation in the Javadoc block might not be 
in sync with the code inside the method. To put it plainly, the client 
using the <code class="language-plaintext highlighter-rouge">add(int)</code> method invariably makes an assumption about its inner workings. 
If the client is fortunate, 
1) the assumption will be accurate, and 
2) any changes subsequently made to the method won’t invalidate that assumption.</p>

<p>It appears that method overloading is the root of the issue: maintaining 
multiple implementations under a single name inevitably introduces some 
concealed semantics in most of them. Then, when something is obscured, it prompts 
assumptions, which in turn lead to misunderstandings, and eventually to bugs.</p>

<p>I believe, a better alternative looks like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ProductInCatalog</span> <span class="kd">implements</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Product</span> <span class="n">p</span><span class="o">;</span>
  <span class="nc">ProductInCatalog</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Catalog</span><span class="o">().</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="c1">// all "Product" interface's methods</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Cart</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kt">var</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cart</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"book"</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProductInCatalog</span><span class="o">(</span><span class="mi">42</span><span class="o">));</span>
</code></pre></div></div>

<p>The constructor of <code class="language-plaintext highlighter-rouge">ProductInCatalog</code> is not code-free,
as <a href="/2015/05/07/ctors-must-be-code-free.html">it ideally should be</a>,
however, this point is not so significant for our current discussion. The <code class="language-plaintext highlighter-rouge">ProductInCatalog</code>
class serves as an abstraction of a <code class="language-plaintext highlighter-rouge">Product</code> found in the catalog. This class
is used by the client of the <code class="language-plaintext highlighter-rouge">Cart</code> class. The client, in full 
awareness and with explicit intent, converts 42 (the product’s ID) into an instance 
of <code class="language-plaintext highlighter-rouge">ProductInCatalog</code>. This design no longer conceals any elements. There are 
no assumptions to be made and no conditions that the code must fulfill.</p>

<p>Do we still preserve the advantages provided by method overloading? Indeed, we do. 
There is no code duplication, and the complexity of the code is reduced. 
Furthermore, the readability of the code using the <code class="language-plaintext highlighter-rouge">Cart</code> is significantly improved. 
To summarize, I recommend avoiding method overloading, even though it will undoubtedly 
result in a larger number of classes in the codebase. However, that is 
<a href="/2017/02/28/too-many-classes.html">a different discussion altogether</a>.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[While method overloading is purported to enhance readability, it actually tends to diminish it and introduce bugs.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/youth.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/youth.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Disabled Test In Lieu of a Bug Report</title><link href="https://www.yegor256.com/2023/07/25/contribute-disabled-tests.html" rel="alternate" type="text/html" title="A Disabled Test In Lieu of a Bug Report" /><published>2023-07-25T00:00:00+00:00</published><updated>2023-07-25T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/07/25/contribute-disabled-tests</id><content type="html" xml:base="https://www.yegor256.com/2023/07/25/contribute-disabled-tests.html"><![CDATA[<p>When you find a bug in an open-source library that you use, 
<a href="/2018/07/24/bugs-or-pull-requests.html">what do you do</a>?
You submit a GitHub issue (or whatever ticket tracking system they use).
In the issue, you describe the problem in the best possible way, preferably
providing a working code example that the author of the library can run locally
to reproduce the bug. If you don’t provide them with an executable snippet of code,
they will most likely ask you to do so, unless the bug is trivial.
I suggest simplifying the workflow and giving them what they want right
in a pull request: send them the bug in the form of a disabled unit test.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Dead or Alive (1999) by Takashi Miike" src="/images/2023/07/dead-or-alive.jpg" longdesc="#25bc3165" /><figcaption id="25bc3165">Dead or Alive (1999) by Takashi Miike</figcaption></figure>

<p>Say, there is a Rust library that provides a <code class="language-plaintext highlighter-rouge">fibo()</code> function that 
calculates a <a href="https://en.wikipedia.org/wiki/Fibonacci_sequence">Fibonacci number</a>, 
which you can use this way:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
<span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">fibo</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
<span class="nd">println!</span><span class="p">(</span><span class="s">"The {n}th Fibonacci is {x}"</span><span class="p">);</span>
</code></pre></div></div>

<p>You run it and it prints <code class="language-plaintext highlighter-rouge">17711</code>, which is mistakenly the 22nd Fibonacci number,
not the 23rd. It is definitely a bug. You submit a ticket, saying something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I'm trying to use your library to calculate 
a Fibonacci  number, but for some reason, I'm 
getting a wrong result:  the 23rd number your 
library returns is 17711, while I'm expecting 
the number 28657. Please check and fix.
</code></pre></div></div>

<p>They will reply “Can you prove it, please? Show us the code!” and
you will probably add this code to the ticket:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">fibo</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">28657</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</code></pre></div></div>

<p>Then, if they are <a href="/2017/03/24/tdd-that-works.html">disciplined</a> 
programmers, a new unit test will be created and the
<code class="language-plaintext highlighter-rouge">fibo()</code> function will be fixed. Moreover, if they are 
<a href="/2022/08/04/code-and-tests-different-pull-requests.html">very disciplined</a> programmers, 
they will submit the test in a separate pull request, disabling it. Then, in
the second pull request, they will make a fix.</p>

<p>Why can’t you help them and skip the issue submission step? Just make the
first pull request yourself, with the disabled test inside and a 
<a href="/2010/03/04/pdd.html">“puzzle”</a> added to it:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @todo #42 This test is disabled because the</span>
<span class="c1">//  fibo() function doesn't work correctly</span>
<span class="c1">//  with this particular number, it returns</span>
<span class="c1">//  17711 instead of 28657. Let's fix it.</span>
<span class="nd">#[test]</span>
<span class="nd">#[ignore]</span>
<span class="k">fn</span> <span class="nf">calculates_23rd_fibonacci_number</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">fibo</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
  <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">28657</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Such a PR serves as both a bug report
(this is what the text of the puzzle will be turned into, once the PR is merged)
and a test that reproduces the problem. It will be more than welcome
by the repository maintenance team. This kind of PR saves the time
they would spend creating a unit test. Also, it saves your time for
creating a bug report, as it will be created automatically by
<a href="/2014/04/12/puzzle-driven-development-by-roles.html">the puzzles discovery tool</a>.</p>

<figure class="badge"><a href="https://http.jcabi.com"><img src="https://www.jcabi.com/logo-square.svg" style="width:48px;max-width:100%;" alt="badge" /></a></figure>

<p>BTW, this blog post was motivated by <a href="https://github.com/jcabi/jcabi-xml/pull/212">this pull request</a> 
in the <a href="https://github.com/jcabi/jcabi-xml">jcabi/jcabi-xml</a> library, where a disabled
unit test was added to the code base specifically to reproduce the bug. In addition to
the test, a puzzle was added, which led to a <a href="https://github.com/jcabi/jcabi-xml/issues/213">new ticket</a>, 
a <a href="https://github.com/jcabi/jcabi-xml/pull/214">new pull request</a>, 
and finally a <a href="https://github.com/jcabi/jcabi-xml/releases/tag/0.28.0">new release</a> of the library.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="pdd" /><category term="testing" /><summary type="html"><![CDATA[Instead of merely submitting bug reports, it can often be more efficient to contribute a pull request, complete with a disabled unit test and a detailed description of the problem.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/07/dead-or-alive.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/07/dead-or-alive.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>