<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2021-03-19T09:13:21+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Imposters to Win!</title><link href="https://www.yegor256.com/2021/03/03/imposters-to-win.html" rel="alternate" type="text/html" title="Imposters to Win!" /><published>2021-03-03T00:00:00+00:00</published><updated>2021-03-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/03/03/imposters-to-win</id><content type="html" xml:base="https://www.yegor256.com/2021/03/03/imposters-to-win.html">&lt;p&gt;The time of objectivity is fading out. 
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;Meritocracy&lt;/a&gt; is now a rude word.
&lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;Metrics&lt;/a&gt; 
in management will soon be considered as harassment.
Productivity is &lt;a href=&quot;/shift-m/2020/44.html&quot;&gt;already&lt;/a&gt; a false objective.
It‚Äôs time to start taking advantage of this era of nonsense.
The era of imposters is coming!
Don‚Äôt miss the opportunity to become a great one.
Here is a quick summary of key techniques to make you highly successful in any argument
you may have in your flat democratic organizations of the future without
any skills, knowledge, education, or real achievements.
Just pure love and emotions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Kominsky Method (2018-) by Chuck Lorre&quot; src=&quot;/images/2021/03/the-kominsky-method.jpg&quot; longdesc=&quot;#89fd0ee4&quot; /&gt;&lt;figcaption id=&quot;89fd0ee4&quot;&gt;The Kominsky Method (2018-) by Chuck Lorre&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Trust Me!&lt;/strong&gt;
Don‚Äôt even try to prove anything by numbers.
This is an outdated technique.
They will only treat you like a weird person, at best.
Rationality is not a sign of professionalism nowadays.
Instead, you should hit them with a straight ‚Äútrust me‚Äù and expect no answer back.
How can they reply to that anyway?
Can they really say that they don‚Äôt trust you?
Such toxic behavior no serious organization would tolerate!
We are supposed to trust each other since we are in the same team.
And not just in the same team!
We have to trust everybody in the world‚Äîthis is what good human beings do!
Thus, no numbers, no facts, no proofs‚Äîjust a pure and simple ‚Äútrust me‚Äù and you will be the king of any argument.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I Know What I‚Äôm Doing!&lt;/strong&gt;
Do they still think that you are not convincing enough with your ‚ÄúTrust Me‚Äù?
That won‚Äôt help them.
Tell them that you worked five years in Oracle and also four years in Intel.
This automatically means that you are right.
Can they argue back with ‚ÄúWe don‚Äôt care where you worked before‚Äù?
That‚Äôs too harsh, they won‚Äôt do it.
They must respect their colleagues!
Especially those who worked in Oracle and Intel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do You Think I‚Äôm Stupid?!&lt;/strong&gt;
If they continue arguing, ask this question, looking them right in the eye.
What do they answer?
They will apologize.
The smartest of them will beg for forgiveness and then run away from the meeting room.
This question doesn‚Äôt have a right answer.
No matter what they say, you win.
If they start with ‚ÄúNo‚Äù, your point is proven.
If they start with ‚ÄúYes‚Äù‚Ä¶ well they won‚Äôt start with ‚ÄúYes‚Äù.
They are good and kind people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I Will Quit If You Keep Talking Like This!&lt;/strong&gt;
This is your last line.
After it they won‚Äôt have anything in their hands.
They will have to stop right there.
And they will be afraid to get into a fight with you ever again.
Your position will be solid for many months ahead
Especially in a big company, where retention rate is the most important indicator of success.
If you quit because of an argument‚Äîyour opponent will lose a lot of karma points.
‚ÄúI will quit‚Äù is the most powerful weapon in your arsenal.
However, use it carefully, only after you massage them with the other three tactics.&lt;/p&gt;

&lt;p&gt;Your ultimate goal in your career as a great imposter should be
the situation where nobody argues with you. They must be
scared of verifying your results, questioning your conclusions,
validating your points, and even asking you difficult questions.
They must know that by doing so they will immediately become
‚Äútoxic and negative people‚Äù‚Äîyour team doesn‚Äôt appreciate such
behavior.&lt;/p&gt;

&lt;p&gt;They must understand that real experts are very fragile and can easily
be offended. They must learn the lesson: 
doubting the opinion of an expert is simply rude.
The best they can do with you, an expert, is to tell you how
great you are and how much they respect your contribution. Anything
aside from that you must treat as an offense and react immediately.&lt;/p&gt;

&lt;p&gt;This is how you tame them.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="sarcasm" /><summary type="html">The time of objectivity is fading out. Meritocracy is now a rude word. Metrics in management will soon be considered as harassment. Productivity is already a false objective. It‚Äôs time to start taking advantage of this era of nonsense. The era of imposters is coming! Don‚Äôt miss the opportunity to become a great one. Here is a quick summary of key techniques to make you highly successful in any argument you may have in your flat democratic organizations of the future without any skills, knowledge, education, or real achievements. Just pure love and emotions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/03/the-kominsky-method.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/03/the-kominsky-method.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dataization</title><link href="https://www.yegor256.com/2021/02/10/dataization.html" rel="alternate" type="text/html" title="Dataization" /><published>2021-02-10T00:00:00+00:00</published><updated>2021-02-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/02/10/dataization</id><content type="html" xml:base="https://www.yegor256.com/2021/02/10/dataization.html">&lt;p&gt;There are three things in EOLANG (and the ùúë-calculus which we
based it on): data, atoms, and objects. There is a dataization
function, which puts all three together in order to make an EO
program alive. Here is how it works together with Java,
for example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Space Force (2020) by Steve Carell and Greg Daniels&quot; src=&quot;/images/2021/02/space-force.jpg&quot; longdesc=&quot;#6c25ba32&quot; /&gt;&lt;figcaption id=&quot;6c25ba32&quot;&gt;Space Force (2020) by Steve Carell and Greg Daniels&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let‚Äôs say we are making an online shop where items are
being shipped to different countries and we must calculate
shipment costs based on the customer‚Äôs location. We create
an &lt;a href=&quot;/2020/12/01/abstract-objects.html&quot;&gt;abstract object&lt;/a&gt;
that represents shipment costs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[customer] &amp;gt; cost-of-shipment
  if. &amp;gt; @
    customer.country.eq &quot;US&quot;
    9.99
    24.99&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, let‚Äôs say we have an abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;customer-in-mysql&lt;/code&gt;,
which represents the customer‚Äôs information in the MySQL database. To
make a specific customer &lt;code class=&quot;highlighter-rouge&quot;&gt;jeff&lt;/code&gt; we make a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;customer-in-mysql&lt;/code&gt;,
specifying the ID of the customer as &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;customer-in-mysql 42 &amp;gt; jeff&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The closed object &lt;code class=&quot;highlighter-rouge&quot;&gt;jeff&lt;/code&gt; is the customer we are looking for.
We assume that it has the &lt;code class=&quot;highlighter-rouge&quot;&gt;country&lt;/code&gt; child object, which is needed by
the &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we make a copy of the &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt; and then
add it to the product price in order to calculate how
much a customer has to pay:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cost-of-shipment jeff &amp;gt; x

x.add product.price &amp;gt; total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is a new object, a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt;. Then,
we take the child abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; from it and make a copy,
giving &lt;code class=&quot;highlighter-rouge&quot;&gt;product.price&lt;/code&gt; object to it as an attribute. We name the created copy
as &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt;. Then, we print the total price:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;stdout &amp;gt; app
  sprintf
    &quot;Your total is %f&quot; total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All these manipulations don‚Äôt make the number print yet. They
are all object declarations. We‚Äôve declared one abstract object
&lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt; and a few closed objects: &lt;code class=&quot;highlighter-rouge&quot;&gt;jeff&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the most interesting part, which we call &lt;em&gt;dataization&lt;/em&gt;. It‚Äôs a process
of turning an object into data. The data is something that doesn‚Äôt have
any child objects and is the simplest element of the computing platform,
where EOLANG software is being compiled. You may think that in the example
above &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;US&quot;&lt;/code&gt; are data. They are not. They are also objects
and we can write this, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;42.add 5 &amp;gt; z

&quot;US&quot;.length &amp;gt; len&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The data behind these objects is not visible for us at the level of
EOLANG program. The data is inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; object. Only the runtime
of the specific platform can dig it out through the dataization
mechanism. If you compile the EOLANG code to Java, you will get
a class &lt;code class=&quot;highlighter-rouge&quot;&gt;EOapp&lt;/code&gt; (derived from the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; object), which can be dataized
like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import org.eolang.phi.Data;
EOapp app = new EOapp();
Boolean data = new Dataized(app).take(Boolean.class);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code class=&quot;highlighter-rouge&quot;&gt;take()&lt;/code&gt; will take the object &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; and will try to ask it
to turn itself as data. The object &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; will redirect this request
to the object &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;, which will ask the object &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt; the same thing:
what data do you have? The object &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt; is the object &lt;code class=&quot;highlighter-rouge&quot;&gt;x.add&lt;/code&gt;.
If we look at what &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is, we‚Äôll see that it‚Äôs a copy of our own
abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt;, which doesn‚Äôt have the child object &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;!
However, it does have a child object &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;, which is a ‚Äúcatch-all‚Äù object:
the request to get &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; will land there.&lt;/p&gt;

&lt;p&gt;The object bound to the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; is the copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if. &amp;gt; @
  customer.country.eq &quot;US&quot;
  9.99
  24.99&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will take the &lt;code class=&quot;highlighter-rouge&quot;&gt;customer.country.eq&lt;/code&gt;, dataize it in order to get
boolean data, and then, depending on this data, return either &lt;code class=&quot;highlighter-rouge&quot;&gt;9.99&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;24.99&lt;/code&gt;.
Either one of them has the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, which will be used to
construct a new object, with an argument &lt;code class=&quot;highlighter-rouge&quot;&gt;product.price&lt;/code&gt;. The result
will be used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dataized&lt;/code&gt; Java class in order to continue the process
of dataization. Finally, the sum of two numbers will be dataized to a
Java floating-point number.&lt;/p&gt;

&lt;p&gt;The dataization of &lt;code class=&quot;highlighter-rouge&quot;&gt;customer.country.eq&lt;/code&gt; is happening inside
the runtime and is not visible at the level of EOLANG. The object
&lt;code class=&quot;highlighter-rouge&quot;&gt;eq&lt;/code&gt; is called an &lt;em&gt;atom&lt;/em&gt;, since it‚Äôs an atomic element of the language‚Äîit
has to be implemented in Java, not in EOLANG. There are other atoms
in the example above: &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;.
They all are implemented in Java.&lt;/p&gt;

&lt;p&gt;Thus, we construct objects first, either through &lt;em&gt;abstraction&lt;/em&gt; (declaring new
abstract objects) or through &lt;em&gt;application&lt;/em&gt; (making copies of abstract
objects). Next, we dataize one of the objects and the entire composition
of objects starts to ‚Äúlive,‚Äù trying to turn itself into data.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="eolang" /><summary type="html">There are three things in EOLANG (and the ùúë-calculus which we based it on): data, atoms, and objects. There is a dataization function, which puts all three together in order to make an EO program alive. Here is how it works together with Java, for example.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/02/space-force.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/02/space-force.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Greed-Based Planning</title><link href="https://www.yegor256.com/2021/02/02/greed-based-planning.html" rel="alternate" type="text/html" title="Greed-Based Planning" /><published>2021-02-02T00:00:00+00:00</published><updated>2021-02-02T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/02/02/greed-based-planning</id><content type="html" xml:base="https://www.yegor256.com/2021/02/02/greed-based-planning.html">&lt;p&gt;You have an objective, a budget, and a team. You are
a manager and you want the project to be done. You get your team together
in a &lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meeting room&lt;/a&gt;
to discuss the &lt;em&gt;plan&lt;/em&gt;. You tell them what needs to
be done and ask them how fast they can do it. Then, you do the motivational dance
and &lt;del&gt;beg&lt;/del&gt; ask them to commit. They nod and go back
to their cubicles. Of course, after a few
months of ‚Äúhard work‚Äù all the milestones are missed and you get back to the planning
meeting. And, yes, you pay their salaries
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;anyway&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Undercover (2019-) by Netflix&quot; src=&quot;/images/2021/02/undercover.jpg&quot; longdesc=&quot;#37fc4133&quot; /&gt;&lt;figcaption id=&quot;37fc4133&quot;&gt;Undercover (2019-) by Netflix&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This top-down management formula (boss says, everybody nods) was inherited
from the times and industries where staff was easily replaceable
and vitally dependent on the employer‚Äôs will.
Call it the time of slavery, if you will.
The basic principle was: ‚ÄúIf you don‚Äôt do what I say, you suffer.‚Äù&lt;/p&gt;

&lt;p&gt;Those times are over. Well, not everywhere, but in software development‚Äîfor sure.
The suffering part is gone and the formula has evolved to:
‚ÄúIf you don‚Äôt do what I say, I feel sad.‚Äù
You simply can‚Äôt make them &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;suffer&lt;/a&gt; anymore.
The only instrument that is left in your hands is
&lt;a href=&quot;/2019/09/03/injection-of-guilt.html&quot;&gt;guilt&lt;/a&gt;.
However, it doesn‚Äôt work well with professionals.
&lt;a href=&quot;/2016/09/27/command-control-innovate.html&quot;&gt;&lt;del&gt;Unfortunately&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=vaFPNdNaOAY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/vaFPNdNaOAY/mqdefault.jpg&quot; alt=&quot;YouTube video #vaFPNdNaOAY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M160: Traditional top-down planning doesn&amp;#39;t work, try better alternative;
        1 February 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;And because of that the traditional idea of planning doesn‚Äôt work either.
No matter how you plan, you can‚Äôt get an honest commitment from the
team, that‚Äôs why your plans will always be wishes instead of plans.&lt;/p&gt;

&lt;p&gt;I suggest a better formula: ‚ÄúIf you do what I say, you benefit.‚Äù
Here is how it works: you identify expected deliverables, their quality acceptance criteria,
put reward tags on each one (money, points, promotion,
free vacation, or maybe cookies), and ask your programmers:
‚ÄúHow much do you want to earn?‚Äù&lt;/p&gt;

&lt;p&gt;They will do their own planning, having in mind their own time resources,
putting together all the sophisticated motivational pieces, and then make
their decisions: ‚ÄúI‚Äôm going to do these 12 tasks and earn $5,000.‚Äù
Then, using this information you create the plan and calculate the
timeline of the project. They tell you what they &lt;em&gt;want&lt;/em&gt; to earn
and you &lt;em&gt;know&lt;/em&gt; what results you will get.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;You identify the points of reward and observe the intentions of the team to earn them.
&lt;/aside&gt;

&lt;p&gt;Thus, instead of making plans and making the team deliver according
to them, you identify the points of reward and observe the
intentions of the team to earn them. Your plan will be the derivative
of people‚Äôs &lt;del&gt;greed&lt;/del&gt; ambition.&lt;/p&gt;

&lt;p&gt;Of course, this may be easier said than done: Spoiled and lazy
programmers, who are in the overwhelming majority, most likely
will refuse to work for awards. My advice is not to convince
them too much. Just offer the awards on top of the salary they are
getting already. Rewards don‚Äôt need to be large. What‚Äôs important is
the shift in the decision making process. The decision to complete
the work has to be made by the programmer, not you. The decision
has to be based on their own selfish reasons.&lt;/p&gt;

&lt;p&gt;What‚Äôs left for you is just to put their decisions into one
document and see when the project will be completed and how
many bonuses you have to prepare to pay at the end.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">You have an objective, a budget, and a team. You are a manager and you want the project to be done. You get your team together in a meeting room to discuss the plan. You tell them what needs to be done and ask them how fast they can do it. Then, you do the motivational dance and beg ask them to commit. They nod and go back to their cubicles. Of course, after a few months of ‚Äúhard work‚Äù all the milestones are missed and you get back to the planning meeting. And, yes, you pay their salaries anyway.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/02/undercover.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/02/undercover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Put a Number on Your Boss‚Äôs Emotions</title><link href="https://www.yegor256.com/2020/12/29/metric-for-emotions.html" rel="alternate" type="text/html" title="Put a Number on Your Boss‚Äôs Emotions" /><published>2020-12-29T00:00:00+00:00</published><updated>2020-12-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/12/29/metric-for-emotions</id><content type="html" xml:base="https://www.yegor256.com/2020/12/29/metric-for-emotions.html">&lt;p&gt;You got into a company that believes in
&lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;democratic&lt;/a&gt;
values, doesn‚Äôt &lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;measure&lt;/a&gt;
performance, doesn‚Äôt judge, doesn‚Äôt
&lt;a href=&quot;/2016/09/27/command-control-innovate.html&quot;&gt;control&lt;/a&gt;, doesn‚Äôt force, and
doesn‚Äôt blame; however, at the end of the year they tell you that
your performance was not as high as expected. Why?
‚ÄúJust work better, my friend, we count on you!‚Äù
Bad luck, you are in a teal self-managing organization. They‚Äôve already
killed the management, but still didn‚Äôt dare to kill the managers.
They don‚Äôt know how to measure, but still have people who are
supposed to do it regularly, in order to distribute monetary rewards.
What do you do before you quit? Here is a survival recipe.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Bonnie and Clyde (1967) by Arthur Penn&quot; src=&quot;/images/2020/12/bonnie-and-clyde.jpg&quot; longdesc=&quot;#b097e026&quot; /&gt;&lt;figcaption id=&quot;b097e026&quot;&gt;Bonnie and Clyde (1967) by Arthur Penn&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here are the symptoms of a disease known as
‚Äú&lt;a href=&quot;https://en.wikipedia.org/wiki/Workers'_self-management&quot;&gt;self-managing&lt;/a&gt;‚Äù
organizations (also known as teal orgs, or no-management orgs, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Management_style#Democratic&quot;&gt;democratic&lt;/a&gt;
management, or humane management, or just love and peace):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You do have managers. They decide when you get a salary raise,
when you are promoted, when fired, when moved to a new project,
and so on. They do exist.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They tell you that they are &lt;em&gt;not&lt;/em&gt; managers, but partners,
co-founders, friends, or even family members.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They meet you time to time for face-to-face talks
to focus you on big objectives and inject some
&lt;a href=&quot;/2019/09/03/injection-of-guilt.html&quot;&gt;guilt&lt;/a&gt;:
‚ÄúWe must focus on our customers, or our business value, on strategic
growth! We must make a big impact! We count on your great results
this year!‚Äù&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They don‚Äôt give you any numeric evaluation of your performance
during the course of the entire year.
Unfortunately, there are simply no metrics, mostly because it‚Äôs a very bad idea
to put a number on a person! When and if you try to suggest some metrics,
everybody laughs and says that ‚ÄúIt‚Äôs very difficult to measure
the performance of creative people! &lt;del&gt;Go back to your cage!&lt;/del&gt;‚Äù&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the time comes, they make their monetary decisions based on their personal
emotional and irrational judgment of yourself and your results.
You just get a smaller bonus by the end of the year than Jeff, your
less experienced but more vocal and friendly co-worker.
Why? Just because. Take it or leave it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you get brave enough and ask them why your bonus is smaller
than Jeff‚Äôs, they ask you ‚ÄúHow do you know??‚Äù
and start investigating. Then, when they
calm down, you get a long lecture, mentioning some year-old
facts about you not attending the office on that Saturday
‚Äúyou definitely remember‚Äù when everybody was fixing the production
server previously broken by Jeff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, you quit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hold on, don‚Äôt quit. In almost all other organizations you will
meet the same idiots, but with different names. They are not evil people,
they are just incompetent. They never studied project management, they
don‚Äôt have any professional education, they only read books like
&lt;a href=&quot;https://amzn.to/3mgxt7k&quot;&gt;Reinventing Organizations&lt;/a&gt; and listen
to lectures on leadership and multiculturalism. They are not managers.
Forgive them.&lt;/p&gt;

&lt;p&gt;But the question remains, how to behave in order to get the biggest
bonus by the end of the year. I would even say that a more important question
is how to not get yourself hugely frustrated when your bonus is smaller
than Jeff‚Äôs, who was obviously less productive, according to your personal
judgment. This actually is the key problem: jealousy. If you see
that someone, who you don‚Äôt respect due to his/her bad results and lack
of skills, is appreciated more than yourself by your boss ‚Äî
you get jealous and quit.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;When they can‚Äôt objectively evaluate your performance, they judge you irrationally and emotionally.
&lt;/aside&gt;

&lt;p&gt;Teal &lt;a href=&quot;/2017/06/06/gluten-free-management.html&quot;&gt;gluten-free&lt;/a&gt;
managers can‚Äôt objectively evaluate your performance.
They will always judge you irrationally and emotionally. They simply
don‚Äôt collect any data during the year (because it‚Äôs a bad idea,
&lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;remember&lt;/a&gt;!)
and the only thing they have in front of them when it‚Äôs time to make
a decision‚Äîis their feelings about yourself!&lt;/p&gt;

&lt;p&gt;I think that it‚Äôs still possible to survive in this
&lt;a href=&quot;/2020/01/07/embrace-the-chaos.html&quot;&gt;mess&lt;/a&gt; though. We just
have to understand how their minds work.
Is it possible to continue doing what we are doing, while
giving these managers something they can use as performance data at the
end of the year? I believe, we have one good metric, they subconsciously
rely on, which we can more or less easily increase:&lt;/p&gt;

&lt;p&gt;‚ÄúThe &lt;em&gt;amount of messages&lt;/em&gt; you get from your boss per day.‚Äù&lt;/p&gt;

&lt;p&gt;If you want to be the best in the team, no matter what are your
factual results, boost this metric. It‚Äôs simple. Just stay in touch
with the bosses: send them updates, ask questions, share news, go
to lunch with them, rat on your colleagues, spread rumors, etc.
No matter what you do, the goal is: increase the number of messages
they send you back. If it‚Äôs growing, you are getting closer to them,
they pay attention to you, they start feeling that you are important,
they will appraise you positively when the time comes. If the number
decreases, you are getting out of their circle‚Äîit‚Äôs dangerous.&lt;/p&gt;

&lt;p&gt;This metric will help you understand your position in the team before
the end of the year, when it would be too late. Just see how often the boss
is texting Jeff and you will know where you stand. No matter
what Jeff is working on, what the quality of his code is, what the
value of his contribution is‚Äîthese things are less important than the
traffic of messages your mutual boss is sending to him.&lt;/p&gt;

&lt;p&gt;Am I being too sarcastic? Not really. This is the new reality
the proponents of self-managing teams are pushing us towards:
Objectivity and honesty is being replaced with adulation and grovelling.
Take it or leave it.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How do you know that your boss appreciates your work more than others?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1355972734614974464?ref_src=twsrc%5Etfw&quot;&gt;January 31, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="sarcasm" /><summary type="html">You got into a company that believes in democratic values, doesn‚Äôt measure performance, doesn‚Äôt judge, doesn‚Äôt control, doesn‚Äôt force, and doesn‚Äôt blame; however, at the end of the year they tell you that your performance was not as high as expected. Why? ‚ÄúJust work better, my friend, we count on you!‚Äù Bad luck, you are in a teal self-managing organization. They‚Äôve already killed the management, but still didn‚Äôt dare to kill the managers. They don‚Äôt know how to measure, but still have people who are supposed to do it regularly, in order to distribute monetary rewards. What do you do before you quit? Here is a survival recipe.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/12/bonnie-and-clyde.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/12/bonnie-and-clyde.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Self-Managing vs. Manager-Free Organizations</title><link href="https://www.yegor256.com/2020/12/22/self-managing-orgs.html" rel="alternate" type="text/html" title="Self-Managing vs. Manager-Free Organizations" /><published>2020-12-22T00:00:00+00:00</published><updated>2020-12-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/12/22/self-managing-orgs</id><content type="html" xml:base="https://www.yegor256.com/2020/12/22/self-managing-orgs.html">&lt;p&gt;We are in trouble. On the one hand, most managers are weak and incompetent.
Their mistakes destroy our &lt;a href=&quot;/2017/09/19/what-motivates-me.html&quot;&gt;motivation&lt;/a&gt;,
decrease productivity, and lead to business failures.
As a result, many of us believe that managers are evil.
On the other hand, there is a new idea that self-managing organizations are
the future. Its proponents are trying to convince us that chaos is
better than management mistakes. They want us to believe that subordination,
hierarchy, &lt;a href=&quot;/2016/09/27/command-control-innovate.html&quot;&gt;control&lt;/a&gt;,
and order are new bad words to be prohibited in a respectful society.
We must stop them!&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Loro (2018) by Paolo Sorrentino&quot; src=&quot;/images/2020/12/loro.jpg&quot; longdesc=&quot;#21fff271&quot; /&gt;&lt;figcaption id=&quot;21fff271&quot;&gt;Loro (2018) by Paolo Sorrentino&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Self-managing organization are, as some researchers
&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S0191308517300059&quot;&gt;believe&lt;/a&gt;,
post-bureaucratic, humanistic, democratic, and even
&lt;a href=&quot;/2016/02/18/holacracy-autocracy.html&quot;&gt;holacratic&lt;/a&gt;.
&lt;a href=&quot;https://frankmartela.com/about-the-author/&quot;&gt;Frank Martela&lt;/a&gt;
&lt;a href=&quot;https://jorgdesign.springeropen.com/articles/10.1186/s41469-019-0062-9&quot;&gt;says&lt;/a&gt;
that self-management is ‚Äúan &lt;em&gt;ideal&lt;/em&gt; type of organizational form.‚Äù
The idea is trendy, especially after the publication
of &lt;a href=&quot;https://amzn.to/3mgxt7k&quot;&gt;Reinventing Organizations&lt;/a&gt; by Frederic Laloux.
However, ‚Äúcalling it a novel phenomenon is utter nonsense,‚Äù
&lt;a href=&quot;https://corporate-rebels.com/reinventing-the-wheel/&quot;&gt;according&lt;/a&gt; to
&lt;a href=&quot;https://twitter.com/joost_minnaar&quot;&gt;Joost Minnaar&lt;/a&gt;‚Äîthe idea has been known for decades.&lt;/p&gt;

&lt;p&gt;My first question is: what exactly was wrong with
bureaucratic, un-humanistic, and non-democratic management?
&lt;a href=&quot;https://en.wikipedia.org/wiki/James_R._Barker&quot;&gt;James R. Barker&lt;/a&gt;
made it clear &lt;a href=&quot;https://www.jstor.org/stable/pdf/2393374.pdf&quot;&gt;a long time ago&lt;/a&gt;:
‚Äúworkers in a self-managing team will experience day-to-day work life in vastly
different ways than workers in a traditional management system. Instead
of being told what to do by a supervisor, self-managing workers must
gather and synthesize information, act on it, and take collective
responsibility for those actions.‚Äù&lt;/p&gt;

&lt;p&gt;Sounds &lt;a href=&quot;https://medium.com/culturati/2f23c298c79b&quot;&gt;very attractive&lt;/a&gt;.
Nobody tells us what to do anymore! We just look around,
gather information, synthesize more information, and ‚Äúact!‚Äù (whatever that means).
Of course, we must not forget that money somehow arrives in our bank accounts
every two weeks‚Äîthis component of the old un-humanistic bureaucratic management model
we don‚Äôt want to get rid of, I believe. Right, Mr. Barker?&lt;/p&gt;

&lt;p&gt;Seriously, who in a self-managing organization makes these decisions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An employee asks for a raise&lt;/li&gt;
  &lt;li&gt;An employee gets lazy and must be fired&lt;/li&gt;
  &lt;li&gt;An employee needs a budget for a new project&lt;/li&gt;
  &lt;li&gt;A project must be terminated&lt;/li&gt;
  &lt;li&gt;A new employee needs to be hired&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply put, who resolves monetary and performance appraisal conflicts, and how?
All together by ‚Äúraising their thumb‚Äù
as &lt;a href=&quot;https://medium.com/percolab-droplets/generative-decision-making-process-cf0b131c5ac4&quot;&gt;Generative Decision Making&lt;/a&gt; suggests?
Thumb-raising will work for low-caliber questions like which
kind of coffee we should order for the office next week or what the
best color is for our new t-shirts. However, more important strategic decisions
may only be made by those who are ready to pay for mistakes: managers.&lt;/p&gt;

&lt;p&gt;In a traditional hierarchical organization, everybody has a manager, who
is responsible for answering these questions. This is what managers are for:
to concentrate authority and responsibility. This is what levels of management
are for: to decompose larger authority and responsibility into
smaller pieces, delegating them to lower-level personnel. I believe, I don‚Äôt need
to explain this essential wisdom: it‚Äôs the fundamentals of management.
Right, &lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Drucker&quot;&gt;Mr. Drucker&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;However, despite the feeling that self-management adepts are not practitioners but
liberal propagandists (trying to declare freedom to everybody without giving
any practically possible scenarios),
there is one idea I do share with them: managers are evil.
Pay attention: managers, not management! There is a big difference.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get back to the problem definition once again: We don‚Äôt like being
told what to do. However, is this really the problem or is there something deeper
that we are missing? Let‚Äôs see, what are the most popular issues with management that people
complain about (I got them from
&lt;a href=&quot;https://www.inc.com/marcel-schwantes/8-mistakes-managers-make-according-to-their-employees.html&quot;&gt;Inc&lt;/a&gt;
and
&lt;a href=&quot;https://www.monster.co.uk/advertise-a-job/hr-resources/workforce-management-and-planning/management-skills/what-are-the-most-common-management-mistakes/&quot;&gt;Monster&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They micromanage&lt;/li&gt;
  &lt;li&gt;They don‚Äôt listen&lt;/li&gt;
  &lt;li&gt;They don‚Äôt value us&lt;/li&gt;
  &lt;li&gt;They don‚Äôt provide feedback&lt;/li&gt;
  &lt;li&gt;They don‚Äôt motivate&lt;/li&gt;
  &lt;li&gt;They don‚Äôt set goals&lt;/li&gt;
  &lt;li&gt;They don‚Äôt delegate&lt;/li&gt;
  &lt;li&gt;They don‚Äôt explain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list may be much longer, but I think that the root cause of all of them
is the same: managers make &lt;em&gt;appraisal mistakes&lt;/em&gt;. As all other people, managers
can‚Äôt always be objective. Instead, they are very biased and subjective. We say that they
don‚Äôt listen. This is our perception. They do listen, but they don‚Äôt
appraise us right, based on the information we deliver. They do listen, but they
don‚Äôt call us genius. What do we say? They don‚Äôt listen! They don‚Äôt motivate, we say, but
in reality they just don‚Äôt give us what we think we deserve. They don‚Äôt value us?
The same story: we just feel unappreciated. We feel they micromanage? They just
don‚Äôt appreciate the results we deliver without micromanagement, we stop
delivering anything, and they resort to micromanagement.
The root cause always is the same: appraisal mistakes.&lt;/p&gt;

&lt;p&gt;What can we do to fix this?
We should take the appraisal job away from managers! This is how we solve the problem.
People must not decide whose performance is better, because they can‚Äôt do it
right and this leads to all the other problems. If managers stop appraising us,
they will turn into leaders, mentors, teachers, experts, gurus, decision makers,
and everybody else, who we don‚Äôt hate. We hate &lt;em&gt;appraisers&lt;/em&gt;, because they make
mistakes about our performance and kill our motivation. We won‚Äôt hate them
at all, if there is a &lt;em&gt;system&lt;/em&gt;, which is based on
&lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;&lt;em&gt;metrics&lt;/em&gt;&lt;/a&gt;,
which judge our results.&lt;/p&gt;

&lt;p&gt;What self-managing adepts are offering is to destroy the entire management
system and replace it with chaos (or something very close to it).
They seem to not understand where the real problem is. They just don‚Äôt like
‚Äúbeing told what to do‚Äù and to fix this they suggest getting rid
of what our civilization has been building for thousands of years:
responsibility delegation through subordination (aka ‚Äúmanagement‚Äù).
They meet incompetent management that doesn‚Äôt appreciate them enough and
start crying and blaming everybody with the word ‚Äúmanager‚Äù in their job titles.
In other words, to cure the tumor they want to kill the patient.&lt;/p&gt;

&lt;p&gt;Let me reiterate: The evolution of management is needed! We are not happy
with what we have now: most managers are incompetent. However, the solution is not
self-managing but manager-less organizations. We need objective metrics,
automated &lt;a href=&quot;/2018/03/21/zerocracy-announcement.html&quot;&gt;tools&lt;/a&gt; (maybe with AI) to replace
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;managers&lt;/a&gt;
as our appraisers.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">We are in trouble. On the one hand, most managers are weak and incompetent. Their mistakes destroy our motivation, decrease productivity, and lead to business failures. As a result, many of us believe that managers are evil. On the other hand, there is a new idea that self-managing organizations are the future. Its proponents are trying to convince us that chaos is better than management mistakes. They want us to believe that subordination, hierarchy, control, and order are new bad words to be prohibited in a respectful society. We must stop them!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/12/loro.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/12/loro.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Abstract Objects</title><link href="https://www.yegor256.com/2020/12/01/abstract-objects.html" rel="alternate" type="text/html" title="Abstract Objects" /><published>2020-12-01T00:00:00+00:00</published><updated>2020-12-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/12/01/abstract-objects</id><content type="html" xml:base="https://www.yegor256.com/2020/12/01/abstract-objects.html">&lt;p&gt;How do you create objects in your object-oriented language?
Let‚Äôs take something classic, like C++, Java, or C#. First you define
a class, and then you make an instance of it. The first step is known
as &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_%28computer_science%29&quot;&gt;abstraction&lt;/a&gt;,
and the second one as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Instance_%28computer_science%29#Object_oriented_programming&quot;&gt;instantiation&lt;/a&gt;.
A similar pair of operations
exist in functional programming: declaring a function is
abstraction,
while calling it with specific arguments is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Apply&quot;&gt;application&lt;/a&gt;.
The &lt;a href=&quot;/2016/09/20/oop-without-classes.html&quot;&gt;question is&lt;/a&gt;:
why does OOP need classes &lt;em&gt;and&lt;/em&gt; objects,
while FP survives with just functions?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Irishman (2019) by Martin Scorsese&quot; src=&quot;/images/2020/12/the-irishman.jpg&quot; longdesc=&quot;#79e00810&quot; /&gt;&lt;figcaption id=&quot;79e00810&quot;&gt;The Irishman (2019) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is an &lt;em&gt;abstract&lt;/em&gt; object in &lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[id db] &amp;gt; book
  db.query &amp;gt; title
    &quot;SELECT title FROM book WHERE id=?&quot;
    id&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The name of the object is &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt;. It has three
&lt;a href=&quot;/2020/11/24/objects-without-methods.html&quot;&gt;attributes&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;.
The first two are ‚Äúfree‚Äù: they are not bound to any objects yet. The third
one &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; is bound already to a copy of the object &lt;code class=&quot;highlighter-rouge&quot;&gt;db.query&lt;/code&gt;. The object
&lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; is abstract because it has some free attributes‚Äîit‚Äôs not specific
enough to refer to a specific entity in the real world.&lt;/p&gt;

&lt;p&gt;The construct &lt;code class=&quot;highlighter-rouge&quot;&gt;db.query&lt;/code&gt; takes an abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt; from the object
bound to the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; and makes a copy of it, specifying two
arguments: the SQL string and the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;. The process of copying an abstract
object is called ‚Äúapplication,‚Äù since it‚Äôs very similar to applying
arguments to a function in FP.&lt;/p&gt;

&lt;p&gt;The right way to use an abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; is to make a copy of it, specifying
the arguments:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;book 42 mysql &amp;gt; b&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is
a new object‚Äîa copy of the &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt;. In ùúë-calculus, which is foundational
to the EO programming language, this would be written as the following
formula:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;b ‚Ü§ book(42, mysql)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;, we just do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;b.title &amp;gt; t&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also put it all together in one line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(book 42 mysql).title &amp;gt; t&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It‚Äôs possible to apply some arguments to an abstract object leaving
other attributes still free. For example, this would make
another abstract object, still requiring the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; to be specified
in order to become a &lt;em&gt;closed&lt;/em&gt; object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;book mysql:db &amp;gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The suffix &lt;code class=&quot;highlighter-rouge&quot;&gt;:db&lt;/code&gt; helps the compiler understand which free
attribute should be bound to the object &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt;.
Later, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; can be copied again and a closed object &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will be created:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;x 42 &amp;gt; b&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even though the syntax of EO makes it possible to say &lt;code class=&quot;highlighter-rouge&quot;&gt;book.title&lt;/code&gt;,
it will lead to a compile-time error: It‚Äôs prohibited to touch
free attributes of an abstract object or attributes that depend
on other free attributes. However, let‚Äôs say we add a new attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt;, in order to print it‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; to the console we would do the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[id db] &amp;gt; book
  stdout &amp;gt; print
    sprintf
      &quot;The book ID is %d&quot;
      id
  db.query &amp;gt; title
    &quot;SELECT title FROM book WHERE id=?&quot;
    id&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; doesn‚Äôt need the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; attribute to be bound, since it
doesn‚Äôt use it. It‚Äôs possible to copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; with just &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; and
then call &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; (assuming it‚Äôs happening in an EO interactive console):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ book 42:id &amp;gt; x
x
$ x.print
The book ID is 42&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By the way, do you know any other languages with abstract objects or
is EO the first one to introduce this design?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="eolang" /><summary type="html">How do you create objects in your object-oriented language? Let‚Äôs take something classic, like C++, Java, or C#. First you define a class, and then you make an instance of it. The first step is known as abstraction, and the second one as instantiation. A similar pair of operations exist in functional programming: declaring a function is abstraction, while calling it with specific arguments is application. The question is: why does OOP need classes and objects, while FP survives with just functions?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/12/the-irishman.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/12/the-irishman.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Objects Without Methods</title><link href="https://www.yegor256.com/2020/11/24/objects-without-methods.html" rel="alternate" type="text/html" title="Objects Without Methods" /><published>2020-11-24T00:00:00+00:00</published><updated>2020-11-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/24/objects-without-methods</id><content type="html" xml:base="https://www.yegor256.com/2020/11/24/objects-without-methods.html">&lt;p&gt;What do you think an object is in OOP? No matter what language you are
programming with, you will most probably agree with Bruce Eckel,
the author of &lt;a href=&quot;https://amzn.to/3pRHv1Q&quot;&gt;Thinking in Java&lt;/a&gt;, who said that ‚Äúeach object has a state
and operations that you can ask it to perform,‚Äù or
Benjamin Evans, the author of &lt;a href=&quot;https://amzn.to/35uKVPU&quot;&gt;Java in a Nutshell&lt;/a&gt;, who claimed that it is
‚Äúa collection of data fields that hold values and methods that operate on those values.‚Äù
However, hold on‚Ä¶ What if I told you that an object may have no ‚Äúoperations‚Äù
and still be a perfect ‚Äúequivalent of the quanta from which the universe
is constructed,‚Äù as David West suggested in his great book
&lt;a href=&quot;https://amzn.to/3kuXHlL&quot;&gt;Object Thinking&lt;/a&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Ballad of Buster Scruggs (2018) by Coen brothers&quot; src=&quot;/images/2020/11/the-ballad-of-buster-scruggs.jpg&quot; longdesc=&quot;#3de3bf2f&quot; /&gt;&lt;figcaption id=&quot;3de3bf2f&quot;&gt;The Ballad of Buster Scruggs (2018) by Coen brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;,
our experimental programming language, we made an attempt to re-define
OOP and its objects. There are two types of &lt;em&gt;things&lt;/em&gt; in EO: atoms and objects.
An atom is the lowest level language primitive, which can‚Äôt be expressed by
other atoms. For example, an arithmetic addition of two other objects is an atom
(stay with me, this is EO syntax, you will get used to it):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;add 5 y &amp;gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a more traditional Java-like &lt;a href=&quot;https://en.wikipedia.org/wiki/Infix_notation&quot;&gt;infix notation&lt;/a&gt;
this code would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;x = add(5, y)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The atom is &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; and its two specific
arguments are &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;. This statement creates a new atom, using
the existing one and specifying its arguments. The name of the new atom being
created is &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;. Once we ask this newly created atom to do anything,
it gets what‚Äôs in &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;, adds &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, and starts behaving
like a summary of them. Until then, it stays quiet.
EO is a declarative language.&lt;/p&gt;

&lt;p&gt;Atoms are provided by the EO runtime. For example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt;,  and &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; are for arithmetic operations;
&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; are for forking and iterating;
&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;eq&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; are for logical operations, and so on.
Atoms may resemble low-level functions with arguments.
However, they don‚Äôt calculate results immediately, but only when needed.
Saying &lt;code class=&quot;highlighter-rouge&quot;&gt;add(5, file)&lt;/code&gt; won‚Äôt lead to reading the content
of the file and adding 5 to it immediately. Only when the
created atom is dealt with will the file reading happen.&lt;/p&gt;

&lt;p&gt;Next, on top of these atoms, objects can be created by a programmer.
For example, this is an object that represents a circle:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[r] &amp;gt; circle
  mul 2 3.14 r &amp;gt; perimeter
  mul 3.14 r r &amp;gt; area&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first line creates an ‚Äúabstract‚Äù object named &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt;. It is abstract,
because one of its attributes &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; is ‚Äúfree‚Äù. It‚Äôs not specified
in this object and that‚Äôs why the object can‚Äôt be used as is, it has
to be copied with &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; specified. For example, this is the circle &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;
with the radius 30:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;circle 30 &amp;gt; c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt; has three attributes. The first one is &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;, which is free.
The other two are &lt;code class=&quot;highlighter-rouge&quot;&gt;perimeter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;area&lt;/code&gt;. They are ‚Äúbounded,‚Äù since their
atoms are already defined: &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt; in both cases. To get the area of the
circle &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; we do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;c.area &amp;gt; a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like a method call, but it‚Äôs not. We don‚Äôt call a method, we just
take an &lt;code class=&quot;highlighter-rouge&quot;&gt;area&lt;/code&gt; object from the object &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;. It‚Äôs not created for us
at the moment we do &lt;code class=&quot;highlighter-rouge&quot;&gt;c.area&lt;/code&gt;! It has already been there sitting and waiting
for us to take it. It was created right when the object &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; was built.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;We have objects, but we don‚Äôt have methods. There are only attributes representing other objects.
&lt;/aside&gt;

&lt;p&gt;This is the difference between methods in Java and attributes in EO.
In Java, every method is a procedure to be executed as soon as it‚Äôs
called. This method calling (or message sending, according to
&lt;a href=&quot;/2017/12/12/alan-kay-was-wrong.html&quot;&gt;early OOP adepts&lt;/a&gt;)
mechanism was inherited from C functions,
which itself we inherited from ALGOL procedures, I believe.
EO does it differently. There is no method calling. It just takes attributes out
of objects and gives them to other objects, until control is
passed to them and it gets down to the level of atoms.&lt;/p&gt;

&lt;p&gt;In the example above, the object &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is not a calculated number.
It‚Äôs an atom &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt; that encapsulates &lt;code class=&quot;highlighter-rouge&quot;&gt;3.14&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt; (the radius). The
result of the calculation is not yet known. If we don‚Äôt do anything
with &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, the CPU will never do the calculation. However, if we decide
to, say, print the number to the console, the calculation will happen:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;stdout
  sprintf
    &quot;Radius is %d, Area is %d&quot;
    r
    a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt; constructs the string, which encapsulates
three attributes: the text, &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;. By the way,
it‚Äôs possible to use either vertical or horizontal notation
for constructing objects. The code above may be written like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;stdout (sprintf &quot;Radius is %d, Area is %d&quot; r a)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The atom &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; encapsulates the string constructed by &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;
and stays quiet. It doesn‚Äôt print anything! Only when someone
at some point tries to ‚Äútouch‚Äù this object, taking one of
its attributes out, the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; will drop the line to the
console.&lt;/p&gt;

&lt;p&gt;There are no attributes in &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt;, and most
other atoms, except one: ùúë.
Any object or atom has this specific attribute, also known as
the ‚Äúbody‚Äù of an object. Once someone attempts to touch &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.ùúë&lt;/code&gt;,
the console will see the string.&lt;/p&gt;

&lt;p&gt;Thus, we have objects, but we don‚Äôt have methods.
There are only attributes representing other objects.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="eolang" /><summary type="html">What do you think an object is in OOP? No matter what language you are programming with, you will most probably agree with Bruce Eckel, the author of Thinking in Java, who said that ‚Äúeach object has a state and operations that you can ask it to perform,‚Äù or Benjamin Evans, the author of Java in a Nutshell, who claimed that it is ‚Äúa collection of data fields that hold values and methods that operate on those values.‚Äù However, hold on‚Ä¶ What if I told you that an object may have no ‚Äúoperations‚Äù and still be a perfect ‚Äúequivalent of the quanta from which the universe is constructed,‚Äù as David West suggested in his great book Object Thinking?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/11/the-ballad-of-buster-scruggs.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/11/the-ballad-of-buster-scruggs.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Software Quality Award, 2021</title><link href="https://www.yegor256.com/2020/11/15/award-2021.html" rel="alternate" type="text/html" title="Software Quality Award, 2021" /><published>2020-11-15T00:00:00+00:00</published><updated>2020-11-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/15/award-2021</id><content type="html" xml:base="https://www.yegor256.com/2020/11/15/award-2021.html">&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/andreea/quality-award.svg&quot; style=&quot;width:300px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This is the &lt;em&gt;seventh&lt;/em&gt; year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The maximum prize
is still the same‚Äî&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;,
&lt;a href=&quot;/2016/10/23/award-2017.html&quot;&gt;2017&lt;/a&gt;,
&lt;a href=&quot;/2017/10/24/award-2018.html&quot;&gt;2018&lt;/a&gt;,
&lt;a href=&quot;/2018/09/30/award-2019.html&quot;&gt;2019&lt;/a&gt;,
&lt;a href=&quot;/2019/11/03/award-2020.html&quot;&gt;2020&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is &lt;a href=&quot;https://docs.google.com/forms/d/1mf0IGryvAhUnIbbhemXPSbIXxE21e190MyQdKuEY_zw&quot;&gt;&lt;strong&gt;the form&lt;/strong&gt;&lt;/a&gt;
to fill out.&lt;/p&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One person can submit only one project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Submissions are accepted until September 1, 2021.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I will check the commit history to make sure you‚Äôre the main contributor to the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Results will be announced October 15, 2021 on this page and by email (or maybe a bit later).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The best project will receive $4,096
(I may split this amount among a few projects and may give away a smaller amount!).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Winners that received any cash prizes in previous years can‚Äôt submit again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Z70PMGaxGhY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Z70PMGaxGhY/mqdefault.jpg&quot; alt=&quot;YouTube video #Z70PMGaxGhY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;How to win $4096 in the next year Quality Award? (webinar #29);
        1 November 2017.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open source (in GitHub).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least 4,096 lines of code (&lt;a href=&quot;https://www.npmjs.com/package/cloc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cloc&lt;/code&gt;&lt;/a&gt; without any arguments)
&lt;em&gt;and&lt;/em&gt; at least 16,384 &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;hits-of-code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one year old (the age of the first commit).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object-oriented (that‚Äôs the only thing I understand).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn‚Äôt matter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don‚Äôt care about
popularity; quality is the key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it‚Äôs still eligible for the award. I don‚Äôt care about
your marketing position; quality is all.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="award" /><summary type="html">This is the seventh year of the Software Quality Award. The maximum prize is still the same‚Äî$4,096. The rules are still the same. Read on. Previous years are here: 2015, 2016, 2017, 2018, 2019, 2020.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/andreea/quality-award.png" /><media:content medium="image" url="https://www.yegor256.com/images/andreea/quality-award.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Strong Typing without Types</title><link href="https://www.yegor256.com/2020/11/10/typing-without-types.html" rel="alternate" type="text/html" title="Strong Typing without Types" /><published>2020-11-10T00:00:00+00:00</published><updated>2020-11-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/10/typing-without-types</id><content type="html" xml:base="https://www.yegor256.com/2020/11/10/typing-without-types.html">&lt;p&gt;In 1974, Liskov and Zilles &lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/942572.807045&quot;&gt;defined&lt;/a&gt;
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot;&gt;strongly-typed&lt;/a&gt;
language as one in which ‚Äúwhenever an object is passed from
a calling function to a called function, its type must be
compatible with the type declared in the called function.‚Äù
Strong &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_system&quot;&gt;type checking&lt;/a&gt;,
without doubt, decreases the amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Type_system#Type_errors&quot;&gt;type errors&lt;/a&gt;,
which leads to higher quality. However, the question is:
do we really need types in order to strongly enforce typing?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Redirected (2014) by Emilis Velyvis&quot; src=&quot;/images/2020/11/redirected.jpg&quot; longdesc=&quot;#8b769c87&quot; /&gt;&lt;figcaption id=&quot;8b769c87&quot;&gt;Redirected (2014) by Emilis Velyvis&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;For example, this is a place where we expect an instance of
Java &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/concepts/interface.html&quot;&gt;interface&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; to arrive:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;The ISBN is: %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The type &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If an object that doesn‚Äôt &lt;code class=&quot;highlighter-rouge&quot;&gt;implement&lt;/code&gt; the interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; is passed
to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;, the compiler will complain
with the ‚Äútype mismatch‚Äù error. It will be hard for a programmer to make
a mistake and pass an object of type, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;Car&lt;/code&gt; to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;.
However, it will still be possible, via dynamic type casting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mercedes-Benz G63&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code will compile without issues, but at runtime the
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/ClassCastException.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;&lt;/a&gt;
will be thrown, since it won‚Äôt be
possible to cast &lt;code class=&quot;highlighter-rouge&quot;&gt;Car&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The beauty of strong typing is that it prevents errors. However, it increases
the complexity of code: you need to create types first, you need to declare them
in all your functions, you need type casting, which is hard to debug, and so on.
Weak typing &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/38002&quot;&gt;proponents&lt;/a&gt;
complain about this a lot and create languages like Ruby,
which don‚Äôt have types at all, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This is ISBN: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; doesn‚Äôt expect &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; to be of any
particular type. Whatever comes in‚Äîis fine. Later, when it‚Äôs
time to call &lt;code class=&quot;highlighter-rouge&quot;&gt;.isbn&lt;/code&gt; the runtime checks whether the
incoming &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; has such a method. If it does, everything works just fine,
if it doesn‚Äôt, a runtime error &lt;a href=&quot;https://ruby-doc.org/core-2.5.0/NoMethodError.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt;&lt;/a&gt;
is raised.&lt;/p&gt;

&lt;p&gt;So far so good.&lt;/p&gt;

&lt;p&gt;However, here is the idea: what if we combine the simplicity and brevity
of dynamic typing with the safety of strong typing by getting
rid of types all together and letting the compiler infer type
information from the code that works with the objects? Here is our
code again:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;The ISBN is: %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Think about this: at compile time it‚Äôs already obvious that &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; must have
&lt;em&gt;at least&lt;/em&gt; one method &lt;code class=&quot;highlighter-rouge&quot;&gt;isbn()&lt;/code&gt;. No need to force programmers to define
the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; explicitly and mention in the signature of the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;
that only books are welcome: this knowledge can easily be inferred from
the body of the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;! The compiler may look at all statements
in the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; and clearly &lt;em&gt;understand&lt;/em&gt; what exactly will be done
with the object &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. This information should be enough to visualize
the ‚Äútype‚Äù of the incoming object. No need to ask the programmer to
do this explicitly and spend another five lines of code in a new file
to declare the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;. The compiler can do this job for us.&lt;/p&gt;

&lt;p&gt;Of course, to make this work we must prohibit
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;type casting&lt;/a&gt;
of any kind, which is not possible in Java, C++, C# and other
pseudo-object-oriented languages. But it is possible in
&lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;WDYT?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">In 1974, Liskov and Zilles defined a strongly-typed language as one in which ‚Äúwhenever an object is passed from a calling function to a called function, its type must be compatible with the type declared in the called function.‚Äù Strong type checking, without doubt, decreases the amount of type errors, which leads to higher quality. However, the question is: do we really need types in order to strongly enforce typing?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/11/redirected.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/11/redirected.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Pain of Daily Reports</title><link href="https://www.yegor256.com/2020/11/03/daily-reports.html" rel="alternate" type="text/html" title="The Pain of Daily Reports" /><published>2020-11-03T00:00:00+00:00</published><updated>2020-11-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/03/daily-reports</id><content type="html" xml:base="https://www.yegor256.com/2020/11/03/daily-reports.html">&lt;p&gt;A few days ago I asked
&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=yegor256&quot;&gt;my Twitter&lt;/a&gt;
followers to vote in a
&lt;a href=&quot;https://twitter.com/yegor256/status/1318899898364866560&quot;&gt;simple poll&lt;/a&gt;.
They did, screaming in comments that only a &lt;del&gt;stupid&lt;/del&gt;
incompetent manager would ask programmers to send daily reports,
while everything they do can easily be tracked in tickets, Git history, and so on.
Indeed, why on earth would a sane manager ask software engineers, already very busy with coding,
to spend time on writing these ridiculous reporting emails?
Let me try to give you a good reason.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Norsemen (2017) by Jon Iver Helgaker et al.&quot; src=&quot;/images/2020/11/norsemen.jpg&quot; longdesc=&quot;#e2cead6d&quot; /&gt;&lt;figcaption id=&quot;e2cead6d&quot;&gt;Norsemen (2017) by Jon Iver Helgaker et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I‚Äôm sure that in your team
1) every contribution programmers make goes to the source code,
2) each pull request passes a mandatory and strict review process,
and 3) everybody is paid
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;only&lt;/a&gt;
according to the amount of results they contribute.
Of course, thanks to such an objective and fair process, all programmers
are self-disciplined and self-motivated. They know what they work for,
how to achieve better results, and exactly what needs
to be done in order to help the project move forward: all metrics are
right in front of you, and them. By the end
of the month you just open the dashboard, see the numbers and
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;reward&lt;/a&gt;
the best of them.&lt;/p&gt;

&lt;p&gt;Is this how your team works? I doubt it. I was kidding.&lt;/p&gt;

&lt;p&gt;Most probably it works like this:
1) some people occasionally commit some code
while others barely touch the keyboard spending most of their ‚Äúwork time‚Äù
sitting in
&lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meetings&lt;/a&gt;
and chatting online,
2) everybody gets paid
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;regularly&lt;/a&gt;,
no matter how much they contribute
and those who don‚Äôt do anything get as much as the hard-workers, or even more,
3) code reviews are hardly mandatory and very often dirty code
gets through, just because nobody wants to offend its author
or the review takes too long with no chances to see code improvements,
simply because the author doesn‚Äôt care.
I can continue, if you like.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Yj1VFGK9vqc&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Yj1VFGK9vqc/mqdefault.jpg&quot; alt=&quot;YouTube video #Yj1VFGK9vqc&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M143: Daily reports are a perfect guilt-triggering instrument for a lazy team;
        12 November 2020.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Sound familiar?&lt;/p&gt;

&lt;p&gt;In this situation, which is much more popular than the previous
story, how do you, being a
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;manager&lt;/a&gt;,
make people actually work? I‚Äôm talking about
those people who don‚Äôt work simply because it would be stupid to work
when nobody can control the output and can‚Äôt really punish anyone for its
absence. How do you &lt;em&gt;enforce&lt;/em&gt; the discipline in such a team?&lt;/p&gt;

&lt;p&gt;You can, of course, go to the tracking system and check how many
tickets were closed by Jeff during the day. You can also read the
Git history and find out how many lines of code Jeff wrote. Or you can
monitor the dashboard every day to see what tasks assigned
to Jeff were resolved during the week. You can do all that. The question
is‚Äîwhat do you do when you find out that Jeff doesn‚Äôt do anything? Or that he
does much less than everybody else? An even bigger question is: what do you do when you
realise that everybody in your team is lazy and does as little as they
can do or nothing at all?&lt;/p&gt;

&lt;p&gt;Sounds weird and has nothing to do with your reality? Really?
Look at &lt;a href=&quot;https://twitter.com/yegor256/status/1322877629024948226&quot;&gt;this&lt;/a&gt; Twitter poll.&lt;/p&gt;

&lt;p&gt;So, what do you do with the team, if you can‚Äôt really fire anyone
and you can‚Äôt motivate them in any way: they are paid regardless. How do you
discipline them?&lt;/p&gt;

&lt;p&gt;The only possible instrument is &lt;em&gt;guilt&lt;/em&gt;.
I &lt;a href=&quot;/2019/09/03/injection-of-guilt.html&quot;&gt;wrote&lt;/a&gt; about this before.
You have to find a way to make them feel guilty when they get
lazy and deliver less than they could. The most popular way to do
that is &lt;a href=&quot;/2015/01/08/morning-standup-meetings.html&quot;&gt;daily standups&lt;/a&gt;.
You line them up every morning and make them
feel uncomfortable reporting the progress. It works and works well
in so many teams over the world, thanks to the popularity of Agile.
Without these guilt-triggering standups I don‚Äôt know where the tech
industry would be.&lt;/p&gt;

&lt;p&gt;Yet another instrument of the same kind is &lt;em&gt;daily reports&lt;/em&gt;. You make your programmers
summarize their work during the day and email you. To make the feeling of guilt
even stronger, ask them to CC a few other people, like their colleagues,
maybe an HR person, maybe someone from another team. Make this list
mandatory. It will be very hard to say in the email that the day
ended and no results were achieved. They will have to make something
up and eventually will start actually doing something.&lt;/p&gt;

&lt;p&gt;Some of them will complain that it‚Äôs
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;micromanagement&lt;/a&gt;.
Tell them that you are not interested in how they spend their days, but only
in knowing the results they delivered. Ask them to report only tangible
and visible things, like ‚Äúticket closed,‚Äù ‚Äúdocument created,‚Äù
or ‚Äúthe experiment conducted.‚Äù In my opinion, this daily reporting
is not micromanagement at all, since you don‚Äôt tell them how to achieve
their goals. It may be a fine-grained control mechanism, but there
is nothing wrong with
&lt;a href=&quot;/2018/10/09/can-you-control-us.html&quot;&gt;control&lt;/a&gt;,
in any management paradigm. Thus,
if they go to your supervisor and complain about your actions,
you have a perfect explanation: you just want to know about their
results, that‚Äôs all.&lt;/p&gt;

&lt;p&gt;They may say that the information is already
available in the tracking system, but you can say that you prefer
to get it by email, since it‚Äôs faster and more convenient for you.
Moreover, how much will such a daily report cost them? Five
minutes every day, right? Not a big deal.&lt;/p&gt;

&lt;p&gt;Don‚Äôt tell them about the guilt part, of course.
Let it be your secret.&lt;/p&gt;

&lt;p&gt;The bottom line is that in the absence of proper management, both morning standups and
evening daily reports are the best tools to manage people. What else can you use
to connect their performance directly with guilt mechanisms in
their brains?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Your team leader is asking you to email him every day with a summary of your daily results. Your reaction:&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1318899898364866560?ref_src=twsrc%5Etfw&quot;&gt;October 21, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">A few days ago I asked my Twitter followers to vote in a simple poll. They did, screaming in comments that only a stupid incompetent manager would ask programmers to send daily reports, while everything they do can easily be tracked in tickets, Git history, and so on. Indeed, why on earth would a sane manager ask software engineers, already very busy with coding, to spend time on writing these ridiculous reporting emails? Let me try to give you a good reason.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/11/norsemen.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/11/norsemen.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>