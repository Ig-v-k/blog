<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2023-08-22T15:00:58+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Fast Tests Help Humans, Deep Tests Help Servers</title><link href="https://www.yegor256.com/2023/08/22/fast-vs-deep-testing.html" rel="alternate" type="text/html" title="Fast Tests Help Humans, Deep Tests Help Servers" /><published>2023-08-22T00:00:00+00:00</published><updated>2023-08-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/22/fast-vs-deep-testing</id><content type="html" xml:base="https://www.yegor256.com/2023/08/22/fast-vs-deep-testing.html"><![CDATA[<p>In order to reveal errors of higher complexity, automated tests are 
turned into integration tests that involve external resources in test 
scenarios, instead of their mocks. While this approach improves test 
coverage, it slows down the entire build pipeline. This compromises 
the very idea of automated tests, which are meant to be a 
<a href="/2022/07/05/safety-net.html">safety net</a>
and help programmers edit code safely. Splitting the tests into “fast” 
and “deep,” and then allowing humans to run the former while servers 
run the latter, might be a good solution to the problem.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Inglourious Basterds (2009) by Quentin Tarantino" src="/images/2023/08/inglourious-basterds.jpg" longdesc="#98a0f5f2" /><figcaption id="98a0f5f2">Inglourious Basterds (2009) by Quentin Tarantino</figcaption></figure>

<p>Consider this Java code with a simple <code class="language-plaintext highlighter-rouge">toString()</code> static method:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">stream</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="kd">final</span> <span class="nc">StringBuilder</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">d</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">buf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It reads the <code class="language-plaintext highlighter-rouge">stream</code> byte by byte, appends them to the buffer, and
returns the buffer to the client. Here is the JUnit5 test that validates
the functionality:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">readsSomeData</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="nc">Assertions</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span>
    <span class="s">"ABC"</span><span class="o">,</span>
    <span class="n">toString</span><span class="o">(</span>
      <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span>
        <span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x41</span><span class="o">,</span> <span class="mh">0x42</span><span class="o">,</span> <span class="mh">0x43</span><span class="o">}</span>
      <span class="o">)</span>
    <span class="o">)</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>So far, so good. The test works, and the method seems to be correct. Moreover, the test 
completes very quickly—just 5ms on my laptop. However, upon closer 
inspection, we can identify a bug in the method: it doesn’t close the 
input stream. This issue doesn’t impact the test because the input 
stream is in memory and doesn’t hold any valuable resources that might leak. 
However, if we introduce a new test, it will expose this problem:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">readsFromManyFiles</span><span class="o">(</span><span class="nd">@TempDir</span> <span class="nc">Path</span> <span class="n">tmp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="nc">Path</span> <span class="n">f</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"test.txt"</span><span class="o">);</span>
  <span class="nc">Files</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="s">"Hello, world!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20000</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Assertions</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span>
      <span class="mi">13</span><span class="o">,</span>
      <span class="n">toString</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">toFile</span><span class="o">())).</span><span class="na">length</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>When I run this test, I get a <code class="language-plaintext highlighter-rouge">FileNotFoundException</code> with a message saying 
<code class="language-plaintext highlighter-rouge">Too many open files</code>. If I reduce the upper limit in the for loop to 10000, 
the error disappears. This most definitely happens because the maximum number of open files 
on Mac OS X <a href="https://superuser.com/a/443168">is 12,288</a>. However, on Ubuntu, 
this limit is <a href="https://askubuntu.com/questions/1049058">set to 65536</a>. Thus, my test 
won’t spot an error if I run it on Ubuntu. I’m sure you know how to fix this error in the toString() method.</p>

<p>Obviously, the second test is much slower than the first one, taking 
650ms on my laptop (130 times slower!). This is just an example of a test that 
aids in bug detection but is time-consuming. Typically, integration tests 
demonstrate such a negative impact on performance because they involve “external” 
resources, which are slow. The file system, used by the second test, is one such external resource.</p>

<p>650ms might not be problematic when there are only a few test methods in 
a young project. However, as the number of tests increases, slow tests 
quickly become an issue since the overall build time lengthens, frustrating 
programmers. Automated tests, meant to assist coders, turn into a hindrance. 
If a coder has to wait several minutes after every code change to ensure nothing broke, 
frustration ensues. Often, the frustrated coder might remove those slow tests.</p>

<aside class="quote">It’s impossible to make integration tests faster since they are inherently slow for a reason.
</aside>

<p>It goes without saying that deleting slow tests isn’t the solution. 
So, what is? Speeding them up? Not quite. It’s almost always challenging, 
if not impossible, to make integration tests faster since they are inherently 
slow for a reason. The only way to speed them up is to mock those slow 
external resources. But these resources are tested specifically to detect 
bugs that unit tests might miss. For instance, in our case, if we mock 
the input stream, the second test will miss the bug. Therefore, the 
second (integration) test must be slow to be valuable.</p>

<p>Classifying tests into <em>fast</em> and <em>deep</em> may be a solution. The first category comprises 
tests that mock as much as possible and take no more than 20ms to run. 
The second category consists of tests that probe deeper to uncover elusive bugs, 
which might be overlooked by faster tests. More often than not, unit tests 
fall into the first category, while integration tests fit into the second. 
The distinction of “unit-vs-integration” is, in my view, misleading. “Fast-vs-deep” 
is much clearer since it’s evident to which category a test belongs. 
If a test takes under 20ms, it’s fast; if not, it’s deep.</p>

<p>Once tests are designated as either fast or deep, they should be run in two 
distinct scenarios: programmers run the fast tests during coding, 
while servers execute the deep tests during software build and/or release phases. 
In JUnit5, this categorization can be achieved using the @Tag annotation:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="nd">@Tag</span><span class="o">(</span><span class="s">"fast"</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">readsSomeData</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
<span class="nd">@Test</span>
<span class="nd">@Tag</span><span class="o">(</span><span class="s">"deep"</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">readsFromManyFiles</span><span class="o">(</span><span class="nd">@TempDir</span> <span class="nc">Path</span> <span class="n">tmp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>In most cases, obvious bugs will be detected by fast tests, giving programmers 
confidence when editing the code. On the rare occasions when fast tests 
fail to identify certain bugs, the deep tests will catch them. Only then 
will programmers run the slow tests on their laptops.</p>

<p>This is how <code class="language-plaintext highlighter-rouge">pom.xml</code> may be configured to turn “fast” tests ON, by default:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;configuration&gt;</span>
    <span class="nt">&lt;groups&gt;</span>fast<span class="nt">&lt;/groups&gt;</span>
  <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>In the CI environment, Maven must be started with the following flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mvn test -Dgroups=slow
</code></pre></div></div>

<p>A programmer can also run the “slow” tests on their own laptop using 
the same command line flag. However, this will typically only be done 
when the server issues a red signal.</p>

<p>P.S. By the way, the <code class="language-plaintext highlighter-rouge">toString()</code> method has another bug that 
isn’t detected by either the first or second test. Can you identify it? 
Could you devise a test that would expose this bug? 
Would you categorize this test as “fast” or “deep”?</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><category term="java" /><summary type="html"><![CDATA[Humans should run "fast" tests to catch obvious mistakes, while servers should execute "deep" tests to ensure the highest quality.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/inglourious-basterds.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/inglourious-basterds.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Double-Blind Review Is What Makes Decisions Fair</title><link href="https://www.yegor256.com/2023/08/15/decision-making-process.html" rel="alternate" type="text/html" title="The Double-Blind Review Is What Makes Decisions Fair" /><published>2023-08-15T00:00:00+00:00</published><updated>2023-08-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/15/decision-making-process</id><content type="html" xml:base="https://www.yegor256.com/2023/08/15/decision-making-process.html"><![CDATA[<p>How does your team review ideas, project proposals, or paper drafts?
Imagine I’m on your team and I need a budget allocated to a new project. 
I craft a proposal, elucidate the motivation, assess the risks, develop a plan, 
and then what? Do I create a PowerPoint presentation, present to my teammates 
for half an hour, answer their questions for another half hour, hear their honest 
feedback, after which they vote and a decision is made? If this is how 
things are organized within your team, you risk stifling creativity and motivation.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Возвращение (2003) by Andrey Zvyagintsev" src="/images/2023/08/the-return.jpg" longdesc="#b5305e77" /><figcaption id="b5305e77">Возвращение (2003) by Andrey Zvyagintsev</figcaption></figure>

<p>There are several problems with this fairly typical decision-making process 
in software teams or companies (with the most critical ones listed last):</p>

<ul>
  <li>
    <p><strong>Overload</strong>.
  Regardless of how crucial your proposal is, many meeting attendees have their own priorities. 
  You cannot expect them to concentrate fully on your idea or actively engage 
  in the discussion. Furthermore, some might just be lazy by nature.</p>
  </li>
  <li>
    <p><strong>Incompetence</strong>.
  No matter how talented your teammates are, expecting them to grasp 
  every detail of your proposal in just thirty minutes and then evaluate 
  it both objectively and professionally is unrealistic. It’s more likely 
  they’ll base their judgments on personal feelings towards you.</p>
  </li>
  <li>
    <p><strong>Friendship</strong>.
  The decision-makers at the meeting are your colleagues. It’s challenging 
  for them to provide unbiased and candid feedback since they don’t want 
  to risk upsetting a friend. Very few can maintain both 
  honesty and friendship—it’s a rare quality.</p>
  </li>
  <li>
    <p><strong>Jealousy</strong>.
  Since you’re presenting a proposal, it inherently becomes a contest for resources. 
  You’re seeking either a project budget or a reallocation of team efforts. 
  This puts you in opposition to others at the meeting. Many attendees might 
  resent your initiative, even subconsciously attempting to thwart you.</p>
  </li>
  <li>
    <p><strong>Fear</strong>.
  If you’re the one presenting today, someone else might be in your 
  shoes tomorrow. The same individuals critiquing your idea today 
  might face similar scrutiny tomorrow. As much as we aim for professionalism, 
  the urge for revenge can be strong, making candid feedback risky.</p>
  </li>
</ul>

<p>Considering these factors, it’s logical to presume that at the end of such 
meetings—especially if the decision goes against you—you might feel frustrated. 
You might view your team as lacking competence and feel that your talents 
go unrecognized. Best-case scenario: you decide not to present any new proposals. 
Worst-case: you begin seeking out a new team.</p>

<p>The issue isn’t necessarily with the team (they all are more or less the same) 
or your proposal (we all make mistakes). The crux of the problem lies in the 
decision-making process itself. Traditional meetings might not be the best avenue. 
Instead, I propose the following approach:</p>

<ul>
  <li>There is a review board of 10+ members and a secretary;</li>
  <li>Proposals are submitted directly to the secretary;</li>
  <li>The secretary randomly selects three board reviewers;</li>
  <li>Each reviewer evaluates the proposal in writing;</li>
  <li>Reviewers aren’t aware of the author’s identity;</li>
  <li>They then submit their written feedback to the secretary;</li>
  <li>A decision is made if 2+ reviewers endorse the proposal;</li>
  <li>The secretary informs you of the verdict;</li>
  <li>You don’t know the names of reviewers.</li>
</ul>

<p>This method introduces two vital elements that can enhance the objectivity 
of decisions and increase proposal authors’ satisfaction: <em>anonymity</em> and <em>authorship</em>. 
On one hand, reviewers can offer genuine feedback without fear of backlash, 
knowing their identity remains confidential. Conversely, since their feedback 
is documented, they’re incentivized to remain professional and objective. 
Not knowing the author ensures decisions aren’t influenced by personal relationships.</p>

<p>Moreover, this system can elevate the <em>quality of proposals</em>. As authors 
can’t verbally elaborate during meetings, they’re compelled to articulate 
their ideas comprehensively in writing. The standard of feedback might 
also improve, particularly if the secretary mandates specific criteria 
for review summaries, as opposed to vague remarks.</p>

<p>A very similar review mechanism is practiced by <a href="/2021/04/14/how-we-organized-iccq.html">scientific conferences</a>. 
When you submit a paper to one, they don’t organize a meeting where you present it in an attempt 
to persuade them to accept your work. Instead, they ask you to 
<a href="https://www.journals.elsevier.com/social-science-and-medicine/policies/double-blind-peer-review-guidelines">double-blind</a> 
your paper and then they send it to a few, more or less, randomly selected reviewers. 
When your paper is rejected (or accepted), you receive a detailed summary of the reasons, 
along with suggestions on how to improve it. If the conference is of a high level 
and its reviewers are doing their job correctly, you will be 
satisfied even in the case of rejection.</p>

<p>In conclusion, the suggested process can lead to superior decision 
quality and boost the motivation of those proposing ideas. Even if some suggestions 
are declined, they’re more likely to return to the review board with renewed proposals.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html"><![CDATA[If your team practices decision making meetings I have a better idea for you: establish a review board with the principles of anonymity and authorship.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/the-return.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/the-return.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Is Two-Step Initialization a Solution or a Symptom?</title><link href="https://www.yegor256.com/2023/08/08/two-step-initialization.html" rel="alternate" type="text/html" title="Is Two-Step Initialization a Solution or a Symptom?" /><published>2023-08-08T00:00:00+00:00</published><updated>2023-08-08T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/08/two-step-initialization</id><content type="html" xml:base="https://www.yegor256.com/2023/08/08/two-step-initialization.html"><![CDATA[<p>At times, it might appear practical to execute additional initialization steps 
for an object after its constructor has completed. However, I’m of the belief that 
such requirements signal underlying design flaws, such as object mutability,
base class fragility, violation of layering, and unfocused abstraction. 
A constructor should be good enough for all scenarios. If it’s not, refactor the object.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Нирвана (2008) by Igor Voloshin" src="/images/2023/08/nirvana.jpg" longdesc="#879ce886" /><figcaption id="879ce886">Нирвана (2008) by Igor Voloshin</figcaption></figure>

<p>This is how it usually happens (I found it in <a href="https://github.com/apache/kafka/blob/e0b7499103df9222140cdbf7047494d92913987e/clients/src/main/java/org/apache/kafka/common/security/oauthbearer/internals/secured/RefreshingHttpsJwks.java">Apache Kafka</a>):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">X</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isInitialized</span><span class="o">;</span>
  <span class="nc">Foo</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">items</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="c1">// initialize other fields</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="c1">// fill up "items" with data</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
      <span class="n">isInitialized</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It is expected that the object is used this way:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Foo</span><span class="o">();</span>
<span class="n">x</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</code></pre></div></div>

<p>There might be practical justifications for this <em>two-stage construction</em>, 
which, <a href="https://learn.microsoft.com/en-us/cpp/mfc/one-stage-and-two-stage-construction-of-objects?view=msvc-170">as per Microsoft</a>, 
is touted as an “always safer” approach to object creation. Yet, I’m convinced 
that each of these reasons signifies a flawed design and should 
serve as a catalyst for refactoring.</p>

<h2 id="resource-leakage">Resource Leakage</h2>

<p>Consider an <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html">auto-closeable</a> Java class
that opens a stream in its constructor and then 
reasonably expects it to be closed in the <code class="language-plaintext highlighter-rouge">close()</code> method:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="nc">Closeable</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">InputStream</span> <span class="n">in</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">Book</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"a.tex"</span><span class="o">));</span>
    <span class="c1">// a bit later:</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"oops!"</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>However, if the runtime exception is raised in the constructor, the stream will not be
closed and the resource <a href="https://stackoverflow.com/a/29243066/187141">will be leaked</a>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">Book</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">())</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">close()</code> will not be called by the 
<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">try-with-resources</a> statement, 
as the object will not be fully constructed and its initialization won’t be completed.
However, even if the initialization isn’t finalized, the instance
of <code class="language-plaintext highlighter-rouge">FileInputStream</code> will do part of its work: it will open the file. 
It will never close it though.</p>

<p>Two-steps initialization might be a solution:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="nc">Closeable</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">InputStream</span> <span class="n">in</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">Book</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// nothing</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"a.tex"</span><span class="o">));</span>
    <span class="c1">// a bit later:</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"oops!"</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, the code can be used in the following manner, which is indeed safer 
because the stream will always be closed:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">Book</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">())</span> <span class="o">{</span>
  <span class="n">b</span><span class="o">.</span><span class="na">init</span><span class="o">();</span> <span class="c1">// IOException raised here</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Even though this may be a good workaround, it is only a cover for
the design flaw: mutability of the attribute. A better solution would
be to get rid of <a href="/2014/06/09/objects-should-be-immutable.html">mutability</a> 
of the <code class="language-plaintext highlighter-rouge">Book</code> and remove the <code class="language-plaintext highlighter-rouge">init()</code> method.</p>

<p>Thus, the <a href="https://en.wikipedia.org/wiki/Initialization_%28programming%29">initialization</a> of the stream should be done
outside of the <code class="language-plaintext highlighter-rouge">Book</code> object and then provided to it as an argument
of the constructor (pay attention to the <code class="language-plaintext highlighter-rouge">final</code> modifier of the <code class="language-plaintext highlighter-rouge">in</code> field):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="nc">Closeable</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">InputStream</span> <span class="n">in</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span> <span class="o">=</span> <span class="n">in</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then, this is how we can use it:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"a.tex"</span><span class="o">)))</span> <span class="o">{</span>
  <span class="nc">Book</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, both the stream and the book will definitely be closed.</p>

<p>The root cause of the issue here stems from the <a href="/2014/06/09/objects-should-be-immutable.html">mutability</a> 
of the <code class="language-plaintext highlighter-rouge">in</code> attribute, 
which creates potential for resource leakage. If we were to agree upfront that 
every object must be immutable, this problem wouldn’t arise in the first place. 
We wouldn’t need a workaround like two-step initialization, because we wouldn’t 
encounter a class where an attribute might remain 
<a href="/2014/05/13/why-null-is-bad.html">uninitialized</a>. It seems that 
this example serves as <a href="/2014/11/07/how-immutability-helps.html">yet another</a> 
testament to the benefits of object immutability.</p>

<h2 id="fragile-base-class">Fragile Base Class</h2>

<p>Consider this parent class, with an immutable attribute <code class="language-plaintext highlighter-rouge">title</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="nc">Product</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Title: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, let’s extend it (again, the <code class="language-plaintext highlighter-rouge">author</code> attribute is immutable):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="kd">extends</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">author</span><span class="o">;</span>
  <span class="nc">Book</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">,</span> <span class="nc">String</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="nd">@Override</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Author: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">author</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>What do you think will be printed after we do the following?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">Book</span><span class="o">(</span><span class="s">"Object Thinking"</span><span class="o">,</span> <span class="s">"David West"</span><span class="o">);</span>
</code></pre></div></div>

<p>This is what:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">Title:</span> <span class="nc">Object</span> <span class="nc">Thinking</span>
<span class="nl">Author:</span> <span class="kc">null</span>
</code></pre></div></div>

<p>Why does the <code class="language-plaintext highlighter-rouge">author</code> print as <code class="language-plaintext highlighter-rouge">null</code> when we provided the <code class="language-plaintext highlighter-rouge">"David West"</code> 
string in the constructor? The reason is that <code class="language-plaintext highlighter-rouge">super()</code>, the constructor 
of the parent class, was invoked before <code class="language-plaintext highlighter-rouge">this.author</code> was initialized. 
The constructor of the <code class="language-plaintext highlighter-rouge">Product</code> class called its own 
<a href="https://en.wikipedia.org/wiki/Virtual_function">virtual</a> method <code class="language-plaintext highlighter-rouge">print()</code>, 
which the derived class <code class="language-plaintext highlighter-rouge">Book</code> had overridden. This issue can be more 
generically referred to as the “<a href="https://en.wikipedia.org/wiki/Fragile_base_class">fragile base class</a>” 
problem: the base class calls its own method, expecting it to operate as defined, 
but this method is unexpectedly replaced by a different implementation in the derived class, 
leading to unintended and incorrect behavior. Such potential for method 
replacement is what renders the base class fragile.</p>

<p>Using two-phase construction could address this issue by keeping 
attribute initialization in the constructor while relocating the 
“printing” functionality to a new <code class="language-plaintext highlighter-rouge">init()</code> method. 
However, this approach merely masks the underlying design flaw: 
the class’s inherent fragility.</p>

<p>A more comprehensive solution is twofold. Firstly, maintain constructors code-free, as 
<a href="/2015/05/07/ctors-must-be-code-free.html">suggested earlier</a>. 
Secondly, opt for <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">composition over inheritance</a>, 
as has also been <a href="/2016/09/13/inheritance-is-procedural.html">previously recommended</a>.”
This is how:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="nc">Product</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Title: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Product</span> <span class="n">product</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">author</span><span class="o">;</span>
  <span class="nc">Book</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">,</span> <span class="nc">String</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">product</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Author: %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">author</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, both classes are marked as <code class="language-plaintext highlighter-rouge">final</code>, making it technically impossible 
to override any of their methods. Instead of extending <code class="language-plaintext highlighter-rouge">Product</code>, the <code class="language-plaintext highlighter-rouge">Book</code> 
class encapsulates an instance of it. The <code class="language-plaintext highlighter-rouge">print()</code> method in the <code class="language-plaintext highlighter-rouge">Book</code> 
class oversees the printing functionality, delegating part of this responsibility to 
<code class="language-plaintext highlighter-rouge">product.print()</code>. Such a design becomes the only viable option if we mutually 
agree from the outset that all constructors should remain 
<a href="/2015/05/07/ctors-must-be-code-free.html">code-free</a> and that 
implementation inheritance is <a href="/2016/09/13/inheritance-is-procedural.html">off-limits</a>.</p>

<h2 id="defaults-and-configs">Defaults and Configs</h2>

<p>If you’ve coded in Java for a sufficient amount of time, 
you’ll undoubtedly find this design approach quite familiar:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Database</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">login</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
  <span class="nc">Database</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="s">"localhost"</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="mi">5432</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="s">"pgsql"</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">Config</span> <span class="n">cfg</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getHost</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getPort</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getLogin</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">cfg</span><span class="o">.</span><span class="na">getPassword</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Here, the constructor assigns default values to four object attributes, while the 
<code class="language-plaintext highlighter-rouge">init()</code> method subsequently updates them based on the values from the “configuration” 
<a href="/2016/07/06/data-transfer-object.html">DTO</a>. 
This method of object initialization may seem more appealing than a series of 
<a href="/2014/09/16/getters-and-setters-are-evil.html">setter</a> 
calls, as it ensures all necessary attributes are assigned simultaneously, 
with none overlooked. Such assurance isn’t guaranteed with isolated 
<a href="/2014/09/16/getters-and-setters-are-evil.html">setters</a>. 
Furthermore, the DTO can be auto-populated from an XML or JSON file, which, when
passed to the <code class="language-plaintext highlighter-rouge">init()</code> method, further streamlines the code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Database</span><span class="o">();</span> <span class="c1">// first initialization step</span>
<span class="kt">var</span> <span class="n">cfg</span> <span class="o">=</span> <span class="n">loadFromXML</span><span class="o">(</span><span class="s">"db-config.xml"</span><span class="o">);</span>
<span class="n">db</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">cfg</span><span class="o">);</span> <span class="c1">// second initialization step</span>
</code></pre></div></div>

<p>However, this merely masks the underlying design flaw: the class is too expansive. 
It’s not about the lines of code, but rather the multitude of external elements 
it tries to abstract: the Internet address, the TCP port, the login string, the password, 
and likely more in the future. While the <code class="language-plaintext highlighter-rouge">Config</code> DTO currently suffices 
due to its modest size, it seems to pave the way for future expansion, 
tempting programmers to augment it as they see fit. As the size of <code class="language-plaintext highlighter-rouge">Config</code> increases, 
so will the number of attributes in <code class="language-plaintext highlighter-rouge">Database</code>. It’s probable that they will 
soon fall out of sync. Over time, it may become challenging to discern 
if constructing the <code class="language-plaintext highlighter-rouge">Database</code> object readies it for operation, or if a preliminary 
<code class="language-plaintext highlighter-rouge">init()</code> call is required. Further, will just invoking <code class="language-plaintext highlighter-rouge">init()</code> be sufficient to utilize the object fully?</p>

<p>If we had initially agreed that our objects should not encapsulate more than 
three attributes, as <a href="/2014/12/15/how-much-your-objects-encapsulate.html">suggested earlier</a>, 
we would have refactored this class. The <code class="language-plaintext highlighter-rouge">init()</code> method would be removed, and all 
necessary parameters would be passed through its 
<a href="/2015/05/28/one-primary-constructor.html">primary or secondary</a> constructors.
Keeping all attributes immutable would be helpful too.</p>

<p>It seems that even the <a href="https://en.wikipedia.org/wiki/Builder_pattern">Builder design pattern</a> 
would be a better solution than the <code class="language-plaintext highlighter-rouge">init()</code> method in this particular case.</p>

<h2 id="violation-of-layering">Violation of Layering</h2>

<p>Consider the following two Java classes, which depend on each other:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Order</span> <span class="n">order</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">language</span><span class="o">;</span>
  <span class="nc">Book</span><span class="o">(</span><span class="nc">Order</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">order</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">language</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="na">language</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">total</span><span class="o">;</span>
  <span class="nc">Order</span><span class="o">(</span><span class="nc">Book</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">book</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">total</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">price</span><span class="o">()</span> <span class="o">+</span> <span class="mi">10</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Clearly, instantiating either the <code class="language-plaintext highlighter-rouge">Book</code> or the <code class="language-plaintext highlighter-rouge">Order</code> is impossible, 
as each requires the other to be instantiated first.
Two-phase construction accompanied by 
<a href="/2014/06/09/objects-should-be-immutable.html">attributes mutability</a>
and 
<a href="/2014/09/16/getters-and-setters-are-evil.html">setters</a> 
may look like a solution:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Order</span> <span class="n">order</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">language</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">setOrder</span><span class="o">(</span><span class="nc">Order</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">order</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span> <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">language</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">order</span><span class="o">.</span><span class="na">language</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">total</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">setBook</span><span class="o">(</span><span class="nc">Book</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">book</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span> <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">total</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">price</span><span class="o">()</span> <span class="o">+</span> <span class="mi">10</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, it’s possible to instantiate them:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
<span class="n">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">();</span>
<span class="n">order</span><span class="o">.</span><span class="na">setBook</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
<span class="n">book</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
<span class="n">order</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
<span class="n">book</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</code></pre></div></div>

<p>However, this design exhibits a significant flaw: both the <code class="language-plaintext highlighter-rouge">order</code> and <code class="language-plaintext highlighter-rouge">book</code> objects 
remain in an incomplete state until their respective <code class="language-plaintext highlighter-rouge">init()</code> methods are invoked. 
As the code takes shape, its original author understands the correct sequence of 
method calls: the constructor first, followed by the setter, and only then 
the <code class="language-plaintext highlighter-rouge">init()</code> method. However, in the future, as others modify the code, this 
<a href="/2015/12/08/temporal-coupling-between-method-calls.html">temporal coupling</a> 
between method calls could be easily missed. An inadvertent call to 
<code class="language-plaintext highlighter-rouge">init()</code> prior to the setter could result in runtime errors that are difficult to diagnose.</p>

<p>The underlying issue here stems from a violation of the layering principle present 
in the design of both <code class="language-plaintext highlighter-rouge">Book</code> and <code class="language-plaintext highlighter-rouge">Order</code>: they are mutually dependent. 
If I recall correctly, Martin Fowler postulated that “a layer can only access layers beneath it.” 
In the context of our book-and-order design, there’s no clear distinction of 
these layers: it’s indeterminable which is foundational to the other. 
The difficulties in instantiation are just manifestations of this issue, 
and two-step initialization serves more as a band-aid rather than an actual solution.</p>

<p>I’m at a loss for how to enhance this code directly. It’s likely that the entire architecture 
needs a thorough reassessment, with the introduction of more adequate abstractions 
in place of <code class="language-plaintext highlighter-rouge">Book</code> and <code class="language-plaintext highlighter-rouge">Order</code>.</p>

<hr />

<p>It appears that two-step initialization doesn’t truly solve problems; 
rather, it merely masks them for a time. While you can have <code class="language-plaintext highlighter-rouge">init()</code> methods in your objects, 
they look like flags with “I failed to design this class properly!” written on them.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[Sometimes you might be tempted to use a two-stage construction for your object. However, I suggest reevaluating your design principles if you feel such an inclination.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/nirvana.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/nirvana.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Hidden Dangers of Method Overloading</title><link href="https://www.yegor256.com/2023/08/01/method-overloading.html" rel="alternate" type="text/html" title="The Hidden Dangers of Method Overloading" /><published>2023-08-01T00:00:00+00:00</published><updated>2023-08-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/08/01/method-overloading</id><content type="html" xml:base="https://www.yegor256.com/2023/08/01/method-overloading.html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Function_overloading">Method overloading</a> 
is a common feature in many programming languages that allows 
a class to have two or more methods with the same name but different parameters.
<a href="https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading">According</a> 
to Microsoft, method overloading is “one of the most important techniques 
for <em>improving</em> usability, productivity, and readability of reusable libraries.”
I disagree. In my opinion, method overloading may lead to less readable code and more bugs,
because maintaining two or more implementations under the same name gives rise to 
concealed semantics, which inevitably result in misunderstandings and functional defects.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Youth (2015) by Paolo Sorrentino" src="/images/2023/08/youth.jpg" longdesc="#62f78b0f" /><figcaption id="62f78b0f">Youth (2015) by Paolo Sorrentino</figcaption></figure>

<p>Let’s start with a Java example.
Suppose you wish to enable the addition of a product to the shopping cart, 
having either the product ID or the <code class="language-plaintext highlighter-rouge">Product</code> object at your disposal. 
If only the ID is provided, you’d want the shopping cart to access 
the product catalog, locate the corresponding <code class="language-plaintext highlighter-rouge">Product</code> object, and add it. 
This is where method overloading can prove beneficial (the <code class="language-plaintext highlighter-rouge">add()</code> method is
defined twice with two different <a href="https://stackoverflow.com/questions/8516498">signatures</a> 
and implementations):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cart</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Catalog</span><span class="o">().</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kt">var</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cart</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"book"</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>
</code></pre></div></div>

<p>This approach is indeed convenient for at least two reasons. First, the 
<code class="language-plaintext highlighter-rouge">add(int)</code> method handles the conversion from <code class="language-plaintext highlighter-rouge">int</code> to <code class="language-plaintext highlighter-rouge">Product</code>, 
which need not be repeated elsewhere—they can simply pass the product’s ID 
to this method and let it do the work—thereby eliminating code duplication. 
Second, because the functionality of “searching the catalog” is not exposed 
beyond the <code class="language-plaintext highlighter-rouge">Cart</code> class, it simplifies the surrounding code. It appears that, 
indeed, the usability and readability of the code are enhanced.</p>

<p>However, the issues addressed (code duplication and complexity) are lesser 
than the problems introduced. While the semantics of the <code class="language-plaintext highlighter-rouge">add(Product)</code> method are 
obvious, the workings of the <code class="language-plaintext highlighter-rouge">add(int)</code> method are not clear to its users. 
Perhaps it searches the catalog? Maybe it selects the n-th product from 
the existing cart and re-adds it to the end of the cart? Or perhaps it searches 
the orders previously placed by the user and extracts the n-th product from there? 
We simply don’t know when we examine the method’s signature.</p>

<aside class="quote">When something is obscured, it prompts assumptions, which in turn lead to misunderstandings, and eventually to bugs.
</aside>

<p>In order to comprehend what the <code class="language-plaintext highlighter-rouge">add(int)</code> method does, we must refer to 
its Javadoc block, which may not be sufficiently accurate. Furthermore, 
<a href="https://stackoverflow.com/a/913342/187141">as is often the case</a>, 
the documentation in the Javadoc block might not be 
in sync with the code inside the method. To put it plainly, the client 
using the <code class="language-plaintext highlighter-rouge">add(int)</code> method invariably makes an assumption about its inner workings. 
If the client is fortunate, 
1) the assumption will be accurate, and 
2) any changes subsequently made to the method won’t invalidate that assumption.</p>

<p>It appears that method overloading is the root of the issue: maintaining 
multiple implementations under a single name inevitably introduces some 
concealed semantics in most of them. Then, when something is obscured, it prompts 
assumptions, which in turn lead to misunderstandings, and eventually to bugs.</p>

<p>I believe, a better alternative looks like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ProductInCatalog</span> <span class="kd">implements</span> <span class="nc">Product</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Product</span> <span class="n">p</span><span class="o">;</span>
  <span class="nc">ProductInCatalog</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Catalog</span><span class="o">().</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="c1">// all "Product" interface's methods</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Cart</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kt">var</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cart</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"book"</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProductInCatalog</span><span class="o">(</span><span class="mi">42</span><span class="o">));</span>
</code></pre></div></div>

<p>The constructor of <code class="language-plaintext highlighter-rouge">ProductInCatalog</code> is not code-free,
as <a href="/2015/05/07/ctors-must-be-code-free.html">it ideally should be</a>,
however, this point is not so significant for our current discussion. The <code class="language-plaintext highlighter-rouge">ProductInCatalog</code>
class serves as an abstraction of a <code class="language-plaintext highlighter-rouge">Product</code> found in the catalog. This class
is used by the client of the <code class="language-plaintext highlighter-rouge">Cart</code> class. The client, in full 
awareness and with explicit intent, converts 42 (the product’s ID) into an instance 
of <code class="language-plaintext highlighter-rouge">ProductInCatalog</code>. This design no longer conceals any elements. There are 
no assumptions to be made and no conditions that the code must fulfill.</p>

<p>Do we still preserve the advantages provided by method overloading? Indeed, we do. 
There is no code duplication, and the complexity of the code is reduced. 
Furthermore, the readability of the code using the <code class="language-plaintext highlighter-rouge">Cart</code> is significantly improved. 
To summarize, I recommend avoiding method overloading, even though it will undoubtedly 
result in a larger number of classes in the codebase. However, that is 
<a href="/2017/02/28/too-many-classes.html">a different discussion altogether</a>.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[While method overloading is purported to enhance readability, it actually tends to diminish it and introduce bugs.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/08/youth.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/08/youth.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Disabled Test In Lieu of a Bug Report</title><link href="https://www.yegor256.com/2023/07/25/contribute-disabled-tests.html" rel="alternate" type="text/html" title="A Disabled Test In Lieu of a Bug Report" /><published>2023-07-25T00:00:00+00:00</published><updated>2023-07-25T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/07/25/contribute-disabled-tests</id><content type="html" xml:base="https://www.yegor256.com/2023/07/25/contribute-disabled-tests.html"><![CDATA[<p>When you find a bug in an open-source library that you use, 
<a href="/2018/07/24/bugs-or-pull-requests.html">what do you do</a>?
You submit a GitHub issue (or whatever ticket tracking system they use).
In the issue, you describe the problem in the best possible way, preferably
providing a working code example that the author of the library can run locally
to reproduce the bug. If you don’t provide them with an executable snippet of code,
they will most likely ask you to do so, unless the bug is trivial.
I suggest simplifying the workflow and giving them what they want right
in a pull request: send them the bug in the form of a disabled unit test.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Dead or Alive (1999) by Takashi Miike" src="/images/2023/07/dead-or-alive.jpg" longdesc="#25bc3165" /><figcaption id="25bc3165">Dead or Alive (1999) by Takashi Miike</figcaption></figure>

<p>Say, there is a Rust library that provides a <code class="language-plaintext highlighter-rouge">fibo()</code> function that 
calculates a <a href="https://en.wikipedia.org/wiki/Fibonacci_sequence">Fibonacci number</a>, 
which you can use this way:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
<span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">fibo</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
<span class="nd">println!</span><span class="p">(</span><span class="s">"The {n}th Fibonacci is {x}"</span><span class="p">);</span>
</code></pre></div></div>

<p>You run it and it prints <code class="language-plaintext highlighter-rouge">17711</code>, which is mistakenly the 22nd Fibonacci number,
not the 23rd. It is definitely a bug. You submit a ticket, saying something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I'm trying to use your library to calculate 
a Fibonacci  number, but for some reason, I'm 
getting a wrong result:  the 23rd number your 
library returns is 17711, while I'm expecting 
the number 28657. Please check and fix.
</code></pre></div></div>

<p>They will reply “Can you prove it, please? Show us the code!” and
you will probably add this code to the ticket:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">fibo</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">28657</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</code></pre></div></div>

<p>Then, if they are <a href="/2017/03/24/tdd-that-works.html">disciplined</a> 
programmers, a new unit test will be created and the
<code class="language-plaintext highlighter-rouge">fibo()</code> function will be fixed. Moreover, if they are 
<a href="/2022/08/04/code-and-tests-different-pull-requests.html">very disciplined</a> programmers, 
they will submit the test in a separate pull request, disabling it. Then, in
the second pull request, they will make a fix.</p>

<p>Why can’t you help them and skip the issue submission step? Just make the
first pull request yourself, with the disabled test inside and a 
<a href="/2010/03/04/pdd.html">“puzzle”</a> added to it:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @todo #42 This test is disabled because the</span>
<span class="c1">//  fibo() function doesn't work correctly</span>
<span class="c1">//  with this particular number, it returns</span>
<span class="c1">//  17711 instead of 28657. Let's fix it.</span>
<span class="nd">#[test]</span>
<span class="nd">#[ignore]</span>
<span class="k">fn</span> <span class="nf">calculates_23rd_fibonacci_number</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">fibo</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
  <span class="nd">assert_eq!</span><span class="p">(</span><span class="mi">28657</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Such a PR serves as both a bug report
(this is what the text of the puzzle will be turned into, once the PR is merged)
and a test that reproduces the problem. It will be more than welcome
by the repository maintenance team. This kind of PR saves the time
they would spend creating a unit test. Also, it saves your time for
creating a bug report, as it will be created automatically by
<a href="/2014/04/12/puzzle-driven-development-by-roles.html">the puzzles discovery tool</a>.</p>

<figure class="badge"><a href="https://http.jcabi.com"><img src="https://www.jcabi.com/logo-square.svg" style="width:48px;max-width:100%;" alt="badge" /></a></figure>

<p>BTW, this blog post was motivated by <a href="https://github.com/jcabi/jcabi-xml/pull/212">this pull request</a> 
in the <a href="https://github.com/jcabi/jcabi-xml">jcabi/jcabi-xml</a> library, where a disabled
unit test was added to the code base specifically to reproduce the bug. In addition to
the test, a puzzle was added, which led to a <a href="https://github.com/jcabi/jcabi-xml/issues/213">new ticket</a>, 
a <a href="https://github.com/jcabi/jcabi-xml/pull/214">new pull request</a>, 
and finally a <a href="https://github.com/jcabi/jcabi-xml/releases/tag/0.28.0">new release</a> of the library.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="pdd" /><category term="testing" /><summary type="html"><![CDATA[Instead of merely submitting bug reports, it can often be more efficient to contribute a pull request, complete with a disabled unit test and a detailed description of the problem.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/07/dead-or-alive.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/07/dead-or-alive.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Just Show Up</title><link href="https://www.yegor256.com/2023/07/19/just-show-up.html" rel="alternate" type="text/html" title="Just Show Up" /><published>2023-07-19T00:00:00+00:00</published><updated>2023-07-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/07/19/just-show-up</id><content type="html" xml:base="https://www.yegor256.com/2023/07/19/just-show-up.html"><![CDATA[<p>According to a <a href="https://www.emerald.com/insight/content/doi/10.1108/09534810710760045/full/html">study</a> 
conducted by <a href="https://www.jemielniak.org/">Dariusz Jemielniak</a> in 2007, the majority of programmers perceive 
their own managers as highly incompetent. We don’t expect our bosses to be 
coding-savvy—this level of technical competence is <a href="/2016/05/24/who-is-project-manager.html">not a requirement</a>
for an average manager. Additionally, we don’t expect them to excel in 
Gantt Chart wizardry or adhere strictly to 
<a href="/2019/05/14/cause-risk-effect.html">risk management protocols</a>—these 
are management practices that are not commonly observed in software teams today.
Instead, what we do expect from them is the ability to gauge our productivity: 
recognizing and rewarding the best performers while 
<a href="/2015/09/16/how-to-fire-someone-right.html">taking action</a> against those who are less motivated. 
Unfortunately, this is a management competence that they lack… or perhaps, 
<a href="/2021/03/03/imposters-to-win.html">fortunately</a>.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Les côtelettes (2003) by Bertrand Blier" src="/images/2023/07/les-cotelettes.jpg" longdesc="#de422d8c" /><figcaption id="de422d8c">Les côtelettes (2003) by Bertrand Blier</figcaption></figure>

<p>I believe that the ability to measure results objectively is what makes a competent manager. The
recent desire of large tech companies to restrict and/or entirely prohibit remote work has
highlighted the lack of this ability in the industry. Indeed, a manager who knows how to evaluate
the work of the team and its individual members wouldn’t worry about whether they are co-located in
an office or working remotely. It simply <a href="/2017/05/02/remote-slaves.html">wouldn’t matter</a>! 
If programmers know that <a href="/2014/09/24/why-monetary-awards-dont-work.html">rewards</a> will be
given for deliverables and that penalties will occur in their absence, they can find the best place
to create these deliverables, be it at home, in the office, or at a coffee shop (I’m one of them).
However, if programmers don’t have such a straightforward 
“<a href="/2018/10/09/can-you-control-us.html">reward and punishment</a>” system, they can
become lazy and demotivated. To get back on track, they need a manager, an office, and daily
<a href="/2015/07/21/hourly-pay-modern-slavery.html">supervision</a>.</p>

<p>Google recently <a href="https://www.cnbc.com/2023/06/08/google-to-crack-down-on-hybrid-work-asks-remote-workers-to-reconsider.html">said</a>
that “working together in the same room makes a positive difference”…
for Google’s <del>incompetent</del> managers, I guess. 
They may judge productivity by the amount of time their coders spend staring at monitors. 
They don’t need to concern themselves with establishing an objective performance evaluation system. 
They don’t need to count the <a href="/2014/04/11/cost-of-loc.html">lines of code</a> 
(it’s <a href="https://www.youtube.com/watch?v=9Zen0B0SNwI">nonsense</a>, because Bill Gates said so!). 
They don’t need to break down the scope into tasks and then assess their complexity 
(that’s unfeasible, since we programmers are <a href="/2016/09/27/command-control-innovate.html">artists</a>!). 
They don’t need to risk damaging 
<a href="/2015/03/02/team-morale-myths-and-reality.html">morale</a> 
and creativity by introducing the concept of <a href="https://www.youtube.com/watch?v=yZcNHZ_FJco">productivity evaluation</a> 
(that’s unthinkable!). 
They can simply reward the most disciplined clock-watchers and call it a management.</p>

<aside class="quote">Let’s focus on fitting into the group rather than contributing to the codebase.
</aside>

<p>On the other hand, perhaps it’s not entirely detrimental for some of us. If the management 
is <a href="/2017/08/01/how-to-manage-a-manager.html">incompetent</a> 
enough to “make office attendance part of performance reviews” 
(as <a href="https://arstechnica.com/google/2023/06/google-makes-office-attendance-part-of-performance-reviews/">Google just has</a>), 
let’s play along and provide them with what they want: let’s attend! 
Let’s display our <a href="/2015/10/06/how-to-be-good-office-slave.html">loyalty</a>, 
engagement, and <a href="https://www.yegor256.com/pdf/2019/enthusiasm.pdf">enthusiasm</a>, 
rather than our <a href="/2014/11/14/hits-of-code.html">lines of code</a> 
and <a href="/2018/07/24/bugs-or-pull-requests.html">pull requests</a>. 
Let’s focus on fitting into the group rather than contributing to the codebase.</p>

<p>Woody Allen <a href="https://www.creativelive.com/blog/the-importance-of-showing-up/">once remarked</a> that “80 percent of success
is showing up.” I would propose that we repurpose this as career advice for us programmers: Just Show Up. This mantra
applies not only to office attendance, but can also be applied to many other activities throughout your 
<a href="/2017/01/24/career-advice.html">career development</a>. 
You should be where your boss(es) can physically see you. No, not your work—that’s immaterial. They need
to see you in person. Here’s what you can do to truly “Just Show Up”:</p>

<ul>
  <li>Participate in all <a href="/2015/07/13/meetings-are-legalized-robbery.html">meetings</a>;</li>
  <li>Attend all events, workshops, and team-building activities;</li>
  <li>Situate yourself next to the boss;</li>
  <li>Become a member of all committees;</li>
  <li>Seize every opportunity to <a href="/2020/12/29/metric-for-emotions.html">ask questions</a>;</li>
  <li>Be vocal in the office to ensure that your boss hears you;</li>
  <li>Submit proposals whenever they’re requested;</li>
  <li>Respond to all emails;</li>
  <li>Upvote every chat message.</li>
</ul>

<p>This strategy might not necessarily make you a better programmer, 
but it will certainly <a href="/2016/01/05/how-to-punish-employees.html">convince</a> 
your boss that you are one.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="mood" /><category term="career" /><summary type="html"><![CDATA[Since many managers may not have the expertise to assess our technical work, the best strategy for seeming a top performer is to be visible to your manager often.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2023/07/les-cotelettes.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2023/07/les-cotelettes.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">On the Layout of Tests</title><link href="https://www.yegor256.com/2023/01/19/layout-of-tests.html" rel="alternate" type="text/html" title="On the Layout of Tests" /><published>2023-01-19T00:00:00+00:00</published><updated>2023-01-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/01/19/layout-of-tests</id><content type="html" xml:base="https://www.yegor256.com/2023/01/19/layout-of-tests.html"><![CDATA[<p>I don’t know what programming language you use, but my experience 
of recent coding in Java, Ruby, JavaScript, PHP, Python, C++, and Rust tells 
me that the principle, which I will try to convince you to adhere 
to—is universal for all languages. It’s about the naming of test files. 
It may look to you like a question of low importance, but let me try 
to demonstrate that it’s not. How do you name your files with test classes? How many 
of them do you create in the src/test/java directory? Where do you place
a class that is used only in a test but is not a test by itself? To most of these
questions, the answer most of you would give is “Whatever!”
So let’s try to find a better answer.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Мимино (1977) by Георгий Данелия" src="/images/2022/11/mimino.jpg" longdesc="#06bd8b4f" /><figcaption id="06bd8b4f">Мимино (1977) by Георгий Данелия</figcaption></figure>

<p>The primary purpose of my unit tests is to help me code. They are the 
<a href="/2022/07/05/safety-net.html">safety net</a>—they 
catch me when I make a mistake. For example, let’s say I go back and edit a few files that I 
edited a few years ago and, of course, I do it wrong this time. Then, I run all 500 unit tests
in the project, and … ten of them turn red. Pay attention, I don’t say “fail” because, 
just like a safety net around a building, failed tests are the tests 
that didn’t catch a falling hammer and didn’t spot a bug just introduced.
Thus, 490 of them <em>failed</em>, but ten of them <em>succeeded</em>.</p>

<h2 id="assertions">Assertions</h2>

<p>Next, I scratch my head and think—what exactly did I do wrong? Which 
file did I break? I just changed a few dozen code lines. Where exactly was the 
mistake? In order to find out, I read the output of the tests. I expect 
the messages they print to the console to be descriptive enough to 
help me understand the problem. I don’t want to revert all my changes 
and start from scratch, right? I want to quickly jump to the line with 
the bug, fix it, rerun all 500 tests, see all of them green, 
commit my changes and call it a day.</p>

<p>Needless to say, descriptive messages of test assertions 
and proper naming of test methods are the recipe for success.
Let’s consider simple object Phrases, where we add 
a few English phrases, and it magically understands which 
of them are greetings (obviously, using ML).
For such a class, this Java/JUnit5 test would be very bad:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
  <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
  <span class="k">assert</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>While this test is much better, thanks to <a href="https://www.hamcrest.org">Hamcrest</a>
assertions (how to name test methods—is a separate
story explained in detail <a href="https://stackoverflow.com/questions/155436/">here</a>):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">Matchers</span><span class="o">.</span><span class="na">equalTo</span><span class="o">;</span>

<span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">()</span> <span class="o">{</span>
  <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
  <span class="n">assertThat</span><span class="o">(</span>
    <span class="s">"Total count of greetings"</span><span class="o">,</span>
    <span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The first snippet will print a pretty obscure error message, while the
second one will help me a lot in my struggle with the bug I just made:
The message will be self-explanatory. I will quickly understand
what the problem is.</p>

<h2 id="test-classes">Test Classes</h2>

<p>Descriptive messages will help me understand what the problem is.
However, will I know <em>where</em> the problem is? In which Java class? Not really.
Is it in <code class="language-plaintext highlighter-rouge">Phrases.java,</code> or maybe in <code class="language-plaintext highlighter-rouge">Greetings.java,</code> which is returned by <code class="language-plaintext highlighter-rouge">Phrases.greetings()</code>?
I can only get this information from the <em>name</em> of the test class.
If it’s called <code class="language-plaintext highlighter-rouge">PhrasesTest.java</code>—all bugs that it catches <em>are most probably</em>
located in <code class="language-plaintext highlighter-rouge">Phrases.java.</code> If it’s called <code class="language-plaintext highlighter-rouge">GreetingsTest.java</code>—… well, you get the idea.</p>

<p>My point is that the name of a test class is not just a name. It’s an instruction
for a wondering programmer:
“Go look into the source file, the name of which you can derive from my name,
removing the <code class="language-plaintext highlighter-rouge">Test</code> suffix.” If I try to follow this instruction and
it leads me nowhere, I get very frustrated, especially if the project
is not mine. I can’t get the required information from anywhere else.
The name of the test class is my last hope.</p>

<h2 id="very-long-test-classes">Very Long Test Classes</h2>

<p>What if a test class gets too long? It may have a few dozen or more test methods. We don’t
want a class to be too big, right? Wrong! A test class is not a class. It’s not even 
a utility class. It’s a container for test scripts. It’s called a class because
Java (and many other languages) do not have alternative code 
organization instruments. So don’t worry about your test classes getting excessively long. 5000 lines of code 
in a test class is <em>not a problem</em> at all. Again, because it’s not a class, it’s only
a collection of test scripts.</p>

<h2 id="test-prerequisites-wrong-way">Test Prerequisites (Wrong Way)</h2>

<p>Very often some classes or functions  are not tests,
but must be shared among tests. (I’m sure you know that sharing tests is an
<a href="/2018/12/11/unit-testing-anti-patterns.html">anti-pattern</a>. Do you?)
Look at how I refactored the unit test from above (it’s not elegant
at all, but bear with me for a moment!):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PhrasesTest</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
    <span class="n">prepare</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span>
      <span class="s">"Total count of greetings"</span><span class="o">,</span>
      <span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">prepare</span><span class="o">(</span><span class="nc">Phrases</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Here, in private method <code class="language-plaintext highlighter-rouge">prepare(),</code> I have a convenient builder
of the object of class <code class="language-plaintext highlighter-rouge">Phrases.</code> This builder may be beneficial
for other tests, such as <code class="language-plaintext highlighter-rouge">GreetingsTest.</code> I don’t want
to copy it from <code class="language-plaintext highlighter-rouge">PhrasesTest</code> to <code class="language-plaintext highlighter-rouge">GreetingsTest.</code> Instead, I
want to put it somewhere where it can be reused. This would
be the right place for it (<code class="language-plaintext highlighter-rouge">foo</code> is the Java
package that all our classes belong to):</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/
  main/
    java/
      foo/
        Phrases.java
        Greetings.java
  test/
    java/
      foo/
        support/
          FooUtils.java
        PhrasesTest.java
        GreetingsTest.java
</code></pre></div></div>

<p>Static method <code class="language-plaintext highlighter-rouge">FooUtils.prepare()</code> now sits in the <code class="language-plaintext highlighter-rouge">FooUtils</code> utility
class (a terrible <a href="/2014/05/05/oop-alternative-to-utility-classes.html">anti-pattern</a>!),
which is in the package <code class="language-plaintext highlighter-rouge">foo.support</code>. But, pay attention, not in the <code class="language-plaintext highlighter-rouge">foo</code> package, but
in the sub-package that doesn’t have a counterpart in the live code block:
there is no directory <code class="language-plaintext highlighter-rouge">src/main/java/foo/support.</code> This is a clear message
to a programmer who would meet this repository in a few years: all classes
that stay in <code class="language-plaintext highlighter-rouge">foo.support</code> belong to the test pipeline only and are not tests by
themselves.</p>

<h2 id="test-prerequisites-right-way">Test Prerequisites (Right Way)</h2>

<p>As <a href="/2014/05/05/oop-alternative-to-utility-classes.html">you know</a>,
utility classes and <a href="/2017/02/07/private-method-is-new-class.html">private static methods</a>
are the rudiments of imperative programming. The object-oriented world has better alternatives.
JUnit5, in particular, offers pretty elegant mechanisms for
creating test prerequisites: <a href="https://junit.org/junit5/docs/current/user-guide/#extensions-registration">test extensions</a>.
Everything that a test method needs we supply through its parameters,
which are instantiated by extensions, for example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.extension.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">PhrasesExtension</span> <span class="kd">implements</span> <span class="nc">ParameterResolver</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span>
    <span class="nc">ParameterContext</span> <span class="n">pctx</span><span class="o">,</span> <span class="nc">ExtensionContext</span> <span class="n">ectx</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">pctx</span><span class="o">.</span><span class="na">getParameter</span><span class="o">().</span><span class="na">getType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Phrases</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">resolveParameter</span><span class="o">(</span>
    <span class="nc">ParameterContext</span> <span class="n">pctx</span><span class="o">,</span> <span class="nc">ExtensionContext</span> <span class="n">ectx</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then, the test will look like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.extension.ExtendWith</span><span class="o">;</span>

<span class="nd">@ExtendWith</span><span class="o">(</span><span class="nc">PhrasesExtension</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">PhrasesTest</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">(</span><span class="nc">Phrases</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertThat</span><span class="o">(</span>
      <span class="s">"Total count of greetings"</span><span class="o">,</span>
      <span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, the test and its prerequisites stay in two different places and are not
as tightly coupled as they were before. Moreover, the prerequisites may be
easily reused. The magic <code class="language-plaintext highlighter-rouge">@ExtendWith</code> annotation may be attached to other
tests. The implementation of <code class="language-plaintext highlighter-rouge">PhrasesExtension</code> may become smarter: it
may start paying attention not only to the type of argument of a test method
but also to a custom annotation attached to it (this is how
<a href="https://junit.org/junit5/docs/5.4.1/api/org/junit/jupiter/api/io/TempDir.html"><code class="language-plaintext highlighter-rouge">@TempDir</code></a> works).</p>

<h2 id="fake-objects-best-way">Fake Objects (Best Way)</h2>

<p>Despite the beauty of JUnit extensions, I don’t think they are the best way
to decouple prerequisites from test methods. JUnit extensions are still pretty
coupled … not to test methods, but to the entire test suite of a project. If you
decide to use them somewhere else, in another project, you won’t be able to do so.</p>

<p>Also, if you decide to test your prerequisites, you won’t be able to do
it elegantly. Of course, you could write tests for them in the same directory, but in this case,
you will break the principle: one test per one live class.</p>

<p>The solution is: <a href="/2014/09/23/built-in-fake-objects.html">fake objects</a>.
They stay together with other live objects, but have special “fake” behavior,
for example (BTW, I <a href="/2017/11/14/static-factory-methods.html">don’t like factories</a>,
but in this case, it’s OK):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">FactoryOfPhrases</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="nc">Phrases</span> <span class="nf">aboutLondon</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then, the test will look like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PhrasesTest</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">assertThat</span><span class="o">(</span>
      <span class="s">"Total count of greetings"</span><span class="o">,</span>
      <span class="k">new</span> <span class="nf">FactoryOfPhrases</span><span class="o">().</span><span class="na">aboutLondon</span><span class="o">()</span>
        <span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span>
      <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Repository layout would look like this:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/
  main/
    java/
      foo/
        FactoryOfPhrases.java
        Phrases.java
        Greetings.java
  test/
    java/
      foo/
        FactoryOfPhrasesTest.java
        PhrasesTest.java
        GreetingsTest.java
</code></pre></div></div>

<p>Pay attention to the test <code class="language-plaintext highlighter-rouge">FactoryOfPhrasesTest.</code> It tests the “fake” object <code class="language-plaintext highlighter-rouge">FactoryOfPhrases,</code>
which is part of the live classes collection. The factory of phases is shipped together
with all other classes. Therefore, it can be used by other projects and not only for test
purposes.</p>

<p>To summarize, as a rule, I suggest keeping test classes clean: only test methods
belong there. No attributes and, of course, no static private methods. Everything
that is a prerequisite must be a “fake” object.</p>

<h2 id="integration-tests">Integration Tests</h2>

<p>In the Maven world, there are unit test classes (<code class="language-plaintext highlighter-rouge">Test</code> suffix),
and integration test classes (<code class="language-plaintext highlighter-rouge">ITCase</code> suffix).
The difference is huge. While both are compiled at the <code class="language-plaintext highlighter-rouge">test-compile</code> phase
by the same <code class="language-plaintext highlighter-rouge">maven-compiler-plugin,</code> they are not executed together.
Instead, unit tests are executed at the <code class="language-plaintext highlighter-rouge">test</code> phase. The build fails immediately if
any unit test is red. It’s a pretty straightforward approach, which
is similar to other build automation engines.</p>

<p>Integration tests are executed in four steps (these are the names of Maven phases):</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pre-integration-test
integration-test
post-integration-test
verify
</code></pre></div></div>

<p>First, the resources needed for integration testing are acquired
at the <code class="language-plaintext highlighter-rouge">pre-integration-test</code> phase. For example, a test instance of MySQL 
database may be started. Then, the tests with <code class="language-plaintext highlighter-rouge">ITCase</code> are executed at the ‘integration-test’ phase. The 
result of their execution is ignored for now but only recorded in a file. 
Then, the resources are released at the <code class="language-plaintext highlighter-rouge">post-integration-test</code> phase.
For example, the MySQL server is shut down. Finally, at the <code class="language-plaintext highlighter-rouge">verify</code> phase, 
the results of the tests are verified, and the build fails if 
some of them are not green.</p>

<p>I keep <code class="language-plaintext highlighter-rouge">ITCase</code> files together with <code class="language-plaintext highlighter-rouge">Test</code> files only when they are
integration tests for specific live classes. Very often, they are not—that’s why
they are integration tests. They may integrate and test a number of classes together.
In this case, I put them in a separate package and gave them arbitrary names
that don’t match with the names of live classes:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/
  main/
    java/
      foo/
        Phrases.java
        Greetings.java
  test/
    java/
      foo/
        it/
          SimpleGuessingITCase.java
        PhrasesTest.java
        GreetingsTest.java
        GreetingsITCase.java
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">GreetingsITCase.java</code> is an integration test for <code class="language-plaintext highlighter-rouge">Greetings.java,</code>
while <code class="language-plaintext highlighter-rouge">SimpleGuessingITCase.java</code> is an integration test for no particular
class. Obviously, the package <code class="language-plaintext highlighter-rouge">foo.it</code> only exists in tests and is not
present in <code class="language-plaintext highlighter-rouge">src/main/java.</code></p>

<p><br /></p>

<p>Thus, there is the first rule:
a test class may only have methods
annotated with <code class="language-plaintext highlighter-rouge">@Test</code> (in the case of Java).</p>

<p>Then, there is the second rule:
a package with tests may only have classes with <code class="language-plaintext highlighter-rouge">Test</code> or <code class="language-plaintext highlighter-rouge">ITCase</code> suffices
that map one-to-one to live classes and nothing else.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="tests" /><summary type="html"><![CDATA[What is the right way to keep test classes in a repository? There is no single canonical approach, but a few principles may help you keep test files in order.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/11/mimino.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/11/mimino.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Smaller Try-Blocks Are Better</title><link href="https://www.yegor256.com/2022/09/08/smaller-try-blocks.html" rel="alternate" type="text/html" title="Smaller Try-Blocks Are Better" /><published>2022-09-08T00:00:00+00:00</published><updated>2022-09-08T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/09/08/smaller-try-blocks</id><content type="html" xml:base="https://www.yegor256.com/2022/09/08/smaller-try-blocks.html"><![CDATA[<p>It often happens, <a href="/2015/07/28/checked-vs-unchecked-exceptions.html">especially</a>
in Java, that a few places in the method
are potential exception originators. Usually, we make a large method-size
<code class="language-plaintext highlighter-rouge">try</code> block with a single <code class="language-plaintext highlighter-rouge">catch</code> at the bottom. We catch all
the exceptions, usually even using
<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html">grouping</a>.
This helps us minimize the noise, which is the exception catching.
However, such large <code class="language-plaintext highlighter-rouge">try</code> blocks jeopardize maintainability: we are unable
to provide proper <a href="/2015/12/01/rethrow-exceptions.html">error context</a>
inside <code class="language-plaintext highlighter-rouge">catch</code> blocks.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="The Rum Diary (2011) by Bruce Robinson" src="/images/2022/09/the-rum-diary.jpg" longdesc="#3bd6c008" /><figcaption id="3bd6c008">The Rum Diary (2011) by Bruce Robinson</figcaption></figure>

<p>What do you think is wrong with this Java method
(aside from using <code class="language-plaintext highlighter-rouge">System.out</code> instead of an injected dependency)?:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>

<span class="kt">void</span> <span class="nf">grep</span><span class="o">(</span><span class="nc">Path</span> <span class="n">file</span><span class="o">,</span> <span class="nc">Pattern</span> <span class="n">regex</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">line</span> <span class="o">:</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">))</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">regex</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>I believe that its try/catch block is too big. The <code class="language-plaintext highlighter-rouge">IOException</code> may only be
thrown by the <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#readAllLines-java.nio.file.Path-"><code class="language-plaintext highlighter-rouge">readAllLines</code></a>
static method, but the block covers a few other method calls
and statements. This code would be better:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">grep</span><span class="o">(</span><span class="nc">Path</span> <span class="n">file</span><span class="o">,</span> <span class="nc">Pattern</span> <span class="n">regex</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">String</span><span class="o">[]</span> <span class="n">lines</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">regex</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now the try/catch block covers exactly the place where the exception
may originate. Nothing else!</p>

<p>Why are smaller try-blocks better? Because they allow more
focused error reporting with more detailed context. For example, the
second snippet can be re-written as follows:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">grep</span><span class="o">(</span><span class="nc">Path</span> <span class="n">file</span><span class="o">,</span> <span class="nc">Pattern</span> <span class="n">regex</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">String</span><span class="o">[]</span> <span class="n">lines</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to read all lines from %s"</span><span class="o">,</span>
        <span class="n">file</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">regex</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Can we do the same with the first snippet? We could, but the
error message would be inaccurate, because the block covers too much.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[Large try-blocks in try/catch statements are a common practice, because we try to avoid polluting the code with catch blocks; it's a bad tendency.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/09/the-rum-diary.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/09/the-rum-diary.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Don’t Group Exception Catchers</title><link href="https://www.yegor256.com/2022/08/30/dont-group-exception-catchers.html" rel="alternate" type="text/html" title="Don’t Group Exception Catchers" /><published>2022-08-30T00:00:00+00:00</published><updated>2022-08-30T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/30/dont-group-exception-catchers</id><content type="html" xml:base="https://www.yegor256.com/2022/08/30/dont-group-exception-catchers.html"><![CDATA[<p>Sometimes we <a href="/2015/12/01/rethrow-exceptions.html">rethrow</a> exceptions.
In Java we do this more often than in other languages, because it has
<a href="/2015/07/28/checked-vs-unchecked-exceptions.html">checked</a> exceptions.
Sometimes we must catch and rethrow a few exceptions that originated
from different places in a method.
Java 7 introduced <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html">grouping</a>
of different types of exceptions in a single <code class="language-plaintext highlighter-rouge">catch</code> block.
But even without the grouping, it is possible to just catch <code class="language-plaintext highlighter-rouge">IOException</code> or
even <code class="language-plaintext highlighter-rouge">Exception</code> and provide a single <code class="language-plaintext highlighter-rouge">catch</code> block for all types and all
originators (methods that throw).
Recently I realized that this is a bad practice. Here is why.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Elephant (2003) by Gus Van Sant" src="/images/2022/08/elephant.jpg" longdesc="#97a81977" /><figcaption id="97a81977">Elephant (2003) by Gus Van Sant</figcaption></figure>

<p>Consider this Java method (I’m using <a href="https://commons.apache.org/proper/commons-io/">Apache Commons IO</a>):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="nf">read</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span>
      <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">openStream</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It’s not perfect. Let’s rewrite it to provide more error context,
as <a href="/2015/12/01/rethrow-exceptions.html">was suggested</a> earlier:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="nf">read</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span>
      <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">openStream</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to read from '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Here, the exception may be thrown in three places:</p>

<ul>
  <li>By the <a href="/2015/05/07/ctors-must-be-code-free.html">constructor</a>
of <a href="https://docs.oracle.com/javase/7/docs/api/java/net/URL.html"><code class="language-plaintext highlighter-rouge">java.net.URL</code></a></li>
  <li>By the method <a href="https://docs.oracle.com/javase/7/docs/api/java/net/URL.html#openStream%28%29"><code class="language-plaintext highlighter-rouge">openStream()</code></a></li>
  <li>By the method <a href="https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html#toByteArray-java.io.InputStream-"><code class="language-plaintext highlighter-rouge">toByteArray</code></a></li>
</ul>

<p>No matter who throws, we catch it in the same <code class="language-plaintext highlighter-rouge">catch</code> block and rethrow
with the same message. I believe that this is bad because the <a href="/2015/12/01/rethrow-exceptions.html">context</a>
of the error provided by rethrowing is less focused on the issue that occurred.</p>

<p>I would suggest this refactoring
(I don’t close the input stream, which is wrong,
but that’s a topic for a separate discussion):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="nf">read</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
  <span class="no">URL</span> <span class="n">url</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">MalformedURLException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to parse the URI '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="nc">InputStream</span> <span class="n">stream</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">stream</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">openStream</span><span class="o">();</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to open the stream for '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">stream</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to read the stream for '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This code is much longer, but at the same time more convenient to
<a href="/2016/02/09/are-you-still-debugging.html">debug</a>,
test, and use in production mode. The <code class="language-plaintext highlighter-rouge">catch</code> block
is able to explain the situation better and provide better
context in the rethrown exception, because it deals only with
a single case.</p>

<p>Thus, the rule I’m suggesting: if an exception is caught,
each originator must have its own <code class="language-plaintext highlighter-rouge">catch</code> block.</p>

<p>Obviously, I believe that
<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html">grouping exception types</a>
in a single <code class="language-plaintext highlighter-rouge">catch</code> block is bad practice.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[Catching multiple exceptions thrown by different originators in a single "catch" block is a bad practice because it reduces the ability to provide context of the problem that occurred.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/08/elephant.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/08/elephant.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Research Paper Simple Template</title><link href="https://www.yegor256.com/2022/08/24/research-paper-template.html" rel="alternate" type="text/html" title="Research Paper Simple Template" /><published>2022-08-24T00:00:00+00:00</published><updated>2022-08-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/24/research-paper-template</id><content type="html" xml:base="https://www.yegor256.com/2022/08/24/research-paper-template.html"><![CDATA[<p>My <a href="http://dblp.uni-trier.de/db/conf/krdb/krdb98.html#Bugaenko98">first academic paper</a>
was accepted and published in 1998. My most recent one was rejected by SPLASH just a week ago.
I’m writing two papers right now and co-authoring about ten others.
So far, my results are very poor: way more rejections than I expected.
The key lesson I’ve learned so far: the reason most papers get rejected
is not because they are essentially wrong. Instead, reviewers reject them
because they have no enthusiasm for decrypting a poorly structured text,
even though it may contain potentially interesting thoughts.
In this blog post I suggest how to structure a <a href="https://en.wikipedia.org/wiki/Research_paper">research paper</a>.
Take it with a grain of salt though.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Il Camorrista (1986) by Giuseppe Tornatore" src="/images/2022/08/il-camorrista.jpg" longdesc="#f5448d2e" /><figcaption id="f5448d2e">Il Camorrista (1986) by Giuseppe Tornatore</figcaption></figure>

<p>Read <a href="https://link.springer.com/book/10.1007/978-1-4471-6639-9"><em>Writing for Computer Science</em></a> by Justin Zobel.</p>

<p>Use <a href="https://www.latex-project.org">LaTeX</a>, either locally or in <a href="https://www.overleaf.com">Overleaf</a>.</p>

<p>Read my personal <a href="https://yegor256.github.io/latex-best-practices/main.pdf">best practices</a> for LaTeX.</p>

<p>Keep the same <a href="https://www.sheffield.ac.uk/academic-skills/study-skills-online/academic-writing">organizational structure</a> in each paragraph.</p>

<h2 id="title">Title</h2>

<p>The <a href="https://www.nature.com/nature-index/news-blog/how-to-write-a-good-research-science-academic-paper-title">title</a>
is the <a href="https://www.nature.com/articles/d41586-018-02404-4">key message</a> of your paper.</p>

<p>Use <a href="https://blog.wordvice.com/how-to-write-the-perfect-title-for-your-research-paper/">this method</a> to invent it.</p>

<h2 id="authors">Authors</h2>

<p>I <a href="https://www.youtube.com/watch?v=TF8MKOfo3gI">suggest</a> the following rule:
The first author in the list is you.
The last one is your boss.
Key contributors stay in the middle, in alphabetic order of their last names.
Everybody else is listed in the Acknowledgments section.</p>

<h2 id="abstract">Abstract</h2>

<p>An <a href="https://writing.wisc.edu/handbook/assignments/writing-an-abstract-for-your-research-paper/">abstract</a>
is a one-paragraph version of the paper, with an emphasis
on Introduction, Results, and Discussion.</p>

<h2 id="introduction">Introduction</h2>

<p>Answer these questions in this particular order:</p>
<ul>
  <li>What is going on in your field of study?</li>
  <li>What is wrong?</li>
  <li>Why is this Problem important?</li>
  <li>Why is it not fixed yet by others?</li>
</ul>

<p>Then, formulate your
<a href="https://en.wikipedia.org/wiki/Research_question">Research Question(s)</a>
or a <a href="https://www.enago.com/academy/how-to-develop-a-good-research-hypothesis/">Hypothesis</a>.</p>

<p>Next, make a disputable <a href="https://writingcenter.unc.edu/tips-and-tools/thesis-statements/">Thesis Statement</a>.</p>

<p>Then, enumerate the Contributions that your article makes to science.
A Contribution is something tangible, which a reader can take from your study
and use somehow in their own studies.
A theorem, a method, a toolkit, a data-set, or an algorithm are good examples of a Contribution.</p>

<p><del>Finally, help your reader understand how the rest of the paper is structured and why.</del>
Don’t do this! Instead, finish each paragraph in this Section with something along this line:
“In Section X we will explain it.”</p>

<h2 id="background">Background</h2>

<p>A reader may not know much about your field of study. This section
may help them understand your problem domain and its terminology better.
For example, if you write about a new programming language, this section may explain
what a compiler is, and grammar, front-end, back-end, AST, and so on.</p>

<p>Educate your readers in order to make it more comfortable for them
to read the rest of the paper.</p>

<h2 id="related-work">Related Work</h2>

<p>In the first paragraph, give an overview of all existing studies that
you managed to find. Classify them somehow.</p>

<p>Then write one paragraph per study. Explain what the study was about
and what are its key findings. Finish each paragraph with the flaws
you found in the study. Make a claim that due to these flaws this
study is not a solution to the Problem.</p>

<p>Finish the section with a paragraph claiming that, to the best of your knowledge,
not a single existing study solves the Problem.</p>

<h2 id="method-or-device">Method or Device</h2>

<p>There are two types of research:
you either <em>observe</em> the reality in order to discover its new laws
(this is how <a href="https://en.wikipedia.org/wiki/Isaac_Newton">Isaac Newton</a>
discovered his <a href="https://en.wikipedia.org/wiki/Newton's_laws_of_motion">laws of motion</a>),
or <em>extend</em> the reality with a new device
(this is how <a href="https://en.wikipedia.org/wiki/Thomas_Edison">Thomas Edison</a> invented the <a href="https://en.wikipedia.org/wiki/Incandescent_light_bulb">light bulb</a>).</p>

<p>If you observe, algorithmically <a href="https://research.com/research/how-to-write-research-methodology">describe</a> the Method.</p>

<p>If you extend, describe the Device and its usage scenarios.</p>

<h2 id="proof">Proof</h2>

<p>Formally prove that your Device possesses certain qualities, predicted in the Hypothesis.</p>

<p>The section mostly consists of definitions, examples, lemmas, theorems, and proofs.</p>

<h2 id="experimental-results">Experimental Results</h2>

<p>Apply the Method, step by step, to the real data.</p>

<p>Present your findings using tables and graphs.</p>

<p>Post your input data, intermediate data, and all output data in a public
GitHub repository. Make a reference to it.</p>

<h2 id="discussion">Discussion</h2>

<p>Informally <a href="https://plos.org/resource/how-to-write-conclusions/">interpret</a> your results.</p>

<p>Explain how your results are different from Related Work.</p>

<p>Highlight limitations of the study. Discuss its <a href="https://www.creative-wisdom.com/teaching/WBI/threat.shtml">threats to validity</a>.
Any method or any idea has its flaws. If you don’t admit them, your
readers will think that you are either concealing the issues or
not understanding your own domain well enough.</p>

<p>Highlight the significance of the study.</p>

<p>Discuss unanswered questions and suggest topics for future studies.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Spend one paragraph explaining how your research question was answered
in this paper. Imagine the reader just reads the Introduction and
then immediately this Conclusion. It should read fluently.</p>

<p>This paragraph is a short version of the Discussion.</p>

<h2 id="acknowledgments">Acknowledgments</h2>

<p>Here, you say “many thanks to individuals and organizations that
contributed to the research, including …” You list them all, in
alphabetic order. You may add your bosses, colleagues, people
who reviewed your paper, your parents, and even your dog.</p>

<p>If the research was done while you were an employee of ACME Inc.,
say that “the research was funded by ACME Inc.”</p>

<h2 id="references">References</h2>

<p>Use <a href="https://ctan.org/pkg/biblatex?lang=en">BibLaTeX</a> to automate citations,
and <a href="https://tex.stackexchange.com/questions/25701">read this</a>.</p>

<p>Use either <a href="https://en.wikipedia.org/wiki/APA_style">APA</a>
or <a href="https://ieeeauthorcenter.ieee.org/wp-content/uploads/IEEE-Reference-Guide.pdf">IEEE</a>
citation styles.</p>

<h2 id="appendices">Appendices</h2>

<p>Long tables, complex proofs, large figures are good candidates for placing
into appendices. Keeping them in the main part of the paper may jeopardize
its readability.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html"><![CDATA[Here is a very simplified guideline for newbie academic writers like myself, to help you structure a paper in a way that won't surprise your reviewers too much.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/08/il-camorrista.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/08/il-camorrista.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>