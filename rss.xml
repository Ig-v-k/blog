<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2023-07-03T13:59:30+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">On the Layout of Tests</title><link href="https://www.yegor256.com/2023/01/19/layout-of-tests.html" rel="alternate" type="text/html" title="On the Layout of Tests" /><published>2023-01-19T00:00:00+00:00</published><updated>2023-01-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2023/01/19/layout-of-tests</id><content type="html" xml:base="https://www.yegor256.com/2023/01/19/layout-of-tests.html"><![CDATA[<p>I don’t know what programming language you use, but my experience 
of recent coding in Java, Ruby, JavaScript, PHP, Python, C++, and Rust tells 
me that the principle, which I will try to convince you to adhere to — 
is universal for all languages. It’s about the naming of test files. 
It may look to you like a question of low importance, but let me try 
to demonstrate that it’s not. How do you name your files with test classes? How many 
of them do you create in the src/test/java directory? Where do you place
a class that is used only in a test but is not a test by itself? To most of these
questions, the answer most of you would give is “Whatever!”
So let’s try to find a better answer.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Мимино (1977) by Георгий Данелия" src="/images/2022/11/mimino.jpg" longdesc="#06bd8b4f" /><figcaption id="06bd8b4f">Мимино (1977) by Георгий Данелия</figcaption></figure>

<p>The primary purpose of my unit tests is to help me code. They are the 
<a href="/2022/07/05/safety-net.html">safety net</a> — 
they catch me when I make a mistake. For example, let’s say I go back and edit a few files that I 
edited a few years ago and, of course, I do it wrong this time. Then, I run all 500 unit tests
in the project, and … ten of them turn red. Pay attention, I don’t say “fail” because, 
just like a safety net around a building, failed tests are the tests 
that didn’t catch a falling hammer and didn’t spot a bug just introduced.
Thus, 490 of them <em>failed</em>, but ten of them <em>succeeded</em>.</p>

<h2 id="assertions">Assertions</h2>

<p>Next, I scratch my head and think — what exactly did I do wrong? Which 
file did I break? I just changed a few dozen code lines. Where exactly was the 
mistake? In order to find out, I read the output of the tests. I expect 
the messages they print to the console to be descriptive enough to 
help me understand the problem. I don’t want to revert all my changes 
and start from scratch, right? I want to quickly jump to the line with 
the bug, fix it, rerun all 500 tests, see all of them green, 
commit my changes and call it a day.</p>

<p>Needless to say, descriptive messages of test assertions 
and proper naming of test methods are the recipe for success.
Let’s consider simple object Phrases, where we add 
a few English phrases, and it magically understands which 
of them are greetings (obviously, using ML).
For such a class, this Java/JUnit5 test would be very bad:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
  <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
  <span class="k">assert</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>While this test is much better, thanks to <a href="https://www.hamcrest.org">Hamcrest</a>
assertions (how to name test methods — is a separate
story explained in detail <a href="https://stackoverflow.com/questions/155436/">here</a>):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">Matchers</span><span class="o">.</span><span class="na">equalTo</span><span class="o">;</span>

<span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">()</span> <span class="o">{</span>
  <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
  <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
  <span class="n">assertThat</span><span class="o">(</span>
    <span class="s">"Total count of greetings"</span><span class="o">,</span>
    <span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The first snippet will print a pretty obscure error message, while the
second one will help me a lot in my struggle with the bug I just made:
The message will be self-explanatory. I will quickly understand
what the problem is.</p>

<h2 id="test-classes">Test Classes</h2>

<p>Descriptive messages will help me understand what the problem is.
However, will I know <em>where</em> the problem is? In which Java class? Not really.
Is it in <code class="highlighter-rouge">Phrases.java,</code> or maybe in <code class="highlighter-rouge">Greetings.java,</code> which is returned by <code class="highlighter-rouge">Phrases.greetings()</code>?
I can only get this information from the <em>name</em> of the test class.
If it’s called <code class="highlighter-rouge">PhrasesTest.java</code> — all bugs that it catches <em>are most probably</em>
located in <code class="highlighter-rouge">Phrases.java.</code> If it’s called <code class="highlighter-rouge">GreetingsTest.java</code> — … well, you get the idea.</p>

<p>My point is that the name of a test class is not just a name. It’s an instruction
for a wondering programmer:
“Go look into the source file, the name of which you can derive from my name,
removing the <code class="highlighter-rouge">Test</code> suffix.” If I try to follow this instruction and
it leads me nowhere, I get very frustrated, especially if the project
is not mine. I can’t get the required information from anywhere else.
The name of the test class is my last hope.</p>

<h2 id="very-long-test-classes">Very Long Test Classes</h2>

<p>What if a test class gets too long? It may have a few dozen or more test methods. We don’t
want a class to be too big, right? Wrong! A test class is not a class. It’s not even 
a utility class. It’s a container for test scripts. It’s called a class because
Java (and many other languages) do not have alternative code 
organization instruments. So don’t worry about your test classes getting excessively long. 5000 lines of code 
in a test class is <em>not a problem</em> at all. Again, because it’s not a class, it’s only
a collection of test scripts.</p>

<h2 id="test-prerequisites-wrong-way">Test Prerequisites (Wrong Way)</h2>

<p>Very often some classes or functions  are not tests,
but must be shared among tests. (I’m sure you know that sharing tests is an
<a href="/2018/12/11/unit-testing-anti-patterns.html">anti-pattern</a>. Do you?)
Look at how I refactored the unit test from above (it’s not elegant
at all, but bear with me for a moment!):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PhrasesTest</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
    <span class="n">prepare</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span>
      <span class="s">"Total count of greetings"</span><span class="o">,</span>
      <span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">prepare</span><span class="o">(</span><span class="nc">Phrases</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Here, in private method <code class="highlighter-rouge">prepare(),</code> I have a convenient builder
of the object of class <code class="highlighter-rouge">Phrases.</code> This builder may be beneficial
for other tests, such as <code class="highlighter-rouge">GreetingsTest.</code> I don’t want
to copy it from <code class="highlighter-rouge">PhrasesTest</code> to <code class="highlighter-rouge">GreetingsTest.</code> Instead, I
want to put it somewhere where it can be reused. This would
be the right place for it (<code class="highlighter-rouge">foo</code> is the Java
package that all our classes belong to):</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/
  main/
    java/
      foo/
        Phrases.java
        Greetings.java
  test/
    java/
      foo/
        support/
          FooUtils.java
        PhrasesTest.java
        GreetingsTest.java
</code></pre></div></div>

<p>Static method <code class="highlighter-rouge">FooUtils.prepare()</code> now sits in the <code class="highlighter-rouge">FooUtils</code> utility
class (a terrible <a href="/2014/05/05/oop-alternative-to-utility-classes.html">anti-pattern</a>!),
which is in the package <code class="highlighter-rouge">foo.support</code>. But, pay attention, not in the <code class="highlighter-rouge">foo</code> package, but
in the sub-package that doesn’t have a counterpart in the live code block:
there is no directory <code class="highlighter-rouge">src/main/java/foo/support.</code> This is a clear message
to a programmer who would meet this repository in a few years: all classes
that stay in <code class="highlighter-rouge">foo.support</code> belong to the test pipeline only and are not tests by
themselves.</p>

<h2 id="test-prerequisites-right-way">Test Prerequisites (Right Way)</h2>

<p>As <a href="/2014/05/05/oop-alternative-to-utility-classes.html">you know</a>,
utility classes and <a href="/2017/02/07/private-method-is-new-class.html">private static methods</a>
are the rudiments of imperative programming. The object-oriented world has better alternatives.
JUnit5, in particular, offers pretty elegant mechanisms for
creating test prerequisites: <a href="https://junit.org/junit5/docs/current/user-guide/#extensions-registration">test extensions</a>.
Everything that a test method needs we supply through its parameters,
which are instantiated by extensions, for example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.extension.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">PhrasesExtension</span> <span class="kd">implements</span> <span class="nc">ParameterResolver</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span>
    <span class="nc">ParameterContext</span> <span class="n">pctx</span><span class="o">,</span> <span class="nc">ExtensionContext</span> <span class="n">ectx</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">pctx</span><span class="o">.</span><span class="na">getParameter</span><span class="o">().</span><span class="na">getType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Phrases</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">resolveParameter</span><span class="o">(</span>
    <span class="nc">ParameterContext</span> <span class="n">pctx</span><span class="o">,</span> <span class="nc">ExtensionContext</span> <span class="n">ectx</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then, the test will look like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.extension.ExtendWith</span><span class="o">;</span>

<span class="nd">@ExtendWith</span><span class="o">(</span><span class="nc">PhrasesExtension</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">PhrasesTest</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">(</span><span class="nc">Phrases</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertThat</span><span class="o">(</span>
      <span class="s">"Total count of greetings"</span><span class="o">,</span>
      <span class="n">p</span><span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, the test and its prerequisites stay in two different places and are not
as tightly coupled as they were before. Moreover, the prerequisites may be
easily reused. The magic <code class="highlighter-rouge">@ExtendWith</code> annotation may be attached to other
tests. The implementation of <code class="highlighter-rouge">PhrasesExtension</code> may become smarter: it
may start paying attention not only to the type of argument of a test method
but also to a custom annotation attached to it (this is how
<a href="https://junit.org/junit5/docs/5.4.1/api/org/junit/jupiter/api/io/TempDir.html"><code class="highlighter-rouge">@TempDir</code></a> works).</p>

<h2 id="fake-objects-best-way">Fake Objects (Best Way)</h2>

<p>Despite the beauty of JUnit extensions, I don’t think they are the best way
to decouple prerequisites from test methods. JUnit extensions are still pretty
coupled … not to test methods, but to the entire test suite of a project. If you
decide to use them somewhere else, in another project, you won’t be able to do so.</p>

<p>Also, if you decide to test your prerequisites, you won’t be able to do
it elegantly. Of course, you could write tests for them in the same directory, but in this case,
you will break the principle: one test per one live class.</p>

<p>The solution is: <a href="/2014/09/23/built-in-fake-objects.html">fake objects</a>.
They stay together with other live objects, but have special “fake” behavior,
for example (BTW, I <a href="/2017/11/14/static-factory-methods.html">don’t like factories</a>,
but in this case, it’s OK):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">FactoryOfPhrases</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="nc">Phrases</span> <span class="nf">aboutLondon</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Phrases</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phrases</span><span class="o">();</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"London is a capital of Great Britain"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then, the test will look like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PhrasesTest</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">countsSimpleGreetings</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">assertThat</span><span class="o">(</span>
      <span class="s">"Total count of greetings"</span><span class="o">,</span>
      <span class="k">new</span> <span class="nf">FactoryOfPhrases</span><span class="o">().</span><span class="na">aboutLondon</span><span class="o">()</span>
        <span class="o">.</span><span class="na">greetings</span><span class="o">().</span><span class="na">count</span><span class="o">(),</span>
      <span class="n">equalTo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Repository layout would look like this:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/
  main/
    java/
      foo/
        FactoryOfPhrases.java
        Phrases.java
        Greetings.java
  test/
    java/
      foo/
        FactoryOfPhrasesTest.java
        PhrasesTest.java
        GreetingsTest.java
</code></pre></div></div>

<p>Pay attention to the test <code class="highlighter-rouge">FactoryOfPhrasesTest.</code> It tests the “fake” object <code class="highlighter-rouge">FactoryOfPhrases,</code>
which is part of the live classes collection. The factory of phases is shipped together
with all other classes. Therefore, it can be used by other projects and not only for test
purposes.</p>

<p>To summarize, as a rule, I suggest keeping test classes clean: only test methods
belong there. No attributes and, of course, no static private methods. Everything
that is a prerequisite must be a “fake” object.</p>

<h2 id="integration-tests">Integration Tests</h2>

<p>In the Maven world, there are unit test classes (<code class="highlighter-rouge">Test</code> suffix),
and integration test classes (<code class="highlighter-rouge">ITCase</code> suffix).
The difference is huge. While both are compiled at the <code class="highlighter-rouge">test-compile</code> phase
by the same <code class="highlighter-rouge">maven-compiler-plugin,</code> they are not executed together.
Instead, unit tests are executed at the <code class="highlighter-rouge">test</code> phase. The build fails immediately if
any unit test is red. It’s a pretty straightforward approach, which
is similar to other build automation engines.</p>

<p>Integration tests are executed in four steps (these are the names of Maven phases):</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pre-integration-test
integration-test
post-integration-test
verify
</code></pre></div></div>

<p>First, the resources needed for integration testing are acquired
at the <code class="highlighter-rouge">pre-integration-test</code> phase. For example, a test instance of MySQL 
database may be started. Then, the tests with <code class="highlighter-rouge">ITCase</code> are executed at the ‘integration-test’ phase. The 
result of their execution is ignored for now but only recorded in a file. 
Then, the resources are released at the <code class="highlighter-rouge">post-integration-test</code> phase.
For example, the MySQL server is shut down. Finally, at the <code class="highlighter-rouge">verify</code> phase, 
the results of the tests are verified, and the build fails if 
some of them are not green.</p>

<p>I keep <code class="highlighter-rouge">ITCase</code> files together with <code class="highlighter-rouge">Test</code> files only when they are
integration tests for specific live classes. Very often, they are not — that’s why
they are integration tests. They may integrate and test a number of classes together.
In this case, I put them in a separate package and gave them arbitrary names
that don’t match with the names of live classes:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/
  main/
    java/
      foo/
        Phrases.java
        Greetings.java
  test/
    java/
      foo/
        it/
          SimpleGuessingITCase.java
        PhrasesTest.java
        GreetingsTest.java
        GreetingsITCase.java
</code></pre></div></div>

<p>Here, <code class="highlighter-rouge">GreetingsITCase.java</code> is an integration test for <code class="highlighter-rouge">Greetings.java,</code>
while <code class="highlighter-rouge">SimpleGuessingITCase.java</code> is an integration test for no particular
class. Obviously, the package <code class="highlighter-rouge">foo.it</code> only exists in tests and is not
present in <code class="highlighter-rouge">src/main/java.</code></p>

<p><br /></p>

<p>Thus, there is the first rule:
a test class may only have methods
annotated with <code class="highlighter-rouge">@Test</code> (in the case of Java).</p>

<p>Then, there is the second rule:
a package with tests may only have classes with <code class="highlighter-rouge">Test</code> or <code class="highlighter-rouge">ITCase</code> suffices
that map one-to-one to live classes and nothing else.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="tests" /><summary type="html"><![CDATA[What is the right way to keep test classes in a repository? There is no single canonical approach, but a few principles may help you keep test files in order.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/11/mimino.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/11/mimino.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Smaller Try-Blocks Are Better</title><link href="https://www.yegor256.com/2022/09/08/smaller-try-blocks.html" rel="alternate" type="text/html" title="Smaller Try-Blocks Are Better" /><published>2022-09-08T00:00:00+00:00</published><updated>2022-09-08T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/09/08/smaller-try-blocks</id><content type="html" xml:base="https://www.yegor256.com/2022/09/08/smaller-try-blocks.html"><![CDATA[<p>It often happens, <a href="/2015/07/28/checked-vs-unchecked-exceptions.html">especially</a>
in Java, that a few places in the method
are potential exception originators. Usually, we make a large method-size
<code class="highlighter-rouge">try</code> block with a single <code class="highlighter-rouge">catch</code> at the bottom. We catch all
the exceptions, usually even using
<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html">grouping</a>.
This helps us minimize the noise, which is the exception catching.
However, such large <code class="highlighter-rouge">try</code> blocks jeopardize maintainability: we are unable
to provide proper <a href="/2015/12/01/rethrow-exceptions.html">error context</a>
inside <code class="highlighter-rouge">catch</code> blocks.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="The Rum Diary (2011) by Bruce Robinson" src="/images/2022/09/the-rum-diary.jpg" longdesc="#3bd6c008" /><figcaption id="3bd6c008">The Rum Diary (2011) by Bruce Robinson</figcaption></figure>

<p>What do you think is wrong with this Java method
(aside from using <code class="highlighter-rouge">System.out</code> instead of an injected dependency)?:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>

<span class="kt">void</span> <span class="nf">grep</span><span class="o">(</span><span class="nc">Path</span> <span class="n">file</span><span class="o">,</span> <span class="nc">Pattern</span> <span class="n">regex</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">line</span> <span class="o">:</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">))</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">regex</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>I believe that its try/catch block is too big. The <code class="highlighter-rouge">IOException</code> may only be
thrown by the <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#readAllLines-java.nio.file.Path-"><code class="highlighter-rouge">readAllLines</code></a>
static method, but the block covers a few other method calls
and statements. This code would be better:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">grep</span><span class="o">(</span><span class="nc">Path</span> <span class="n">file</span><span class="o">,</span> <span class="nc">Pattern</span> <span class="n">regex</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">String</span><span class="o">[]</span> <span class="n">lines</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">regex</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now the try/catch block covers exactly the place where the exception
may originate. Nothing else!</p>

<p>Why are smaller try-blocks better? Because they allow more
focused error reporting with more detailed context. For example, the
second snippet can be re-written as follows:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">grep</span><span class="o">(</span><span class="nc">Path</span> <span class="n">file</span><span class="o">,</span> <span class="nc">Pattern</span> <span class="n">regex</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">String</span><span class="o">[]</span> <span class="n">lines</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to read all lines from %s"</span><span class="o">,</span>
        <span class="n">file</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">regex</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Can we do the same with the first snippet? We could, but the
error message would be inaccurate, because the block covers too much.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[Large try-blocks in try/catch statements are a common practice, because we try to avoid polluting the code with catch blocks; it's a bad tendency.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/09/the-rum-diary.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/09/the-rum-diary.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Don’t Group Exception Catchers</title><link href="https://www.yegor256.com/2022/08/30/dont-group-exception-catchers.html" rel="alternate" type="text/html" title="Don’t Group Exception Catchers" /><published>2022-08-30T00:00:00+00:00</published><updated>2022-08-30T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/30/dont-group-exception-catchers</id><content type="html" xml:base="https://www.yegor256.com/2022/08/30/dont-group-exception-catchers.html"><![CDATA[<p>Sometimes we <a href="/2015/12/01/rethrow-exceptions.html">rethrow</a> exceptions.
In Java we do this more often than in other languages, because it has
<a href="/2015/07/28/checked-vs-unchecked-exceptions.html">checked</a> exceptions.
Sometimes we must catch and rethrow a few exceptions that originated
from different places in a method.
Java 7 introduced <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html">grouping</a>
of different types of exceptions in a single <code class="highlighter-rouge">catch</code> block.
But even without the grouping, it is possible to just catch <code class="highlighter-rouge">IOException</code> or
even <code class="highlighter-rouge">Exception</code> and provide a single <code class="highlighter-rouge">catch</code> block for all types and all
originators (methods that throw).
Recently I realized that this is a bad practice. Here is why.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Elephant (2003) by Gus Van Sant" src="/images/2022/08/elephant.jpg" longdesc="#97a81977" /><figcaption id="97a81977">Elephant (2003) by Gus Van Sant</figcaption></figure>

<p>Consider this Java method (I’m using <a href="https://commons.apache.org/proper/commons-io/">Apache Commons IO</a>):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="nf">read</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span>
      <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">openStream</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It’s not perfect. Let’s rewrite it to provide more error context,
as <a href="/2015/12/01/rethrow-exceptions.html">was suggested</a> earlier:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="nf">read</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span>
      <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">openStream</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to read from '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Here, the exception may be thrown in three places:</p>

<ul>
  <li>By the <a href="/2015/05/07/ctors-must-be-code-free.html">constructor</a>
of <a href="https://docs.oracle.com/javase/7/docs/api/java/net/URL.html"><code class="highlighter-rouge">java.net.URL</code></a></li>
  <li>By the method <a href="https://docs.oracle.com/javase/7/docs/api/java/net/URL.html#openStream%28%29"><code class="highlighter-rouge">openStream()</code></a></li>
  <li>By the method <a href="https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html#toByteArray-java.io.InputStream-"><code class="highlighter-rouge">toByteArray</code></a></li>
</ul>

<p>No matter who throws, we catch it in the same <code class="highlighter-rouge">catch</code> block and rethrow
with the same message. I believe that this is bad because the <a href="/2015/12/01/rethrow-exceptions.html">context</a>
of the error provided by rethrowing is less focused on the issue that occurred.</p>

<p>I would suggest this refactoring
(I don’t close the input stream, which is wrong,
but that’s a topic for a separate discussion):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="nf">read</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
  <span class="no">URL</span> <span class="n">url</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">MalformedURLException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to parse the URI '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="nc">InputStream</span> <span class="n">stream</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">stream</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">openStream</span><span class="o">();</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to open the stream for '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">stream</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
      <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
        <span class="s">"Failed to read the stream for '%s'"</span><span class="o">,</span>
        <span class="n">uri</span>
      <span class="o">),</span>
      <span class="n">ex</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This code is much longer, but at the same time more convenient to
<a href="/2016/02/09/are-you-still-debugging.html">debug</a>,
test, and use in production mode. The <code class="highlighter-rouge">catch</code> block
is able to explain the situation better and provide better
context in the rethrown exception, because it deals only with
a single case.</p>

<p>Thus, the rule I’m suggesting: if an exception is caught,
each originator must have its own <code class="highlighter-rouge">catch</code> block.</p>

<p>Obviously, I believe that
<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html">grouping exception types</a>
in a single <code class="highlighter-rouge">catch</code> block is bad practice.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html"><![CDATA[Catching multiple exceptions thrown by different originators in a single "catch" block is a bad practice because it reduces the ability to provide context of the problem that occurred.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/08/elephant.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/08/elephant.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Research Paper Simple Template</title><link href="https://www.yegor256.com/2022/08/24/research-paper-template.html" rel="alternate" type="text/html" title="Research Paper Simple Template" /><published>2022-08-24T00:00:00+00:00</published><updated>2022-08-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/24/research-paper-template</id><content type="html" xml:base="https://www.yegor256.com/2022/08/24/research-paper-template.html"><![CDATA[<p>My <a href="http://dblp.uni-trier.de/db/conf/krdb/krdb98.html#Bugaenko98">first academic paper</a>
was accepted and published in 1998. My most recent one was rejected by SPLASH just a week ago.
I’m writing two papers right now and co-authoring about ten others.
So far, my results are very poor: way more rejections than I expected.
The key lesson I’ve learned so far: the reason most papers get rejected
is not because they are essentially wrong. Instead, reviewers reject them
because they have no enthusiasm for decrypting a poorly structured text,
even though it may contain potentially interesting thoughts.
In this blog post I suggest how to structure a <a href="https://en.wikipedia.org/wiki/Research_paper">research paper</a>.
Take it with a grain of salt though.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Il Camorrista (1986) by Giuseppe Tornatore" src="/images/2022/08/il-camorrista.jpg" longdesc="#f5448d2e" /><figcaption id="f5448d2e">Il Camorrista (1986) by Giuseppe Tornatore</figcaption></figure>

<p>Read <a href="https://link.springer.com/book/10.1007/978-1-4471-6639-9"><em>Writing for Computer Science</em></a> by Justin Zobel.</p>

<p>Use <a href="https://www.latex-project.org">LaTeX</a>, either locally or in <a href="https://www.overleaf.com">Overleaf</a>.</p>

<p>Read my personal <a href="https://yegor256.github.io/latex-best-practices/main.pdf">best practices</a> for LaTeX.</p>

<p>Keep the same <a href="https://www.sheffield.ac.uk/academic-skills/study-skills-online/academic-writing">organizational structure</a> in each paragraph.</p>

<h2 id="title">Title</h2>

<p>The <a href="https://www.nature.com/nature-index/news-blog/how-to-write-a-good-research-science-academic-paper-title">title</a>
is the <a href="https://www.nature.com/articles/d41586-018-02404-4">key message</a> of your paper.</p>

<p>Use <a href="https://blog.wordvice.com/how-to-write-the-perfect-title-for-your-research-paper/">this method</a> to invent it.</p>

<h2 id="authors">Authors</h2>

<p>I <a href="https://www.youtube.com/watch?v=TF8MKOfo3gI">suggest</a> the following rule:
The first author in the list is you.
The last one is your boss.
Key contributors stay in the middle, in alphabetic order of their last names.
Everybody else is listed in the Acknowledgments section.</p>

<h2 id="abstract">Abstract</h2>

<p>An <a href="https://writing.wisc.edu/handbook/assignments/writing-an-abstract-for-your-research-paper/">abstract</a>
is a one-paragraph version of the paper, with an emphasis
on Introduction, Results, and Discussion.</p>

<h2 id="introduction">Introduction</h2>

<p>Answer these questions in this particular order:</p>
<ul>
  <li>What is going on in your field of study?</li>
  <li>What is wrong?</li>
  <li>Why is this Problem important?</li>
  <li>Why is it not fixed yet by others?</li>
</ul>

<p>Then, formulate your
<a href="https://en.wikipedia.org/wiki/Research_question">Research Question(s)</a>
or a <a href="https://www.enago.com/academy/how-to-develop-a-good-research-hypothesis/">Hypothesis</a>.</p>

<p>Next, make a disputable <a href="https://writingcenter.unc.edu/tips-and-tools/thesis-statements/">Thesis Statement</a>.</p>

<p>Then, enumerate the Contributions that your article makes to science.
A Contribution is something tangible, which a reader can take from your study
and use somehow in their own studies.
A theorem, a method, a toolkit, a data-set, or an algorithm are good examples of a Contribution.</p>

<p><del>Finally, help your reader understand how the rest of the paper is structured and why.</del>
Don’t do this! Instead, finish each paragraph in this Section with something along this line:
“In Section X we will explain it.”</p>

<h2 id="background">Background</h2>

<p>A reader may not know much about your field of study. This section
may help them understand your problem domain and its terminology better.
For example, if you write about a new programming language, this section may explain
what a compiler is, and grammar, front-end, back-end, AST, and so on.</p>

<p>Educate your readers in order to make it more comfortable for them
to read the rest of the paper.</p>

<h2 id="related-work">Related Work</h2>

<p>In the first paragraph, give an overview of all existing studies that
you managed to find. Classify them somehow.</p>

<p>Then write one paragraph per study. Explain what the study was about
and what are its key findings. Finish each paragraph with the flaws
you found in the study. Make a claim that due to these flaws this
study is not a solution to the Problem.</p>

<p>Finish the section with a paragraph claiming that, to the best of your knowledge,
not a single existing study solves the Problem.</p>

<h2 id="method-or-device">Method or Device</h2>

<p>There are two types of research:
you either <em>observe</em> the reality in order to discover its new laws
(this is how <a href="https://en.wikipedia.org/wiki/Isaac_Newton">Isaac Newton</a>
discovered his <a href="https://en.wikipedia.org/wiki/Newton's_laws_of_motion">laws of motion</a>),
or <em>extend</em> the reality with a new device
(this is how <a href="https://en.wikipedia.org/wiki/Thomas_Edison">Thomas Edison</a> invented the <a href="https://en.wikipedia.org/wiki/Incandescent_light_bulb">light bulb</a>).</p>

<p>If you observe, algorithmically <a href="https://research.com/research/how-to-write-research-methodology">describe</a> the Method.</p>

<p>If you extend, describe the Device and its usage scenarios.</p>

<h2 id="proof">Proof</h2>

<p>Formally prove that your Device possesses certain qualities, predicted in the Hypothesis.</p>

<p>The section mostly consists of definitions, examples, lemmas, theorems, and proofs.</p>

<h2 id="experimental-results">Experimental Results</h2>

<p>Apply the Method, step by step, to the real data.</p>

<p>Present your findings using tables and graphs.</p>

<p>Post your input data, intermediate data, and all output data in a public
GitHub repository. Make a reference to it.</p>

<h2 id="discussion">Discussion</h2>

<p>Informally <a href="https://plos.org/resource/how-to-write-conclusions/">interpret</a> your results.</p>

<p>Explain how your results are different from Related Work.</p>

<p>Highlight limitations of the study. Discuss its <a href="https://www.creative-wisdom.com/teaching/WBI/threat.shtml">threats to validity</a>.
Any method or any idea has its flaws. If you don’t admit them, your
readers will think that you are either concealing the issues or
not understanding your own domain well enough.</p>

<p>Highlight the significance of the study.</p>

<p>Discuss unanswered questions and suggest topics for future studies.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Spend one paragraph explaining how your research question was answered
in this paper. Imagine the reader just reads the Introduction and
then immediately this Conclusion. It should read fluently.</p>

<p>This paragraph is a short version of the Discussion.</p>

<h2 id="acknowledgments">Acknowledgments</h2>

<p>Here, you say “many thanks to individuals and organizations that
contributed to the research, including …” You list them all, in
alphabetic order. You may add your bosses, colleagues, people
who reviewed your paper, your parents, and even your dog.</p>

<p>If the research was done while you were an employee of ACME Inc.,
say that “the research was funded by ACME Inc.”</p>

<h2 id="references">References</h2>

<p>Use <a href="https://ctan.org/pkg/biblatex?lang=en">BibLaTeX</a> to automate citations,
and <a href="https://tex.stackexchange.com/questions/25701">read this</a>.</p>

<p>Use either <a href="https://en.wikipedia.org/wiki/APA_style">APA</a>
or <a href="https://ieeeauthorcenter.ieee.org/wp-content/uploads/IEEE-Reference-Guide.pdf">IEEE</a>
citation styles.</p>

<h2 id="appendices">Appendices</h2>

<p>Long tables, complex proofs, large figures are good candidates for placing
into appendices. Keeping them in the main part of the paper may jeopardize
its readability.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html"><![CDATA[Here is a very simplified guideline for newbie academic writers like myself, to help you structure a paper in a way that won't surprise your reviewers too much.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/08/il-camorrista.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/08/il-camorrista.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Declarative and Immutable Pipeline of Transformations</title><link href="https://www.yegor256.com/2022/08/10/xsline-immutable-pipeline.html" rel="alternate" type="text/html" title="Declarative and Immutable Pipeline of Transformations" /><published>2022-08-10T00:00:00+00:00</published><updated>2022-08-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/10/xsline-immutable-pipeline</id><content type="html" xml:base="https://www.yegor256.com/2022/08/10/xsline-immutable-pipeline.html"><![CDATA[<p>A few months ago I made a <a href="https://github.com/yegor256/xsline">small Java library</a>,
which is worth explaining since
the design of its classes and interfaces is pretty unusual. It’s very much
object-oriented for a pretty imperative task: building a pipeline of
document transformations. The goal was to do this in a declarative and
immutable way, and in Java. Well, as much as it’s possible.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Barfuss (2005) by Til Schweiger" src="/images/2022/08/barfuss.jpg" longdesc="#53e51a8f" /><figcaption id="53e51a8f">Barfuss (2005) by Til Schweiger</figcaption></figure>

<p>Let’s say you have a document, and you have a collection of transformations,
each of which will do something with the document. Each transformation, for example,
is a small piece of Java code. You want to build a list
of transformations and then pass a document through this list.</p>

<p>First, I made an interface <a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Shift.java"><code class="highlighter-rouge">Shift</code></a>
(instead of the frequently used and boring “transformation”):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Shift</span> <span class="o">{</span>
  <span class="nc">Document</span> <span class="nf">apply</span><span class="o">(</span><span class="nc">Document</span> <span class="n">doc</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then I made an interface <a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Train.java"><code class="highlighter-rouge">Train</code></a>
(this is the name I made up for the collection
of transformations) and its default implementation:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Train</span> <span class="o">{</span>
  <span class="nc">Train</span> <span class="nf">with</span><span class="o">(</span><span class="nc">Shift</span> <span class="n">shift</span><span class="o">);</span>
  <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Shift</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">TrDefault</span> <span class="kd">implements</span> <span class="nc">Train</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Shift</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
  <span class="nd">@Override</span>
  <span class="nc">Train</span> <span class="nf">with</span><span class="o">(</span><span class="nc">Shift</span> <span class="n">shift</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Shift</span><span class="o">&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="nc">Shift</span> <span class="n">item</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">items</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">items</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">shift</span><span class="o">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">TrDefault</span><span class="o">(</span><span class="n">items</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Shift</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Ah, I forgot to tell you. I’m a big fan of <a href="/2014/06/09/objects-should-be-immutable.html">immutable</a>
objects. That’s why the
<code class="highlighter-rouge">Train</code> doesn’t have a method <code class="highlighter-rouge">add</code>, but instead has <code class="highlighter-rouge">with</code>. The difference is that
<code class="highlighter-rouge">add</code> modifies the object, while <code class="highlighter-rouge">with</code> makes a new one.</p>

<p>Now, I can build a train of shifts with
<a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/TrDefault.java"><code class="highlighter-rouge">TrDefault</code></a>,
a simple default implementation of <code class="highlighter-rouge">Train</code>, assuming
<code class="highlighter-rouge">ShiftA</code> and <code class="highlighter-rouge">ShiftB</code> are already implemented:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Train</span> <span class="n">train</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrDefault</span><span class="o">()</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">ShiftA</span><span class="o">())</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">ShiftB</span><span class="o">());</span>
</code></pre></div></div>

<p>Then I created an <a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Xsline.java"><code class="highlighter-rouge">Xsline</code></a>
class (it’s “XSL” + “pipeline”, since in my case
I’m managing XML documents and transform them using XSL stylesheets). An instance
of this class encapsulates an instance of <code class="highlighter-rouge">Train</code> and then passes a document
through all its transformations:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Document</span> <span class="n">input</span> <span class="o">=</span> <span class="o">...;</span>
<span class="nc">Document</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Xsline</span><span class="o">(</span><span class="n">train</span><span class="o">).</span><span class="na">pass</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</code></pre></div></div>

<p>So far so good.</p>

<p>Now, I want all my transformations to log themselves. I created
<a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/StLogged.java"><code class="highlighter-rouge">StLogged</code></a>,
a decorator of <code class="highlighter-rouge">Shift</code>, which encapsulates the original <code class="highlighter-rouge">Shift</code>, decorates its method <code class="highlighter-rouge">apply</code>,
and prints a message to the console when the transformation is completed:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">StLogged</span> <span class="kd">implements</span> <span class="nc">Shift</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Shift</span> <span class="n">origin</span><span class="o">;</span>
  <span class="nd">@Override</span>
  <span class="nc">Document</span> <span class="nf">apply</span><span class="o">(</span><span class="nc">Document</span> <span class="n">before</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Document</span> <span class="n">after</span> <span class="o">=</span> <span class="n">origin</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">before</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Transformation completed!"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">after</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, I have to do this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Train</span> <span class="n">train</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrDefault</span><span class="o">()</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">StLogged</span><span class="o">(</span><span class="k">new</span> <span class="nc">ShiftA</span><span class="o">()))</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">StLogged</span><span class="o">(</span><span class="k">new</span> <span class="nc">ShiftB</span><span class="o">()));</span>
</code></pre></div></div>

<p>Looks like a duplication of <code class="highlighter-rouge">new StLogged(</code>, especially with a collection of a few dozen
shifts. To get rid of this duplication I created a decorator for <code class="highlighter-rouge">Train</code>, which
on the fly decorates shifts that it encapsulates, using
<a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/StLogged.java"><code class="highlighter-rouge">StLogged</code></a>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Train</span> <span class="n">train</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrLogged</span><span class="o">(</span><span class="k">new</span> <span class="nc">TrDefault</span><span class="o">())</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">ShiftA</span><span class="o">()))</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">ShiftB</span><span class="o">());</span>
</code></pre></div></div>

<p>In my case, all shifts are doing XSL transformations, taking XSL stylesheets from
files available in classpath. That’s why the code looks like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Train</span> <span class="n">train</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrLogged</span><span class="o">(</span><span class="k">new</span> <span class="nc">TrDefault</span><span class="o">())</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">StXSL</span><span class="o">(</span><span class="s">"stylesheet-a.xsl"</span><span class="o">)))</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="k">new</span> <span class="nc">StXSL</span><span class="o">(</span><span class="s">"stylesheet-b.xsl"</span><span class="o">)));</span>
</code></pre></div></div>

<p>There is an obvious duplication of <code class="highlighter-rouge">new StXSL(...)</code>, but I can’t simply get rid of it,
since the method <code class="highlighter-rouge">with</code> expects an instance of <code class="highlighter-rouge">Shift</code>, not a <code class="highlighter-rouge">String</code>. To solve this,
I made the <code class="highlighter-rouge">Train</code> generic and created
<a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/TrClasspath.java"><code class="highlighter-rouge">TrClasspath</code></a>
decorator:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Train</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">train</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrClasspath</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">TrDefault</span><span class="o">&lt;&gt;())</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="s">"stylesheet-a.xsl"</span><span class="o">))</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="s">"stylesheet-b.xsl"</span><span class="o">));</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">TrClasspath.with()</code> accepts <code class="highlighter-rouge">String</code>, turns it into
<a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/StXSL.java"><code class="highlighter-rouge">StXSL</code></a>
and passes to <code class="highlighter-rouge">TrDefault.with()</code>.</p>

<p>Pay attention to the snippet above: the <code class="highlighter-rouge">train</code> is now of type <code class="highlighter-rouge">Train&lt;String&gt;</code>, not <code class="highlighter-rouge">Train&lt;Shift&gt;</code>,
as would be required by <code class="highlighter-rouge">Xsline</code>.
The question now is: how do we get back to <code class="highlighter-rouge">Train&lt;Shift&gt;</code>?</p>

<aside class="youtube">
        <a href="https://www.youtube.com/watch?v=C6CQWzOKEJs"><div class="box">
        <img src="https://i.ytimg.com/vi/C6CQWzOKEJs/mqdefault.jpg" alt="YouTube video #C6CQWzOKEJs" />
        <div class="play"><i class="icon icon-play"></i></div>
        </div></a>
        <div>Object Thinking #7: Yegor Bugayenko / Immutability + Generics;
        22 September 2022.</div></aside>

<p>Ah, I forgot to mention. I wanted to design this library with one important principle
in mind, <a href="/2014/11/20/seven-virtues-of-good-object.html">suggested</a>
in 2014: all objects may only implement methods from their interfaces. That’s why,
I couldn’t just add a method <code class="highlighter-rouge">getEncapsulatedTrain()</code> to <code class="highlighter-rouge">TrClasspath</code>.</p>

<p>I introduced a new interface
<a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Train.java"><code class="highlighter-rouge">Train.Temporary&lt;T&gt;</code></a>
with a single method <code class="highlighter-rouge">back()</code>
returning <code class="highlighter-rouge">Train&lt;T&gt;</code>. The class <code class="highlighter-rouge">TrClasspath</code> implements
it and I can do this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Train</span><span class="o">&lt;</span><span class="nc">Shift</span><span class="o">&gt;</span> <span class="n">train</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrClasspath</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">TrDefault</span><span class="o">&lt;&gt;())</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="s">"stylesheet-a.xsl"</span><span class="o">))</span>
  <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="s">"stylesheet-b.xsl"</span><span class="o">))</span>
  <span class="o">.</span><span class="na">back</span><span class="o">();</span>
</code></pre></div></div>

<p>Next I decided to get rid of the duplication of <code class="highlighter-rouge">.with()</code> calls. Obviously, it would
be easier to have the ability to provide a list of file names as an array of <code class="highlighter-rouge">String</code>
and build the train from it. I created a new class
<a href="https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/TrBulk.java"><code class="highlighter-rouge">TrBulk</code></a>,
which does exactly that:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
  <span class="s">"stylesheet-a.xsl"</span><span class="o">,</span>
  <span class="s">"stylesheet-b.xsl"</span>
<span class="o">);</span>
<span class="nc">Train</span><span class="o">&lt;</span><span class="nc">Shift</span><span class="o">&gt;</span> <span class="n">train</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrBulk</span><span class="o">&lt;&gt;(</span>
  <span class="k">new</span> <span class="nc">TrClasspath</span><span class="o">&lt;&gt;(</span>
    <span class="k">new</span> <span class="nc">TrDefault</span><span class="o">&lt;&gt;()</span>
  <span class="o">)</span>
<span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">names</span><span class="o">).</span><span class="na">back</span><span class="o">();</span>
</code></pre></div></div>

<p>With this design I can construct the train in almost any possible way.</p>

<p>See, for example, how we use it <a href="https://github.com/objectionary/eo/blob/0.23.6/eo-parser/src/main/java/org/eolang/parser/ParsingTrain.java#L86-L103">here</a> and <a href="https://github.com/objectionary/eo/blob/0.23.6/eo-maven-plugin/src/main/java/org/eolang/maven/SpyTrain.java#L49-L75">here</a>.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="xml" /><summary type="html"><![CDATA[Combining "strategy" objects into a pipeline is a trivial task if done in a mutable and imperative way; here I show a declarative and immutable approach]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/08/barfuss.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/08/barfuss.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Code and Its Tests in Different Pull Requests</title><link href="https://www.yegor256.com/2022/08/04/code-and-tests-different-pull-requests.html" rel="alternate" type="text/html" title="The Code and Its Tests in Different Pull Requests" /><published>2022-08-04T00:00:00+00:00</published><updated>2022-08-04T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/04/code-and-tests-different-pull-requests</id><content type="html" xml:base="https://www.yegor256.com/2022/08/04/code-and-tests-different-pull-requests.html"><![CDATA[<p>I suggested this idea a few weeks ago
<a href="https://twitter.com/yegor256/status/1525758255225528320">on Twitter</a>
and got mostly negative reactions. That’s why I wrote this blog post, to elaborate on the
subject in an attempt to convince you. Here is the rule I’m suggesting:
always submit changes to the code separately from the changes to
its unit tests. Simply put, in one pull request you modify the tests, maybe
marking some of them as “disabled.” You merge this pull request and then
make the second one, modifying the code and most probably
removing the “disabled” markers from the tests. You don’t touch the
body of the tests in the second pull request.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Mafioso (1962) by Alberto Lattuada" src="/images/2022/06/mafioso.jpg" longdesc="#e0369b6c" /><figcaption id="e0369b6c">Mafioso (1962) by Alberto Lattuada</figcaption></figure>

<p>It may look like a contradiction of the principles of
<a href="/2017/03/24/tdd-that-works.html">TDD</a>.
However, to me this approach looks like an extreme application of TDD, not a violation
of it. First we merge the tests, which most probably will break the build, since
the functionality that they test is not present yet. In order to avoid the broken
state of the build we disable the new tests that we added and the tests that we modified.
In <a href="https://junit.org/junit5/docs/current/user-guide/">JUnit 5</a>, for example, we do this with
<a href="https://junit.org/junit5/docs/5.0.0-M2/api/org/junit/jupiter/api/Disabled.html"><code class="highlighter-rouge">@Disabled</code></a> annotation.</p>

<p>Reviewers validate the changes you make, asking themselves these questions:
“Do we really need this new functionality?
Does it conflict with the existing functionality?
Does it make sense to test new functionality this particular way?”
They don’t think about <em>how</em> the functionality will be implemented, they
only care about the <em>requirements</em> you impose in your tests against the
product. The reviewers act more or less as requirements engineers at this stage.
They validate the <em>intent</em>, not the <em>realization</em> of it.</p>

<p>Then, in the second pull request, you modify the code without touching the tests.
Now, reviewers can rest assured that you haven’t changed the requirements just to make
them more suitable for your implementation. In other words, they know that you didn’t <em>cheat</em>.
Since you didn’t touch the tests, it’s a guarantee for reviewers that requirements
remain stable and you only modify the implementation. Speaking business language,
you don’t change the <em>contract</em> if/when you understand that you can’t deliver
what was <em>promised</em>.</p>

<p>Moreover, when you modify the tests only, without touching the code, it’s much
easier for the reviewers to understand whether or not your changes truly belong to the
problem you are supposed to be solving. We programmers tend to make a typical mistake:
we make changes to the code, some tests fail, we fix the tests … no matter whether
they are “our” tests or not. We simply make the tests pass regardless of <em>why</em> they fail.
Instead of <em>listening</em> to them, we shut them up. Later, the reviewers may not understand
why some tests were modified. Especially if a pull request is big. They will most
probably blindly trust you and merge the pull request.</p>

<p>That’s why separating tests from code is a solution. First, the tests get modified
and the reviewers will pay attention only to the scope of tests. They will easily
catch you if the changes are too broad and are not related to the problem you
are solving. Then the code gets modified and reviewers don’t need to worry about
tests at all. They don’t pay attention to them, they only review the implementation.
They know that you can’t break the tests since the build pipeline
won’t allow you to do this.</p>

<p>What do you think now? Does it make sense?</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html"><![CDATA[Always submit changes to the code in a separate pull request from the changes to its unit tests, in another pull request.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/mafioso.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/mafioso.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Command Line Default Options in Linearized Plain Text</title><link href="https://www.yegor256.com/2022/07/20/command-line-defaults.html" rel="alternate" type="text/html" title="Command Line Default Options in Linearized Plain Text" /><published>2022-07-20T00:00:00+00:00</published><updated>2022-07-20T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/07/20/command-line-defaults</id><content type="html" xml:base="https://www.yegor256.com/2022/07/20/command-line-defaults.html"><![CDATA[<figure class="badge"><a href="https://github.com/yegor256/xcop"><img src="https://raw.githubusercontent.com/yegor256/xcop/master/logo.svg" style="width:128px;max-width:100%;" alt="badge" /></a></figure>

<p><a href="/2017/08/29/xcop.html">A few years ago</a>
I created <a href="https://github.com/yegor256/xcop">xcop</a>,
a simple command line tool that
can check the style of an XML file. It’s similar to
<a href="https://checkstyle.sourceforge.io">Checkstyle</a> (for Java) and
<a href="https://pypi.org/project/pep8/">Pep8</a> (for Python),
but for XML. It’s pretty easy to use <code class="highlighter-rouge">xcop</code>: just run it with a few command
line arguments and it returns the list of errors found in your XML file, if there are any. However,
some of the arguments may be convenient to have as defaults and instead of
passing them through the command line on every execution, we could store them in some configuration file.
The question is: What is the best format for this file?
<a href="https://en.wikipedia.org/wiki/YAML">YAML</a>,
<a href="https://en.wikipedia.org/wiki/JSON">JSON</a>, or
<a href="https://en.wikipedia.org/wiki/TOML">TOML</a>?
None of them! I suggest plain text.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="The Trotsky (2009) by Jacob Tierney" src="/images/2022/07/the-trotsky.jpg" longdesc="#2a549763" /><figcaption id="2a549763">The Trotsky (2009) by Jacob Tierney</figcaption></figure>

<p>Let’s say, you want <code class="highlighter-rouge">xcop</code> to check all <code class="highlighter-rouge">*.xml</code> files in your repository,
but ignore XML files in the <code class="highlighter-rouge">.idea/</code> directory. You also want to make sure
all XML files have a license in their preamble. This is how you would
call <code class="highlighter-rouge">xcop</code>:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ xcop --include '*.xml' --exclude '.idea/**' \
  --license LICENSE.txt
</code></pre></div></div>

<p>You have to use this set of arguments everywhere you call <code class="highlighter-rouge">xcop</code>:
in the build script, in the CI/CD pipeline, and on your laptop when you check
that everything is correct. What some of us sometimes do is create a new
Bash file called <code class="highlighter-rouge">run_xcop.sh</code> with exactly this single command.</p>

<p>I suggest a better solution. You can create a <code class="highlighter-rouge">.xcop</code>
plain text file in the root of the repository and put all
the required “default” command line options there, one per line:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--include=*.xml
--exclude=.idea/**
--license=LICENSE.txt
</code></pre></div></div>

<p>Now, you can call the tool just like this:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ xcop
</code></pre></div></div>

<p>It will find the <code class="highlighter-rouge">.xcop</code> file and will read all lines from it, treating
each of them as command line arguments. It will basically <em>concatenate</em>
what is provided in the command line with what is found in the file
with defaults.</p>

<p>I believe this approach is much better than YAML, JSON, XML, TOML, INI,
and other configuration formats simply because it doesn’t require us
users to learn two formats: one for command line options, another one
for the configuration file. We learn just one and use it interchangeably
either when we call the tool “manually” or when we configure its
behavior in the file with defaults.</p>

<p>By the way, it’s possible to configure the behavior of <code class="highlighter-rouge">xcop</code> globally
creating the file <code class="highlighter-rouge">~/.xcop</code> (in the home directory of the user). The
defaults from this file will also be concatenated with the ones provided
in the command line and with the ones found in the local <code class="highlighter-rouge">.xcop</code> file.</p>

<p>I designed a few of my other command line tools using the same principle,
including
<a href="https://github.com/yegor256/pdd">pdd</a>,
<a href="https://github.com/yegor256/texqc">texqc</a>,
and
<a href="https://github.com/yegor256/texsc">texsc</a>.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html"><![CDATA[Where to put default configuration parameters for a command line tool? It has to be a JSON or YAML config file? Neither. Just plain text.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/07/the-trotsky.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/07/the-trotsky.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Automated Tests Are the Safety Net that Saves You</title><link href="https://www.yegor256.com/2022/07/05/safety-net.html" rel="alternate" type="text/html" title="Automated Tests Are the Safety Net that Saves You" /><published>2022-07-05T00:00:00+00:00</published><updated>2022-07-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/07/05/safety-net</id><content type="html" xml:base="https://www.yegor256.com/2022/07/05/safety-net.html"><![CDATA[<p>Automated tests are the ones that are usually called unit tests or integration tests,
or just any tests that are being executed <em>automatically</em>. That’s the difference
between them and manual tests. What is the purpose of automated tests?
First and foremost, they reduce the amount of routine work: we don’t
need to remember how to test a module, the tests remember. We just click
a button and a suite of tests, which may consist of hundreds or thousands,
runs and reports errors, if any are found. Saving time is important,
but it’s not the only and, if you ask me, not the most important purpose
of automated tests. A more important one is their role as a safety net.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Main picture" src="/images/2022/06/safety-net.jpg" /></figure>

<p>Do you know what a safety net is? Wikipedia
<a href="https://en.wikipedia.org/wiki/Safety_net">says</a> that
it is “a net to protect people from injury after falling from heights.”
You most probably have seen it on buildings which are being
constructed or reconstructed.
The red one in the picture is the safety net.</p>

<p>If construction workers accidentally fall down
or drop their tools, they won’t die and won’t kill anyone on the ground.
Does this knowledge help them work more effectively? I believe it does. I didn’t
find any research on this subject, comparing the productivity
of workers who know that there is a safety net beneath them with the productivity
of workers who know that a mistake would most probably cost them their lives or
the life of child playing on the ground. The results of such research are obvious though,
I believe.</p>

<aside class="youtube">
        <a href="https://www.youtube.com/watch?v=Y0Zx_sdVG48"><div class="box">
        <img src="https://i.ytimg.com/vi/Y0Zx_sdVG48/mqdefault.jpg" alt="YouTube video #Y0Zx_sdVG48" />
        <div class="play"><i class="icon icon-play"></i></div>
        </div></a>
        <div>M199: Unit tests are the Safety Net that you can&#39;t afford to not use;
        24 June 2022.</div></aside>

<p>The same is true for us programmers. Modifying the source code and knowing that
there are no automated tests in place is similar to working at height
without a safety net: one mistake could cost you server downtime, a frustrated
customer, lost money, and maybe a lost job. How high would the productivity
of a programmer be while working like this? Do we need to do research to find out?
Or is the answer as obvious as for construction workers?</p>

<p>In order to give you enough confidence, automated tests must not only be
written and committed to a repository, but they must be automatically executed
before every change you try to make to the trunk. You must be able
to run them after every change you make locally, while incrementally developing the code.
Then, you must know that even if you accidentally forget to run them locally
and send your branch to the trunk for merging, the automated merge pipeline
will catch you.</p>

<p>The more time and effort you invest into making your safety net strong,
that is, the better your tests cover your code, then the more <em>productive</em> your
work will be, the safer you will feel in introducing new features or fixing bugs.
Simply put, you will code <em>faster</em> and <em>better</em>. Just because you know that
you can’t break what you did yesterday.</p>

<p>The first thing you do when you start a new software project is
implement a safety net: you automate the build pipeline and you create
a few simple automated tests. You make sure they protect you. Only then do you
start writing code. Ask construction workers: are they allowed to start a workday
without a safety net? Obviously not. I’m sure it’s even illegal. The same
must be true for us programmers: coding without the safety net of automated tests
must be illegal.</p>

<p>When a bug is reported to you by your customers, this should mean
that the safety net has a <em>hole</em>. It is not tight enough, that’s why the bug
fell down on the head of your customer. What do you do before you fix the bug?
You fix the safety net. You add more automated tests, which will catch this
bug in the future. Only then do you fix the bug.</p>

<p>I believe that the safety net of a software project is its most valuable asset.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html"><![CDATA[Modifying the source code and knowing that there are no automated tests in place is similar to working at height and knowing that a single mistake could cost you your life.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/safety-net.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/safety-net.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Principle of One</title><link href="https://www.yegor256.com/2022/06/14/principle-of-one.html" rel="alternate" type="text/html" title="The Principle of One" /><published>2022-06-14T00:00:00+00:00</published><updated>2022-06-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/06/14/principle-of-one</id><content type="html" xml:base="https://www.yegor256.com/2022/06/14/principle-of-one.html"><![CDATA[<p>When I make a slide deck for a new presentation, invent a new domain name, think about
a name for a new Java class, itemize bullet points in an academic paper, even
write an email—I try to follow a simple principle which helps me make
my content more solid. Well, at least I believe it does. Maybe it will help you as well.
The principle is simple: at all costs, try to squeeze the content into
<em>one</em> word, <em>one</em> sentence, <em>one</em> paragraph, or <em>one</em> page.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="True Story (2021) by Eric Newman" src="/images/2022/06/true-story.jpg" longdesc="#f816eca5" /><figcaption id="f816eca5">True Story (2021) by Eric Newman</figcaption></figure>

<p>A more formal definition of the principle would be this:
it’s either one word/sentence/paragraph/page <em>or</em> way more.
Let’s see an example. Say I need to list my plans for tomorrow:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- write a new article
- send an email to my boss
- cook a dinner
- take a nap
</code></pre></div></div>

<p>Do any of them need to be longer than one word? Not really. “Take a nap”
is just three words, as is “cook a dinner”. On the one hand, three might not be considered
“way more” than one. On the other, they could be shortened without
any loss of meaning. Thus, I have to decide whether to make them all <em>much</em>
longer than one word or shorten them all to a single one.
The second choice is always preferable:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- article
- email
- dinner
- nap
</code></pre></div></div>

<p>I wrote about <a href="/2015/01/12/compound-name-is-code-smell.html">compound variable names</a>
in an earlier post: the same principle is applicable
to them. Variables must either be nouns without any other words around them,
or use many more words, which is an exceptional situation.</p>

<p>In another <a href="/2016/03/08/pimp-up-your-resume.html">blog post about resumes</a>
I mentioned that a good CV must take exactly one page.
If it’s more, it should be many more. But definitely not two
or three pages.</p>

<p>I suggest applying this principle to every piece of content
you write: try to squeeze it into <em>one</em>.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html"><![CDATA[The principle is simple: a piece of text must either consist of a single word or many more, but nothing in the middle.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/true-story.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/true-story.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reflection Means Hidden Coupling</title><link href="https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling.html" rel="alternate" type="text/html" title="Reflection Means Hidden Coupling" /><published>2022-06-05T00:00:00+00:00</published><updated>2022-06-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling</id><content type="html" xml:base="https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling.html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Reflective_programming">Reflective programming</a> (or reflection) happens
when your code changes itself on the fly. For example, a method of a class, when we call it,
among other things adds a new method to the class
(also known as <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey patching</a>). 
Java, Python, PHP, JavaScript, you name it—they
all have this “powerful” feature. What’s 
<a href="https://softwareengineering.stackexchange.com/questions/193526">wrong</a> with it? 
Well, it’s 
<a href="https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/">slow</a>, 
<a href="https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection">dangerous</a>,
and hard to read and debug.
But all that is nothing compared with the <em>coupling</em> it introduces to the code.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Wheelman (2017) by Jeremy Rush" src="/images/2022/02/wheelman.jpg" longdesc="#18fe7bad" /><figcaption id="18fe7bad">Wheelman (2017) by Jeremy Rush</figcaption></figure>

<p>There are many situations when reflection can “help” you.
Let’s go through all of them and see why the coupling they add to the code is
unnecessary and harmful.</p>

<h2 id="type-checking-and-casting">Type Checking and Casting</h2>

<p>Here is the code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sizeOf</span><span class="o">(</span><span class="nc">Iterable</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">((</span><span class="nc">Collection</span><span class="o">)</span> <span class="n">items</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>I’m not sure everybody would agree that this is reflection, but I believe
it is: we check the structure of the class at runtime and then make
a call to the method <code class="highlighter-rouge">size()</code> which doesn’t exist in the <code class="highlighter-rouge">Iterable</code>. This method only
“shows up” at runtime, when we make
a <a href="https://stackoverflow.com/questions/19017258">dynamic shortcut</a>
to it in the bytecode.</p>

<p>Why is this bad, aside from the fact that
1) it’s <a href="http://www.buzdin.lv/2011/01/is-java-reflection-really-slow.html">slow</a>,
2) it’s more verbose and so <a href="https://armedia.com/blog/instanceof-avoid-in-code/">less readable</a>,
and
3) it introduces a new point of failure since the object <code class="highlighter-rouge">items</code> may not be
an instance of class <code class="highlighter-rouge">Collection</code>,
leading to <a href="https://docs.oracle.com/javaee/5/api/javax/el/MethodNotFoundException.html"><code class="highlighter-rouge">MethodNotFoundException</code></a>?</p>

<p>The biggest problem the code above causes to the entire program is the coupling
it introduces between itself and its clients, for example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">calc</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sizeOf</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The size is "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This method may work or it may not. It will depend on the actual class of <code class="highlighter-rouge">list</code>. If it is
<code class="highlighter-rouge">Collection</code>, the call to <code class="highlighter-rouge">sizeOf</code> will succeed. Otherwise, there will be a runtime failure.
By looking at the method <code class="highlighter-rouge">calc</code> we can’t tell what is the right way to handle <code class="highlighter-rouge">list</code> in order
to avoid runtime failure. We need to read the body of <code class="highlighter-rouge">sizeOf</code> and only then can we change <code class="highlighter-rouge">calc</code>
to something like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">calc</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="k">instanceof</span> <span class="nc">Collection</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sizeOf</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The size is "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The size is unknown"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This code seems to be OK so far. However, what will happen when <code class="highlighter-rouge">sizeOf</code> changes its implementation
to something like this (I took it from
<a href="/2015/04/02/class-casting-is-anti-pattern.html">this article</a>
about casting):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sizeOf</span><span class="o">(</span><span class="nc">Iterable</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">items</span> <span class="k">instanceof</span> <span class="nc">Collection</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">size</span> <span class="o">=</span> <span class="o">((</span><span class="nc">Collection</span><span class="o">)</span> <span class="n">items</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Object</span> <span class="n">item</span> <span class="o">:</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
      <span class="o">++</span><span class="n">size</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now, <code class="highlighter-rouge">sizeOf</code> perfectly handles any type that’s coming in, whether it’s an instance
of <code class="highlighter-rouge">Collection</code> or not. However, the method <code class="highlighter-rouge">calc</code> doesn’t know about the changes made in the method <code class="highlighter-rouge">sizeOf</code>.
Instead, it still believes that <code class="highlighter-rouge">sizeOf</code> will break if it gets anything aside from <code class="highlighter-rouge">Collection</code>.
To keep them in sync we have to remember that <code class="highlighter-rouge">calc</code> knows too much about <code class="highlighter-rouge">sizeOf</code>  and will
have to modify it when <code class="highlighter-rouge">sizeOf</code> changes. Thus, it’s valid to say that <code class="highlighter-rouge">calc</code> is
coupled with <code class="highlighter-rouge">sizeOf</code> and this coupling is <em>hidden</em>:
most probably, we will forget to modify <code class="highlighter-rouge">calc</code> when <code class="highlighter-rouge">sizeOf</code> gets a better implementation.
Moreover, there could be many other places in the program similar to <code class="highlighter-rouge">calc</code>,
which we must remember to modify when the method <code class="highlighter-rouge">sizeOf</code> changes.
Obviously, we will forget about most of them.</p>

<p>This coupling, which is a big maintainability issue, was introduced thanks to the
very existence of reflection in Java. If we had not been able to use <code class="highlighter-rouge">instanceof</code> operator
and class casting (or did not even have them), the coupling would not be possible in the first place.</p>

<h2 id="forceful-testing">Forceful Testing</h2>

<p>Consider this code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">author</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="nc">Book</span><span class="o">(</span><span class="nc">String</span> <span class="n">a</span><span class="o">,</span> <span class="nc">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
      <span class="s">"The book is: "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">+</span> <span class="s">" by "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">author</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>How would you write a unit test for this class and for its method <code class="highlighter-rouge">print()</code>?
Obviously, it’s almost impossible without refactoring the class.
The method <code class="highlighter-rouge">print</code> sends text to the console, which we can’t easily mock
since it’s “static.” The right way would be to make <code class="highlighter-rouge">System.out</code> injectable
as a dependency, but some of us
<a href="https://stackoverflow.com/questions/34571">believe</a> that reflection is a better option,
which would allow us to test the private method <code class="highlighter-rouge">name</code> directly, without
calling <code class="highlighter-rouge">print</code> first:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BookTest</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">testNamingWorks</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Book</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">(</span>
      <span class="s">"David West"</span><span class="o">,</span> <span class="s">"Object Thinking"</span>
    <span class="o">);</span>
    <span class="nc">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
    <span class="n">m</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span>
      <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">m</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">book</span><span class="o">),</span>
      <span class="n">equalTo</span><span class="o">(</span><span class="s">"Object Thinking by David West"</span><span class="o">)</span>
    <span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>You can also use <a href="https://github.com/powermock/powermock">PowerMock</a> Java library
to do many “beautiful” things with private methods.</p>

<p>The problem with this test is that it is tightly coupled with the object it
tests: the test <em>knows</em> too much about the class <code class="highlighter-rouge">Book</code>. The test knows that the
class contains a private method <code class="highlighter-rouge">name</code>. The test also knows that the method <code class="highlighter-rouge">name</code>
will at some point be called by the method <code class="highlighter-rouge">print</code>. Instead of testing <code class="highlighter-rouge">print</code>
the test tests what it’s not supposed to be aware of: the internals of the class <code class="highlighter-rouge">Book</code>.</p>

<p>The main purpose of a unit test is to be a “safety net” for us
programmers trying to modify the code that was written earlier or much much earlier:
if we break anything, the tests give us a timely signal, “highlighting” the place
where the code was broken. If nothing is highlighted and the tests are green
I can continue modifying the code. I rely on the information from my tests. I trust them.</p>

<p>I take the class <code class="highlighter-rouge">Book</code> and want to modify it, simply making the method <code class="highlighter-rouge">name</code>
return <code class="highlighter-rouge">StringBuilder</code> instead of <code class="highlighter-rouge">String</code>. It’s a pretty
innocent modification, which may be necessary for performance considerations.
Before I start making any changes, I run all tests
(it’s a <a href="https://wiki.c2.com/?TestEveryRefactoring">good practice</a>) and they all pass.
Then I make my changes, expecting no tests to fail:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
  <span class="c1">// ...</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
      <span class="s">"The book is: "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span>
    <span class="o">);</span>
  <span class="o">}</span>
  <span class="kd">private</span> <span class="nc">StringBuilder</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">()</span>
      <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">)</span>
      <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" by "</span><span class="o">)</span>
      <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">author</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>However, the test <code class="highlighter-rouge">BookTest</code> will fail, because it <em>expects</em> my class <code class="highlighter-rouge">Book</code> to have
method <code class="highlighter-rouge">name</code> which returns <code class="highlighter-rouge">String</code>. If it’s not my test or I wrote it a long time ago,
I would be frustrated to learn this fact: the test expects me to write my <em>private</em> methods
only one specific way. Why? What’s wrong with returning <code class="highlighter-rouge">StringBuilder</code>? I would think
that there is some hidden reason for this. Otherwise, why would a test demand anything
from a private implementation of a class? Very soon, after some investigation I would
find out that there is no reason. It’s just an assumption the test made about the
internals of <code class="highlighter-rouge">Book</code> and this assumption has no reasons aside from “We didn’t have time
to refactor the class and make <code class="highlighter-rouge">System.out</code> injectable.”</p>

<p>By the way, this testing approach is
<a href="/2018/12/11/unit-testing-anti-patterns.html">known</a>
as the “Inspector” test anti-pattern.</p>

<p>What would I do next? I would have to roll back my changes and then start refactoring
the test <em>and</em> the class, in order to get rid of this assumption. However, changing the
test and at the same time changing main code is,
<a href="https://twitter.com/yegor256/status/1525758255225528320">I believe</a>,
a <a href="https://stackoverflow.com/questions/1569168">dangerous practice</a>:
most probably I will introduce some new bugs.</p>

<p>The tests are not a “safety net” for me anymore. I can’t trust them.
I modify the code and I know that I didn’t break anything.
However, the test gives me a red signal.
How can I trust it if it lies in such a simple scenario?</p>

<p>This coupling between the unit test <code class="highlighter-rouge">BookTest</code> and the class <code class="highlighter-rouge">Book</code>
would not happen if it was not possible to use reflection in the first place.
If nobody had the ability to reach the private method in any way,
the Inspector anti-pattern in unit tests would not be possible.</p>

<p><a href="/2017/02/07/private-method-is-new-class.html">Of course</a>,
life would be even better if we also didn’t have private methods.</p>

<h2 id="factories">Factories</h2>

<p>Here is how a typical <a href="/2017/11/14/static-factory-methods.html">factory</a>
may work:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Operator</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="nf">calc</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">// This is a Factory Method:</span>
<span class="nc">Operator</span> <span class="nf">make</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"Op"</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The <a href="/2017/11/14/static-factory-methods.html">factory method</a>
is <code class="highlighter-rouge">make</code>. It expects the name of the “operator” to be provided
and then,
using <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-"><code class="highlighter-rouge">Class.forName()</code></a>
from the Java Reflection API, constructs the name of the class, finds it in the
<a href="https://docs.oracle.com/javase/tutorial/essential/environment/paths.html">classpath</a>,
and makes an instance of it. Now, say there are two classes both implementing the
interface <code class="highlighter-rouge">Operator</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OpPlus</span> <span class="kd">implements</span> <span class="nc">Operator</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="nf">calc</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">OpMinus</span> <span class="kd">implements</span> <span class="nc">Operator</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="nf">calc</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then we use them, first asking our factory method to make objects from
operator names:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">make</span><span class="o">(</span><span class="s">"Plus"</span><span class="o">).</span><span class="na">calc</span><span class="o">(</span>
  <span class="n">make</span><span class="o">(</span><span class="s">"Minus"</span><span class="o">).</span><span class="na">calc</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span>
  <span class="n">make</span><span class="o">(</span><span class="s">"Minus"</span><span class="o">).</span><span class="na">calc</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">)</span>
<span class="o">);</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">result</code> will be 13.</p>

<p>We would not be able to do this without reflection. We would have to do this
instead:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OpPlus</span><span class="o">().</span><span class="na">calc</span><span class="o">(</span>
  <span class="k">new</span> <span class="nf">OpMinus</span><span class="o">().</span><span class="na">calc</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span>
  <span class="k">new</span> <span class="nf">OpMinus</span><span class="o">().</span><span class="na">calc</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">)</span>
<span class="o">);</span>
</code></pre></div></div>

<p>If you ask me, this code looks much more readable and maintainable.
First of all, because in any IDE that enables
<a href="https://www.jetbrains.com/help/idea/navigating-through-the-source-code.html#go_to_declaration">code navigation</a>
it would be possible to click on <code class="highlighter-rouge">OpMinus</code> or <code class="highlighter-rouge">OpPlus</code> and immediately
jump to the body of the class. Second, the logic of class finding
is provided out-of-the-box by JVM: I don’t need to guess what happens when
<code class="highlighter-rouge">make("Plus")</code> is called.</p>

<p>There are a few reasons why people love static factories. I don’t agree with them.
This <a href="/2017/11/14/static-factory-methods.html">blog post</a>
explains why. Without reflection it wouldn’t be possible to
have static factories at all and the code would be better and more maintainable.</p>

<h2 id="annotations">Annotations</h2>

<p>In Java you can attach an annotation
(an instance of a <a href="/2016/07/06/data-transfer-object.html">DTO</a>-ish interface)
to a class (or an element of it like a method or an argument).
The information from the annotation can then be read at runtime or compile time.
In modern frameworks like <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html">Spring</a>
this feature is frequently used in order
to automate <a href="https://stackoverflow.com/questions/19414734">objects wiring</a>:
you just attach some annotations to your classes
and the framework will find them, instantiate them, place them into a
<a href="/2014/10/03/di-containers-are-evil.html">DI container</a>,
and assign to other objects’ attributes.</p>

<p>I’ve <a href="/2014/10/03/di-containers-are-evil.html">said it earlier</a>
that this very mechanism of discovering objects and <em>automatically</em>
wiring them together is an anti-pattern. I’ve also
<a href="/2016/04/12/java-annotations-are-evil.html">said earlier</a>
that annotations are an anti-pattern.
Neither dependency injection containers, not auto-wiring, nor annotations
would exist if there was no reflection. Life would be much better
and Java/OOP much cleaner.</p>

<p>The clients of annotated objects/classes are coupled with them, and
this coupling is <em>hidden</em>. An annotated object can change its interface or
modify annotations and the code will compile just fine. The problem will
surface only later at runtime, when the expectations of other objects
won’t be satisfied.</p>

<h2 id="serialization">Serialization</h2>

<p>When programmers don’t understand
<a href="/2016/08/15/what-is-wrong-object-oriented-programming.html">object-oriented paradigm</a>,
they make <a href="/2016/07/06/data-transfer-object.html">DTOs</a> instead of
<a href="/2016/07/14/who-is-object.html">proper objects</a>.
Then, in order to transfer a DTO over a network or save it to a file, they
<a href="https://en.wikipedia.org/wiki/Serialization">serialize</a> or
<a href="https://en.wikipedia.org/wiki/Marshalling_%28computer_science%29">marshall</a> them.
It’s usually done by a special serialization engine, which takes a DTO,
<a href="http://erights.org/data/serial/jhu-paper/intro.html">breaks</a>
all possible encapsulation barriers,
reads the values of all of its fields,
and packages them into, say, a piece of JSON.</p>

<p>In order to let the serialization engine break encapsulation barriers, a programming
language has to have reflection. First, because some fields of a DTO may be private
and thus accessible only through reflection.
Second, even if a DTO is designed “right” with all necessary
<a href="/2014/09/16/getters-and-setters-are-evil.html">getters</a>
for the private fields, still reflection is required in order to understand
which getters are present and can be called.</p>

<p>The attitude serialization expresses towards objects is very similar to what
<a href="/2014/12/01/orm-offensive-anti-pattern.html">ORM</a> does. Neither of them
talk to objects, but instead they pretty “offensively” tear them apart, taking away
what’s necessary, and leaving the poor objects unconscious. If in the future an
object decides to change its structure, rename some fields, or change the types
of returned values—other objects, which actually are coupled with the object through
serialization, won’t notice anything. They will notice, but only at runtime,
when “invalid data format” exceptions start floating up. The developers
of the object won’t have a chance to notice that their changes to the interface
of the object affect some other places in the code base.</p>

<p>We can say that serialization is a “perfect” method of coupling two objects
such that neither one will know about it.</p>

<p>The <a href="/2016/07/14/who-is-object.html">very idea</a>
of object-oriented programming is centered around the principle
that an object is king. An object and only an object may decide what
to do with the data it encapsulates. The existence of this principle and adherence
to it helps avoid runtime errors usually caused by a simple scenario:
A uses the data coming from B without telling B how it’s being used,
then B changes the format or semantics of the data, and A fails to understand it.</p>

<p>Obviously, serialization in such an “abusive” way would not be possible,
if there was no reflection in the first place. A more careful serialization
would be possible and would be used, not through reflection but via
<a href="/2016/04/05/printers-instead-of-getters.html">printers</a>
implemented by objects.</p>

<hr />

<p>To conclude, reflection introduces coupling, which is hidden. This is the
most dangerous type of coupling, because it’s hard to follow, it’s hard to find,
and it’s hard to remove. Without reflection object-oriented design would be
much cleaner and solid. But even if this feature does exist,
I suggest you never use reflection in your programming language.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Do you use reflective programming (reflection)?</p>&mdash; Yegor Bugayenko (@yegor256) <a href="https://twitter.com/yegor256/status/1535919879886446592?ref_src=twsrc%5Etfw">June 12, 2022</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html"><![CDATA[Reflection in object-oriented programming languages like Java is a powerful technique, but a very dangerous and harmful one.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/02/wheelman.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/02/wheelman.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>