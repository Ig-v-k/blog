<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2020-12-22T07:17:14+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Self-Managing vs. Manager-Free Organizations</title><link href="https://www.yegor256.com/2020/12/22/self-managing-orgs.html" rel="alternate" type="text/html" title="Self-Managing vs. Manager-Free Organizations" /><published>2020-12-22T00:00:00+00:00</published><updated>2020-12-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/12/22/self-managing-orgs</id><content type="html" xml:base="https://www.yegor256.com/2020/12/22/self-managing-orgs.html">&lt;p&gt;We are in trouble. On the one hand, most managers are weak and incompetent.
Their mistakes destroy our &lt;a href=&quot;/2017/09/19/what-motivates-me.html&quot;&gt;motivation&lt;/a&gt;,
decrease productivity, and lead to business failures.
As a result, many of us believe that managers are evil.
On the other hand, there is a new idea that self-managing organizations are
the future. Its proponents are trying to convince us that chaos is
better than management mistakes. They want us to believe that subordination,
hierarchy, &lt;a href=&quot;/2016/09/27/command-control-innovate.html&quot;&gt;control&lt;/a&gt;,
and order are new bad words to be prohibited in a respectful society.
We must stop them!&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Loro (2018) by Paolo Sorrentino&quot; src=&quot;/images/2020/12/loro.jpg&quot; longdesc=&quot;#21fff271&quot; /&gt;&lt;figcaption id=&quot;21fff271&quot;&gt;Loro (2018) by Paolo Sorrentino&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Self-managing organization are, as some researchers
&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S0191308517300059&quot;&gt;believe&lt;/a&gt;,
post-bureaucratic, humanistic, democratic, and even
&lt;a href=&quot;/2016/02/18/holacracy-autocracy.html&quot;&gt;holacratic&lt;/a&gt;.
&lt;a href=&quot;https://frankmartela.com/about-the-author/&quot;&gt;Frank Martela&lt;/a&gt;
&lt;a href=&quot;https://jorgdesign.springeropen.com/articles/10.1186/s41469-019-0062-9&quot;&gt;says&lt;/a&gt;
that self-management is “an &lt;em&gt;ideal&lt;/em&gt; type of organizational form.”
The idea is trendy, especially after the publication
of &lt;a href=&quot;https://amzn.to/3mgxt7k&quot;&gt;Reinventing Organizations&lt;/a&gt; by Frederic Laloux.
However, “calling it a novel phenomenon is utter nonsense,”
&lt;a href=&quot;https://corporate-rebels.com/reinventing-the-wheel/&quot;&gt;according&lt;/a&gt; to
&lt;a href=&quot;https://twitter.com/joost_minnaar&quot;&gt;Joost Minnaar&lt;/a&gt;—the idea has been known for decades.&lt;/p&gt;

&lt;p&gt;My first question is: what exactly was wrong with
bureaucratic, un-humanistic, and non-democratic management?
&lt;a href=&quot;https://en.wikipedia.org/wiki/James_R._Barker&quot;&gt;James R. Barker&lt;/a&gt;
made it clear &lt;a href=&quot;https://www.jstor.org/stable/pdf/2393374.pdf&quot;&gt;a long time ago&lt;/a&gt;:
“workers in a self-managing team will experience day-to-day work life in vastly
different ways than workers in a traditional management system. Instead
of being told what to do by a supervisor, self-managing workers must
gather and synthesize information, act on it, and take collective
responsibility for those actions.”&lt;/p&gt;

&lt;p&gt;Sounds &lt;a href=&quot;https://medium.com/culturati/2f23c298c79b&quot;&gt;very attractive&lt;/a&gt;.
Nobody tells us what to do anymore! We just look around,
gather information, synthesize more information, and “act!” (whatever that means).
Of course, we must not forget that money somehow arrives in our bank accounts
every two weeks—this component of the old un-humanistic bureaucratic management model
we don’t want to get rid of, I believe. Right, Mr. Barker?&lt;/p&gt;

&lt;p&gt;Seriously, who in a self-managing organization makes these decisions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An employee asks for a raise&lt;/li&gt;
  &lt;li&gt;An employee gets lazy and must be fired&lt;/li&gt;
  &lt;li&gt;An employee needs a budget for a new project&lt;/li&gt;
  &lt;li&gt;A project must be terminated&lt;/li&gt;
  &lt;li&gt;A new employee needs to be hired&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply put, who resolves monetary and performance appraisal conflicts, and how?
All together by “raising their thumb”
as &lt;a href=&quot;https://medium.com/percolab-droplets/generative-decision-making-process-cf0b131c5ac4&quot;&gt;Generative Decision Making&lt;/a&gt; suggests?
Thumb-raising will work for low-caliber questions like which
kind of coffee we should order for the office next week or what the
best color is for our new t-shirts. However, more important strategic decisions
may only be made by those who are ready to pay for mistakes: managers.&lt;/p&gt;

&lt;p&gt;In a traditional hierarchical organization, everybody has a manager, who
is responsible for answering these questions. This is what managers are for:
to concentrate authority and responsibility. This is what levels of management
are for: to decompose larger authority and responsibility into
smaller pieces, delegating them to lower-level personnel. I believe, I don’t need
to explain this essential wisdom: it’s the fundamentals of management.
Right, &lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Drucker&quot;&gt;Mr. Drucker&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;However, despite the feeling that self-management adepts are not practitioners but
liberal propagandists (trying to declare freedom to everybody without giving
any practically possible scenarios),
there is one idea I do share with them: managers are evil.
Pay attention: managers, not management! There is a big difference.&lt;/p&gt;

&lt;p&gt;Let’s get back to the problem definition once again: We don’t like being
told what to do. However, is this really the problem or is there something deeper
that we are missing? Let’s see, what are the most popular issues with management that people
complain about (I got them from
&lt;a href=&quot;https://www.inc.com/marcel-schwantes/8-mistakes-managers-make-according-to-their-employees.html&quot;&gt;Inc&lt;/a&gt;
and
&lt;a href=&quot;https://www.monster.co.uk/advertise-a-job/hr-resources/workforce-management-and-planning/management-skills/what-are-the-most-common-management-mistakes/&quot;&gt;Monster&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They micromanage&lt;/li&gt;
  &lt;li&gt;They don’t listen&lt;/li&gt;
  &lt;li&gt;They don’t value us&lt;/li&gt;
  &lt;li&gt;They don’t provide feedback&lt;/li&gt;
  &lt;li&gt;They don’t motivate&lt;/li&gt;
  &lt;li&gt;They don’t set goals&lt;/li&gt;
  &lt;li&gt;They don’t delegate&lt;/li&gt;
  &lt;li&gt;They don’t explain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list may be much longer, but I think that the root cause of all of them
is the same: managers make &lt;em&gt;appraisal mistakes&lt;/em&gt;. As all other people, managers
can’t always be objective. Instead, they are very biased and subjective. We say that they
don’t listen. This is our perception. They do listen, but they don’t
appraise us right, based on the information we deliver. They do listen, but they
don’t call us genius. What do we say? They don’t listen! They don’t motivate, we say, but
in reality they just don’t give us what we think we deserve. They don’t value us?
The same story: we just feel unappreciated. We feel they micromanage? They just
don’t appreciate the results we deliver without micromanagement, we stop
delivering anything, and they resort to micromanagement.
The root cause always is the same: appraisal mistakes.&lt;/p&gt;

&lt;p&gt;What can we do to fix this?
We should take the appraisal job away from managers! This is how we solve the problem.
People must not decide whose performance is better, because they can’t do it
right and this leads to all the other problems. If managers stop appraising us,
they will turn into leaders, mentors, teachers, experts, gurus, decision makers,
and everybody else, who we don’t hate. We hate &lt;em&gt;appraisers&lt;/em&gt;, because they make
mistakes about our performance and kill our motivation. We won’t hate them
at all, if there is a &lt;em&gt;system&lt;/em&gt;, which is based on
&lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;&lt;em&gt;metrics&lt;/em&gt;&lt;/a&gt;,
which judge our results.&lt;/p&gt;

&lt;p&gt;What self-managing adepts are offering is to destroy the entire management
system and replace it with chaos (or something very close to it).
They seem to not understand where the real problem is. They just don’t like
“being told what to do” and to fix this they suggest getting rid
of what our civilization has been building for thousands of years:
responsibility delegation through subordination (aka “management”).
They meet incompetent management that doesn’t appreciate them enough and
start crying and blaming everybody with the word “manager” in their job titles.
In other words, to cure the tumor they want to kill the patient.&lt;/p&gt;

&lt;p&gt;Let me reiterate: The evolution of management is needed! We are not happy
with what we have now: most managers are incompetent. However, the solution is not
self-managing but manager-less organizations. We need objective metrics,
automated &lt;a href=&quot;/2018/03/21/zerocracy-announcement.html&quot;&gt;tools&lt;/a&gt; (maybe with AI) to replace
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;managers&lt;/a&gt;
as our appraisers.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">We are in trouble. On the one hand, most managers are weak and incompetent. Their mistakes destroy our motivation, decrease productivity, and lead to business failures. As a result, many of us believe that managers are evil. On the other hand, there is a new idea that self-managing organizations are the future. Its proponents are trying to convince us that chaos is better than management mistakes. They want us to believe that subordination, hierarchy, control, and order are new bad words to be prohibited in a respectful society. We must stop them!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/12/loro.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/12/loro.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Abstract Objects</title><link href="https://www.yegor256.com/2020/12/01/abstract-objects.html" rel="alternate" type="text/html" title="Abstract Objects" /><published>2020-12-01T00:00:00+00:00</published><updated>2020-12-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/12/01/abstract-objects</id><content type="html" xml:base="https://www.yegor256.com/2020/12/01/abstract-objects.html">&lt;p&gt;How do you create objects in your object-oriented language?
Let’s take something classic, like C++, Java, or C#. First you define
a class, and then you make an instance of it. The first step is known
as &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_%28computer_science%29&quot;&gt;abstraction&lt;/a&gt;,
and the second one as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Instance_%28computer_science%29#Object_oriented_programming&quot;&gt;instantiation&lt;/a&gt;.
A similar pair of operations
exist in functional programming: declaring a function is
abstraction,
while calling it with specific arguments is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Apply&quot;&gt;application&lt;/a&gt;.
The &lt;a href=&quot;/2016/09/20/oop-without-classes.html&quot;&gt;question is&lt;/a&gt;:
why does OOP need classes &lt;em&gt;and&lt;/em&gt; objects,
while FP survives with just functions?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Irishman (2019) by Martin Scorsese&quot; src=&quot;/images/2020/12/the-irishman.jpg&quot; longdesc=&quot;#79e00810&quot; /&gt;&lt;figcaption id=&quot;79e00810&quot;&gt;The Irishman (2019) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is an &lt;em&gt;abstract&lt;/em&gt; object in &lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[id db] &amp;gt; book
  db.query &amp;gt; title
    &quot;SELECT title FROM book WHERE id=?&quot;
    id&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The name of the object is &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt;. It has three
&lt;a href=&quot;/2020/11/24/objects-without-methods.html&quot;&gt;attributes&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;.
The first two are “free”: they are not bound to any objects yet. The third
one &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; is bound already to a copy of the object &lt;code class=&quot;highlighter-rouge&quot;&gt;db.query&lt;/code&gt;. The object
&lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; is abstract because it has some free attributes—it’s not specific
enough to refer to a specific entity in the real world.&lt;/p&gt;

&lt;p&gt;The construct &lt;code class=&quot;highlighter-rouge&quot;&gt;db.query&lt;/code&gt; takes an abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt; from the object
bound to the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; and makes a copy of it, specifying two
arguments: the SQL string and the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;. The process of copying an abstract
object is called “application,” since it’s very similar to applying
arguments to a function in FP.&lt;/p&gt;

&lt;p&gt;The right way to use an abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; is to make a copy of it, specifying
the arguments:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;book 42 mysql &amp;gt; b&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is
a new object—a copy of the &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt;. In 𝜑-calculus, which is foundational
to the EO programming language, this would be written as the following
formula:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;b ↤ book(42, mysql)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;, we just do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;b.title &amp;gt; t&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also put it all together in one line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(book 42 mysql).title &amp;gt; t&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s possible to apply some arguments to an abstract object leaving
other attributes still free. For example, this would make
another abstract object, still requiring the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; to be specified
in order to become a &lt;em&gt;closed&lt;/em&gt; object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;book mysql:db &amp;gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The suffix &lt;code class=&quot;highlighter-rouge&quot;&gt;:db&lt;/code&gt; helps the compiler understand which free
attribute should be bound to the object &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt;.
Later, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; can be copied again and a closed object &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will be created:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;x 42 &amp;gt; b&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even though the syntax of EO makes it possible to say &lt;code class=&quot;highlighter-rouge&quot;&gt;book.title&lt;/code&gt;,
it will lead to a compile-time error: It’s prohibited to touch
free attributes of an abstract object or attributes that depend
on other free attributes. However, let’s say we add a new attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt;, in order to print it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; to the console we would do the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[id db] &amp;gt; book
  stdout &amp;gt; print
    sprintf
      &quot;The book ID is %d&quot;
      id
  db.query &amp;gt; title
    &quot;SELECT title FROM book WHERE id=?&quot;
    id&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; doesn’t need the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; attribute to be bound, since it
doesn’t use it. It’s possible to copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; with just &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; and
then call &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; (assuming it’s happening in an EO interactive console):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ book 42:id &amp;gt; x
x
$ x.print
The book ID is 42&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By the way, do you know any other languages with abstract objects or
is EO the first one to introduce this design?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="eolang" /><summary type="html">How do you create objects in your object-oriented language? Let’s take something classic, like C++, Java, or C#. First you define a class, and then you make an instance of it. The first step is known as abstraction, and the second one as instantiation. A similar pair of operations exist in functional programming: declaring a function is abstraction, while calling it with specific arguments is application. The question is: why does OOP need classes and objects, while FP survives with just functions?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/12/the-irishman.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/12/the-irishman.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Objects Without Methods</title><link href="https://www.yegor256.com/2020/11/24/objects-without-methods.html" rel="alternate" type="text/html" title="Objects Without Methods" /><published>2020-11-24T00:00:00+00:00</published><updated>2020-11-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/24/objects-without-methods</id><content type="html" xml:base="https://www.yegor256.com/2020/11/24/objects-without-methods.html">&lt;p&gt;What do you think an object is in OOP? No matter what language you are
programming with, you will most probably agree with Bruce Eckel,
the author of &lt;a href=&quot;https://amzn.to/3pRHv1Q&quot;&gt;Thinking in Java&lt;/a&gt;, who said that “each object has a state
and operations that you can ask it to perform,” or
Benjamin Evans, the author of &lt;a href=&quot;https://amzn.to/35uKVPU&quot;&gt;Java in a Nutshell&lt;/a&gt;, who claimed that it is
“a collection of data fields that hold values and methods that operate on those values.”
However, hold on… What if I told you that an object may have no “operations”
and still be a perfect “equivalent of the quanta from which the universe
is constructed,” as David West suggested in his great book
&lt;a href=&quot;https://amzn.to/3kuXHlL&quot;&gt;Object Thinking&lt;/a&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Ballad of Buster Scruggs (2018) by Coen brothers&quot; src=&quot;/images/2020/11/the-ballad-of-buster-scruggs.jpg&quot; longdesc=&quot;#3de3bf2f&quot; /&gt;&lt;figcaption id=&quot;3de3bf2f&quot;&gt;The Ballad of Buster Scruggs (2018) by Coen brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;,
our experimental programming language, we made an attempt to re-define
OOP and its objects. There are two types of &lt;em&gt;things&lt;/em&gt; in EO: atoms and objects.
An atom is the lowest level language primitive, which can’t be expressed by
other atoms. For example, an arithmetic addition of two other objects is an atom
(stay with me, this is EO syntax, you will get used to it):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;add 5 y &amp;gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a more traditional Java-like &lt;a href=&quot;https://en.wikipedia.org/wiki/Infix_notation&quot;&gt;infix notation&lt;/a&gt;
this code would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;x = add(5, y)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The atom is &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; and its two specific
arguments are &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;. This statement creates a new atom, using
the existing one and specifying its arguments. The name of the new atom being
created is &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;. Once we ask this newly created atom to do anything,
it gets what’s in &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;, adds &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, and starts behaving
like a summary of them. Until then, it stays quiet.
EO is a declarative language.&lt;/p&gt;

&lt;p&gt;Atoms are provided by the EO runtime. For example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt;,  and &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; are for arithmetic operations;
&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; are for forking and iterating;
&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;eq&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; are for logical operations, and so on.
Atoms may resemble low-level functions with arguments.
However, they don’t calculate results immediately, but only when needed.
Saying &lt;code class=&quot;highlighter-rouge&quot;&gt;add(5, file)&lt;/code&gt; won’t lead to reading the content
of the file and adding 5 to it immediately. Only when the
created atom is dealt with will the file reading happen.&lt;/p&gt;

&lt;p&gt;Next, on top of these atoms, objects can be created by a programmer.
For example, this is an object that represents a circle:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[r] &amp;gt; circle
  mul 2 3.14 r &amp;gt; perimeter
  mul 3.14 r r &amp;gt; area&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first line creates an “abstract” object named &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt;. It is abstract,
because one of its attributes &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; is “free”. It’s not specified
in this object and that’s why the object can’t be used as is, it has
to be copied with &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; specified. For example, this is the circle &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;
with the radius 30:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;circle 30 &amp;gt; c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt; has three attributes. The first one is &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;, which is free.
The other two are &lt;code class=&quot;highlighter-rouge&quot;&gt;perimeter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;area&lt;/code&gt;. They are “bounded,” since their
atoms are already defined: &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt; in both cases. To get the area of the
circle &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; we do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;c.area &amp;gt; a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like a method call, but it’s not. We don’t call a method, we just
take an &lt;code class=&quot;highlighter-rouge&quot;&gt;area&lt;/code&gt; object from the object &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;. It’s not created for us
at the moment we do &lt;code class=&quot;highlighter-rouge&quot;&gt;c.area&lt;/code&gt;! It has already been there sitting and waiting
for us to take it. It was created right when the object &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; was built.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;We have objects, but we don’t have methods. There are only attributes representing other objects.
&lt;/aside&gt;

&lt;p&gt;This is the difference between methods in Java and attributes in EO.
In Java, every method is a procedure to be executed as soon as it’s
called. This method calling (or message sending, according to
&lt;a href=&quot;/2017/12/12/alan-kay-was-wrong.html&quot;&gt;early OOP adepts&lt;/a&gt;)
mechanism was inherited from C functions,
which itself we inherited from ALGOL procedures, I believe.
EO does it differently. There is no method calling. It just takes attributes out
of objects and gives them to other objects, until control is
passed to them and it gets down to the level of atoms.&lt;/p&gt;

&lt;p&gt;In the example above, the object &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is not a calculated number.
It’s an atom &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt; that encapsulates &lt;code class=&quot;highlighter-rouge&quot;&gt;3.14&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt; (the radius). The
result of the calculation is not yet known. If we don’t do anything
with &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, the CPU will never do the calculation. However, if we decide
to, say, print the number to the console, the calculation will happen:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;stdout
  sprintf
    &quot;Radius is %d, Area is %d&quot;
    r
    a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt; constructs the string, which encapsulates
three attributes: the text, &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;. By the way,
it’s possible to use either vertical or horizontal notation
for constructing objects. The code above may be written like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;stdout (sprintf &quot;Radius is %d, Area is %d&quot; r a)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The atom &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; encapsulates the string constructed by &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;
and stays quiet. It doesn’t print anything! Only when someone
at some point tries to “touch” this object, taking one of
its attributes out, the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; will drop the line to the
console.&lt;/p&gt;

&lt;p&gt;There are no attributes in &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mul&lt;/code&gt;, and most
other atoms, except one: 𝜑.
Any object or atom has this specific attribute, also known as
the “body” of an object. Once someone attempts to touch &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.𝜑&lt;/code&gt;,
the console will see the string.&lt;/p&gt;

&lt;p&gt;Thus, we have objects, but we don’t have methods.
There are only attributes representing other objects.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="eolang" /><summary type="html">What do you think an object is in OOP? No matter what language you are programming with, you will most probably agree with Bruce Eckel, the author of Thinking in Java, who said that “each object has a state and operations that you can ask it to perform,” or Benjamin Evans, the author of Java in a Nutshell, who claimed that it is “a collection of data fields that hold values and methods that operate on those values.” However, hold on… What if I told you that an object may have no “operations” and still be a perfect “equivalent of the quanta from which the universe is constructed,” as David West suggested in his great book Object Thinking?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/11/the-ballad-of-buster-scruggs.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/11/the-ballad-of-buster-scruggs.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Software Quality Award, 2021</title><link href="https://www.yegor256.com/2020/11/15/award-2021.html" rel="alternate" type="text/html" title="Software Quality Award, 2021" /><published>2020-11-15T00:00:00+00:00</published><updated>2020-11-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/15/award-2021</id><content type="html" xml:base="https://www.yegor256.com/2020/11/15/award-2021.html">&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/andreea/quality-award.svg&quot; style=&quot;width:300px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This is the &lt;em&gt;seventh&lt;/em&gt; year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The maximum prize
is still the same—&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;,
&lt;a href=&quot;/2016/10/23/award-2017.html&quot;&gt;2017&lt;/a&gt;,
&lt;a href=&quot;/2017/10/24/award-2018.html&quot;&gt;2018&lt;/a&gt;,
&lt;a href=&quot;/2018/09/30/award-2019.html&quot;&gt;2019&lt;/a&gt;,
&lt;a href=&quot;/2019/11/03/award-2020.html&quot;&gt;2020&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is &lt;a href=&quot;https://docs.google.com/forms/d/1mf0IGryvAhUnIbbhemXPSbIXxE21e190MyQdKuEY_zw&quot;&gt;&lt;strong&gt;the form&lt;/strong&gt;&lt;/a&gt;
to fill out.&lt;/p&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One person can submit only one project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Submissions are accepted until September 1, 2021.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I will check the commit history to make sure you’re the main contributor to the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Results will be announced October 15, 2021 on this page and by email (or maybe a bit later).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The best project will receive $4,096
(I may split this amount among a few projects and may give away a smaller amount!).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Winners that received any cash prizes in previous years can’t submit again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Z70PMGaxGhY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Z70PMGaxGhY/mqdefault.jpg&quot; alt=&quot;YouTube video #Z70PMGaxGhY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;How to win $4096 in the next year Quality Award? (webinar #29);
        1 November 2017.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open source (in GitHub).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least 4,096 lines of code (&lt;a href=&quot;https://www.npmjs.com/package/cloc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cloc&lt;/code&gt;&lt;/a&gt; without any arguments)
&lt;em&gt;and&lt;/em&gt; at least 16,384 &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;hits-of-code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one year old (the age of the first commit).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object-oriented (that’s the only thing I understand).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn’t matter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don’t care about
popularity; quality is the key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it’s still eligible for the award. I don’t care about
your marketing position; quality is all.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="award" /><summary type="html">This is the seventh year of the Software Quality Award. The maximum prize is still the same—$4,096. The rules are still the same. Read on. Previous years are here: 2015, 2016, 2017, 2018, 2019, 2020.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/andreea/quality-award.png" /><media:content medium="image" url="https://www.yegor256.com/images/andreea/quality-award.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Strong Typing without Types</title><link href="https://www.yegor256.com/2020/11/10/typing-without-types.html" rel="alternate" type="text/html" title="Strong Typing without Types" /><published>2020-11-10T00:00:00+00:00</published><updated>2020-11-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/10/typing-without-types</id><content type="html" xml:base="https://www.yegor256.com/2020/11/10/typing-without-types.html">&lt;p&gt;In 1974, Liskov and Zilles &lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/942572.807045&quot;&gt;defined&lt;/a&gt;
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot;&gt;strongly-typed&lt;/a&gt;
language as one in which “whenever an object is passed from
a calling function to a called function, its type must be
compatible with the type declared in the called function.”
Strong &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_system&quot;&gt;type checking&lt;/a&gt;,
without doubt, decreases the amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Type_system#Type_errors&quot;&gt;type errors&lt;/a&gt;,
which leads to higher quality. However, the question is:
do we really need types in order to strongly enforce typing?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Redirected (2014) by Emilis Velyvis&quot; src=&quot;/images/2020/11/redirected.jpg&quot; longdesc=&quot;#8b769c87&quot; /&gt;&lt;figcaption id=&quot;8b769c87&quot;&gt;Redirected (2014) by Emilis Velyvis&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;For example, this is a place where we expect an instance of
Java &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/concepts/interface.html&quot;&gt;interface&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; to arrive:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;The ISBN is: %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The type &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If an object that doesn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;implement&lt;/code&gt; the interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; is passed
to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;, the compiler will complain
with the “type mismatch” error. It will be hard for a programmer to make
a mistake and pass an object of type, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;Car&lt;/code&gt; to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;.
However, it will still be possible, via dynamic type casting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mercedes-Benz G63&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code will compile without issues, but at runtime the
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/ClassCastException.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;&lt;/a&gt;
will be thrown, since it won’t be
possible to cast &lt;code class=&quot;highlighter-rouge&quot;&gt;Car&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The beauty of strong typing is that it prevents errors. However, it increases
the complexity of code: you need to create types first, you need to declare them
in all your functions, you need type casting, which is hard to debug, and so on.
Weak typing &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/38002&quot;&gt;proponents&lt;/a&gt;
complain about this a lot and create languages like Ruby,
which don’t have types at all, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This is ISBN: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; doesn’t expect &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; to be of any
particular type. Whatever comes in—is fine. Later, when it’s
time to call &lt;code class=&quot;highlighter-rouge&quot;&gt;.isbn&lt;/code&gt; the runtime checks whether the
incoming &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; has such a method. If it does, everything works just fine,
if it doesn’t, a runtime error &lt;a href=&quot;https://ruby-doc.org/core-2.5.0/NoMethodError.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt;&lt;/a&gt;
is raised.&lt;/p&gt;

&lt;p&gt;So far so good.&lt;/p&gt;

&lt;p&gt;However, here is the idea: what if we combine the simplicity and brevity
of dynamic typing with the safety of strong typing by getting
rid of types all together and letting the compiler infer type
information from the code that works with the objects? Here is our
code again:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;The ISBN is: %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Think about this: at compile time it’s already obvious that &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; must have
&lt;em&gt;at least&lt;/em&gt; one method &lt;code class=&quot;highlighter-rouge&quot;&gt;isbn()&lt;/code&gt;. No need to force programmers to define
the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; explicitly and mention in the signature of the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;
that only books are welcome: this knowledge can easily be inferred from
the body of the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;! The compiler may look at all statements
in the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; and clearly &lt;em&gt;understand&lt;/em&gt; what exactly will be done
with the object &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. This information should be enough to visualize
the “type” of the incoming object. No need to ask the programmer to
do this explicitly and spend another five lines of code in a new file
to declare the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;. The compiler can do this job for us.&lt;/p&gt;

&lt;p&gt;Of course, to make this work we must prohibit
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;type casting&lt;/a&gt;
of any kind, which is not possible in Java, C++, C# and other
pseudo-object-oriented languages. But it is possible in
&lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;WDYT?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">In 1974, Liskov and Zilles defined a strongly-typed language as one in which “whenever an object is passed from a calling function to a called function, its type must be compatible with the type declared in the called function.” Strong type checking, without doubt, decreases the amount of type errors, which leads to higher quality. However, the question is: do we really need types in order to strongly enforce typing?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/11/redirected.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/11/redirected.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Pain of Daily Reports</title><link href="https://www.yegor256.com/2020/11/03/daily-reports.html" rel="alternate" type="text/html" title="The Pain of Daily Reports" /><published>2020-11-03T00:00:00+00:00</published><updated>2020-11-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/11/03/daily-reports</id><content type="html" xml:base="https://www.yegor256.com/2020/11/03/daily-reports.html">&lt;p&gt;A few days ago I asked
&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=yegor256&quot;&gt;my Twitter&lt;/a&gt;
followers to vote in a
&lt;a href=&quot;https://twitter.com/yegor256/status/1318899898364866560&quot;&gt;simple poll&lt;/a&gt;.
They did, screaming in comments that only a &lt;del&gt;stupid&lt;/del&gt;
incompetent manager would ask programmers to send daily reports,
while everything they do can easily be tracked in tickets, Git history, and so on.
Indeed, why on earth would a sane manager ask software engineers, already very busy with coding,
to spend time on writing these ridiculous reporting emails?
Let me try to give you a good reason.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Norsemen (2017) by Jon Iver Helgaker et al.&quot; src=&quot;/images/2020/11/norsemen.jpg&quot; longdesc=&quot;#e2cead6d&quot; /&gt;&lt;figcaption id=&quot;e2cead6d&quot;&gt;Norsemen (2017) by Jon Iver Helgaker et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I’m sure that in your team
1) every contribution programmers make goes to the source code,
2) each pull request passes a mandatory and strict review process,
and 3) everybody is paid
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;only&lt;/a&gt;
according to the amount of results they contribute.
Of course, thanks to such an objective and fair process, all programmers
are self-disciplined and self-motivated. They know what they work for,
how to achieve better results, and exactly what needs
to be done in order to help the project move forward: all metrics are
right in front of you, and them. By the end
of the month you just open the dashboard, see the numbers and
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;reward&lt;/a&gt;
the best of them.&lt;/p&gt;

&lt;p&gt;Is this how your team works? I doubt it. I was kidding.&lt;/p&gt;

&lt;p&gt;Most probably it works like this:
1) some people occasionally commit some code
while others barely touch the keyboard spending most of their “work time”
sitting in
&lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meetings&lt;/a&gt;
and chatting online,
2) everybody gets paid
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;regularly&lt;/a&gt;,
no matter how much they contribute
and those who don’t do anything get as much as the hard-workers, or even more,
3) code reviews are hardly mandatory and very often dirty code
gets through, just because nobody wants to offend its author
or the review takes too long with no chances to see code improvements,
simply because the author doesn’t care.
I can continue, if you like.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Yj1VFGK9vqc&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Yj1VFGK9vqc/mqdefault.jpg&quot; alt=&quot;YouTube video #Yj1VFGK9vqc&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M143: Daily reports are a perfect guilt-triggering instrument for a lazy team;
        12 November 2020.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Sound familiar?&lt;/p&gt;

&lt;p&gt;In this situation, which is much more popular than the previous
story, how do you, being a
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;manager&lt;/a&gt;,
make people actually work? I’m talking about
those people who don’t work simply because it would be stupid to work
when nobody can control the output and can’t really punish anyone for its
absence. How do you &lt;em&gt;enforce&lt;/em&gt; the discipline in such a team?&lt;/p&gt;

&lt;p&gt;You can, of course, go to the tracking system and check how many
tickets were closed by Jeff during the day. You can also read the
Git history and find out how many lines of code Jeff wrote. Or you can
monitor the dashboard every day to see what tasks assigned
to Jeff were resolved during the week. You can do all that. The question
is—what do you do when you find out that Jeff doesn’t do anything? Or that he
does much less than everybody else? An even bigger question is: what do you do when you
realise that everybody in your team is lazy and does as little as they
can do or nothing at all?&lt;/p&gt;

&lt;p&gt;Sounds weird and has nothing to do with your reality? Really?
Look at &lt;a href=&quot;https://twitter.com/yegor256/status/1322877629024948226&quot;&gt;this&lt;/a&gt; Twitter poll.&lt;/p&gt;

&lt;p&gt;So, what do you do with the team, if you can’t really fire anyone
and you can’t motivate them in any way: they are paid regardless. How do you
discipline them?&lt;/p&gt;

&lt;p&gt;The only possible instrument is &lt;em&gt;guilt&lt;/em&gt;.
I &lt;a href=&quot;/2019/09/03/injection-of-guilt.html&quot;&gt;wrote&lt;/a&gt; about this before.
You have to find a way to make them feel guilty when they get
lazy and deliver less than they could. The most popular way to do
that is &lt;a href=&quot;/2015/01/08/morning-standup-meetings.html&quot;&gt;daily standups&lt;/a&gt;.
You line them up every morning and make them
feel uncomfortable reporting the progress. It works and works well
in so many teams over the world, thanks to the popularity of Agile.
Without these guilt-triggering standups I don’t know where the tech
industry would be.&lt;/p&gt;

&lt;p&gt;Yet another instrument of the same kind is &lt;em&gt;daily reports&lt;/em&gt;. You make your programmers
summarize their work during the day and email you. To make the feeling of guilt
even stronger, ask them to CC a few other people, like their colleagues,
maybe an HR person, maybe someone from another team. Make this list
mandatory. It will be very hard to say in the email that the day
ended and no results were achieved. They will have to make something
up and eventually will start actually doing something.&lt;/p&gt;

&lt;p&gt;Some of them will complain that it’s
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;micromanagement&lt;/a&gt;.
Tell them that you are not interested in how they spend their days, but only
in knowing the results they delivered. Ask them to report only tangible
and visible things, like “ticket closed,” “document created,”
or “the experiment conducted.” In my opinion, this daily reporting
is not micromanagement at all, since you don’t tell them how to achieve
their goals. It may be a fine-grained control mechanism, but there
is nothing wrong with
&lt;a href=&quot;/2018/10/09/can-you-control-us.html&quot;&gt;control&lt;/a&gt;,
in any management paradigm. Thus,
if they go to your supervisor and complain about your actions,
you have a perfect explanation: you just want to know about their
results, that’s all.&lt;/p&gt;

&lt;p&gt;They may say that the information is already
available in the tracking system, but you can say that you prefer
to get it by email, since it’s faster and more convenient for you.
Moreover, how much will such a daily report cost them? Five
minutes every day, right? Not a big deal.&lt;/p&gt;

&lt;p&gt;Don’t tell them about the guilt part, of course.
Let it be your secret.&lt;/p&gt;

&lt;p&gt;The bottom line is that in the absence of proper management, both morning standups and
evening daily reports are the best tools to manage people. What else can you use
to connect their performance directly with guilt mechanisms in
their brains?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Your team leader is asking you to email him every day with a summary of your daily results. Your reaction:&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1318899898364866560?ref_src=twsrc%5Etfw&quot;&gt;October 21, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">A few days ago I asked my Twitter followers to vote in a simple poll. They did, screaming in comments that only a stupid incompetent manager would ask programmers to send daily reports, while everything they do can easily be tracked in tickets, Git history, and so on. Indeed, why on earth would a sane manager ask software engineers, already very busy with coding, to spend time on writing these ridiculous reporting emails? Let me try to give you a good reason.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/11/norsemen.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/11/norsemen.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">New Metric: the Distance of Coupling</title><link href="https://www.yegor256.com/2020/10/27/distance-of-coupling.html" rel="alternate" type="text/html" title="New Metric: the Distance of Coupling" /><published>2020-10-27T00:00:00+00:00</published><updated>2020-10-27T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/10/27/distance-of-coupling</id><content type="html" xml:base="https://www.yegor256.com/2020/10/27/distance-of-coupling.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_%28computer_programming%29&quot;&gt;Encapsulation&lt;/a&gt;,
as you know, is one of the
&lt;a href=&quot;https://www.indeed.com/career-advice/career-development/what-is-object-oriented-programming&quot;&gt;four key principles&lt;/a&gt;
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;object-oriented programming&lt;/a&gt;.
Encapsulation, according to &lt;a href=&quot;https://amzn.to/3o7RnDZ&quot;&gt;Grady Booch et al.&lt;/a&gt;,
is “the process of hiding all the secrets of an object
that do not contribute to its essential characteristics.”
Practically speaking, it’s about those &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;
attributes that we use in Java and C++: they are not visible to the users of
our objects, that’s why they can’t be modified or even read.
Booch et al. believe that the purpose of encapsulation is
“to provide explicit barriers among different abstractions,”
which leads to “a clear separation of concerns.”
However, does it really work as planned? Do we really have
explicit barriers between objects? Let’s see.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Chacun sa vie (2017) by Claude Lelouch&quot; src=&quot;/images/2020/10/chacun-sa-vie.jpg&quot; longdesc=&quot;#b30cec40&quot; /&gt;&lt;figcaption id=&quot;b30cec40&quot;&gt;Chacun sa vie (2017) by Claude Lelouch&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, I’m not the first and not the only one asking this question.
&lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;David West&lt;/a&gt; much earlier said that “in most ways,
encapsulation is a discipline more than a real barrier,” and
that “seldom is the integrity of an object protected in any absolute sense”.
In practice, “it is up to the user of an object to respect that object’s encapsulation.’’
Indeed, let’s take a look at the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Temperature&lt;/code&gt; from my blog post
about &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;naked data&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can we say that the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; is truly &lt;em&gt;encapsulated&lt;/em&gt;?
Technically, it is: it’s impossible
to modify it directly via the dot notation.
Simply put, we can’t do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we can’t even do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, we can do exactly the same via the
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getter&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;getT()&lt;/code&gt;
and the setter &lt;code class=&quot;highlighter-rouge&quot;&gt;setT()&lt;/code&gt;.
Thus, the designer of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Temperature&lt;/code&gt; gives us the ability to access
its attribute, but indirectly, through
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters and setters&lt;/a&gt;.
I would say
that the principle of encapsulation is being violated here, and, I’m sure,
&lt;a href=&quot;https://www.infoworld.com/article/2072302/more-on-getters-and-setters.html&quot;&gt;Allen Holub&lt;/a&gt;
would agree with me. What is the solution? The &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;article&lt;/a&gt;
about naked data
proposed the use of the &lt;a href=&quot;http://media.pragprog.com/articles/jan_03_enbug.pdf&quot;&gt;TellDontAsk principle&lt;/a&gt;
and that we should get rid of the getter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Temperature&lt;/code&gt; doesn’t allow us to read its attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;.
Instead, we can only &lt;em&gt;tell&lt;/em&gt; it to prepare a string presentation of the temperature
and return that back to us. Maybe not exactly a classic example of the “tell” paradigm,
since some data is coming back, but now it looks much better than before. The beauty
of this refactoring is less &lt;a href=&quot;/2018/09/18/fear-of-coupling.html&quot;&gt;coupling&lt;/a&gt;
between the client and the object. With
the getter (or direct access to the attribute via dot notation), the client
was able to retrieve the numeric value of the temperature and recalculate it
in Fahrenheit, assuming that it was in Celsius. With the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; being
returned the client would not do this. The string would only be used as a final
product, not modifiable. Or maybe not?&lt;/p&gt;

&lt;p&gt;What if the client does this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How does it look now? Isn’t this a violation of encapsulation?
The result of &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; is not treated
as it is supposed to be treated. Not as a solid string, but as data with
some internal structure, which is &lt;em&gt;known&lt;/em&gt; to the client. The &lt;em&gt;knowledge&lt;/em&gt; the
client possesses about the output is the key problem here. The client knows too
much and uses this knowledge for its own benefit: to deconstruct the
data and manipulate the result.&lt;/p&gt;

&lt;p&gt;Can we really prohibit the client from doing this? There is no such feature
in any programming language, to my knowledge. When the output of the method
is delivered to the client, the client is allowed to do whatever is needed
with it. This is that lack of respect to encapsulation, if I correctly
understood Dr. West. And we are not even discussing
the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/reflect/&quot;&gt;Reflection API&lt;/a&gt;, which
would allow us to take the &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; out of &lt;code class=&quot;highlighter-rouge&quot;&gt;Temperature&lt;/code&gt; without even calling any methods.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Encapsulation is not an explicit barrier, it exists for as long as we have the desire to respect it.
&lt;/aside&gt;

&lt;p&gt;Thus, encapsulation is &lt;em&gt;not&lt;/em&gt; an explicit barrier. It exists for as long as we have
the desire to respect it. If we don’t, nothing can stop us from abusing an
object in any way we want. And even &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; attribute modifiers won’t help.
Moreover, they will only create an illusion of encapsulation, while in reality
everyone is able to do whatever they feel is suitable for their business case.&lt;/p&gt;

&lt;p&gt;I have a proposal, though, which may help us make
encapsulation more explicit.&lt;/p&gt;

&lt;p&gt;What if we had the ability to control what’s happening with the data
and objects &lt;em&gt;after&lt;/em&gt; we return them to clients? What if we could prevent the client
from doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;split()&lt;/code&gt; on the output of the &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; method? We could do this at compile time, I think,
by going through all the code and checking how &lt;em&gt;far&lt;/em&gt; the moments of interaction with our
objects are from the places where they were returned. In the example above,
the &lt;em&gt;distance&lt;/em&gt; is two: 1) first, we do the &lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt;, 2) second, we do the &lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt()&lt;/code&gt;.
Larger applications will have bigger numbers, of course.&lt;/p&gt;

&lt;p&gt;It seems that we can use this distance number as a metric for coupling between objects
in the entire app. The larger the number (or the mean of all numbers), the
worse the design: in good design we are not supposed to take something
out of a method and then do some complex processing. We are, according to
the TellDontAsk principle mentioned above, supposed to let our objects do the work and only
return a quick summary of it. The distance metric will tell us exactly that:
how many times, and by how much, we violated the principle of loose coupling.&lt;/p&gt;

&lt;p&gt;Would you be interested in creating such an analyzer for, say, Java code?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Encapsulation, as you know, is one of the four key principles in object-oriented programming. Encapsulation, according to Grady Booch et al., is “the process of hiding all the secrets of an object that do not contribute to its essential characteristics.” Practically speaking, it’s about those private attributes that we use in Java and C++: they are not visible to the users of our objects, that’s why they can’t be modified or even read. Booch et al. believe that the purpose of encapsulation is “to provide explicit barriers among different abstractions,” which leads to “a clear separation of concerns.” However, does it really work as planned? Do we really have explicit barriers between objects? Let’s see.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/10/chacun-sa-vie.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/10/chacun-sa-vie.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lack of Problem Is the Problem</title><link href="https://www.yegor256.com/2020/10/13/lack-of-problem.html" rel="alternate" type="text/html" title="Lack of Problem Is the Problem" /><published>2020-10-13T00:00:00+00:00</published><updated>2020-10-13T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/10/13/lack-of-problem</id><content type="html" xml:base="https://www.yegor256.com/2020/10/13/lack-of-problem.html">&lt;p&gt;Do you know the most typical mistake startup founders make
when they pitch their ideas to investors? According to
&lt;a href=&quot;https://medium.com/@jakemendel/b3a884c54ab4&quot;&gt;Jake Mendel&lt;/a&gt;
from Silicon Valley Bank, they often focus on the solution they propose
instead of the problem they are trying to solve. Inability to identify
the problem is the common cause of startup failures. However, it’s not only them.
Look at your project and try to answer
“What’s wrong with the world now?” and then “How is this product fixing it?”&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Le retour du héros (2018) by Laurent Tirard&quot; src=&quot;/images/2020/10/le-retour-du-heros.jpg&quot; longdesc=&quot;#30e66a8a&quot; /&gt;&lt;figcaption id=&quot;30e66a8a&quot;&gt;Le retour du héros (2018) by Laurent Tirard&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Something has to be wrong. Otherwise the project doesn’t make sense.
Neither for its founders, nor for its programmers and users.&lt;/p&gt;

&lt;p&gt;Open the README file in your repository and read its first paragraph.
Does it answer the question? Does it identify the problem? Is it obvious
to your users what exactly you are solving? It should be.&lt;/p&gt;

&lt;p&gt;You may say, “startup founders are looking for money, that’s why they need
this problem statement to impress investors, but we already have
the budget and don’t need to impress anyone, we just need
to create yet another version of our mobile app so that our users
continue ordering pizzas and our director keeps paying us,”
and you would be right about not needing the money. You will
get the money no matter what, whether your README file has a properly
formulated problem statement or even if no such file exists.
Who am I kidding? In most cases, even if we don’t have a repository
we will still be paid well!&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;The primary responsibility of a team leader is keeping an eye on the problem statement and making sure it’s good enough for the team.
&lt;/aside&gt;

&lt;p&gt;This is true, but I think that money is not the fuel of
the software economy &lt;del&gt;anymore&lt;/del&gt;. It’s people. Not just people, but
&lt;em&gt;motivated&lt;/em&gt; people—this is what software teams are now fighting for.
Getting a budget for a project, especially if you are
in a big enterprise (where all interesting projects will be eventually),
is not difficult. A much bigger task is to acquire and retain a team that is
able and willing to deliver results.&lt;/p&gt;

&lt;p&gt;First, you pitch to investors. Then, you pitch to programmers.
The second pitch is more difficult than the first one. Highly
qualified software experts motivated to work full-speed
for your project—is the new capital in this modern economy.&lt;/p&gt;

&lt;p&gt;How do we acquire and retain them? We formulate the problem. We make
sure the problem is new, big, ambitious, challenging, and noble.
If we can do that, they will join and will stay … motivated.&lt;/p&gt;

&lt;p&gt;I would even say that the primary responsibility of a team leader
is keeping an eye on the problem statement and making sure it’s
good enough for the team. When something goes wrong with
morale, discipline, or performance—these are the symptoms of
a defective problem statement. In most cases. And the only person responsible
is the team leader, who has to fix it by opening
the README file and specifying, in the first paragraph, what is wrong
with the world right now and how our product is going to fix it.&lt;/p&gt;

&lt;p&gt;Do it now.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Do you know the most typical mistake startup founders make when they pitch their ideas to investors? According to Jake Mendel from Silicon Valley Bank, they often focus on the solution they propose instead of the problem they are trying to solve. Inability to identify the problem is the common cause of startup failures. However, it’s not only them. Look at your project and try to answer “What’s wrong with the world now?” and then “How is this product fixing it?”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/10/le-retour-du-heros.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/10/le-retour-du-heros.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Spell Check Your LaTeX Writings Using GNU Aspell</title><link href="https://www.yegor256.com/2020/10/06/latex-spell-checking.html" rel="alternate" type="text/html" title="Spell Check Your LaTeX Writings Using GNU Aspell" /><published>2020-10-06T00:00:00+00:00</published><updated>2020-10-06T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/10/06/latex-spell-checking</id><content type="html" xml:base="https://www.yegor256.com/2020/10/06/latex-spell-checking.html">&lt;p&gt;Do you use &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;
for your academic and technical writings? You don’t?
Well you should! It’s the &lt;del&gt;most&lt;/del&gt; only professional instrument for
making properly formatted PDF documents.
MS Word and Apple Pages are for &lt;del&gt;secretaries&lt;/del&gt; non-tech people,
while LaTeX is serious. It’s perfect in so many ways, thanks to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt;
(the creator of TeX) and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Leslie_Lamport&quot;&gt;Leslie Lamport&lt;/a&gt;
(the author of LaTeX),
but it lacks one very convenient feature:
&lt;a href=&quot;https://tex.stackexchange.com/questions/42843&quot;&gt;spell checking&lt;/a&gt;.
The only solution I’ve found so far, which works perfectly for my documents, is
&lt;a href=&quot;http://aspell.net/&quot;&gt;GNU aspell&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Zero 2 (2010) by Emilis Velyvis&quot; src=&quot;/images/2020/10/zero-2.jpg&quot; longdesc=&quot;#e03fe95c&quot; /&gt;&lt;figcaption id=&quot;e03fe95c&quot;&gt;Zero 2 (2010) by Emilis Velyvis&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://aspell.net/&quot;&gt;GNU aspell&lt;/a&gt; is a command line tool
which expects you to provide the LaTeX source code
(indeed, it is code, not “text”) as an input and prints a list of found spelling
errors. The beauty of it is that it checks only the text, ignoring
TeX commands. For example, this is LaTeX document:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;\documentclass{article}
\begin{document}
Hello, \textbf{Yegor}!
\end{document}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we feed this text to some other spell checker (or GNU aspell without the
option &lt;code class=&quot;highlighter-rouge&quot;&gt;--mode=tex&lt;/code&gt;) the word &lt;code class=&quot;highlighter-rouge&quot;&gt;textbf&lt;/code&gt; would be an obvious spelling mistake; aspell,
however, understands it as a LaTeX command and ignores it.
Moreover, aspell can understand the word &lt;code class=&quot;highlighter-rouge&quot;&gt;Yegor&lt;/code&gt;, even though it’s not
an English word, by using a custom dictionary provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;--pws&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;There are a few other useful features in aspell. Long story short, I decided to create
a small wrapper around aspell, to simplify the process of its configuration:
&lt;a href=&quot;https://github.com/yegor256/texsc&quot;&gt;texsc&lt;/a&gt;
(stands for “TeX Spell Checking”).
It’s a command line tool, which you install and then run, for example like this
(you can see how it’s configured in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; of
&lt;a href=&quot;https://github.com/yegor256/requs-paper&quot;&gt;this paper&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ texsc --pws aspell.en.pws --ignore=code,citep article.tex&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is a list of arguments you can supply to &lt;code class=&quot;highlighter-rouge&quot;&gt;texsc&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--pws&lt;/code&gt; is the location of a custom dictionary, where each
line is a word aspell is supposed to ignore. It’s important to
have the first line equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;personal_ws-1.1 en 741 utf-8&lt;/code&gt;. Why?
I don’t know. But if it contains something else, aspell will just
silently ignore the file. Nice, huh?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore&lt;/code&gt; (you may have many of them) is the list of
TeX commands, and which arguments should be ignored. A good example is the
&lt;code class=&quot;highlighter-rouge&quot;&gt;\code{}&lt;/code&gt; command, which in all cases has something that is not
an English word. You may also have commands with multiple arguments,
in which case you say something like &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore=code:op&lt;/code&gt; and in the
command &lt;code class=&quot;highlighter-rouge&quot;&gt;\code[foo]{bar}&lt;/code&gt; both &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; will be ignored.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;:op&lt;/code&gt; suffix means that an optional (&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;) argument is ignored and then
a mandatory one (&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;). Something like &lt;code class=&quot;highlighter-rouge&quot;&gt;:oppp&lt;/code&gt; would tell aspell
to ignore one optional and then three mandatory arguments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--min-word-length&lt;/code&gt; is the minimum length of word to pay attention to.
I use the number &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; and this is the default value. Shorter words (one or two characters)
are not important and don’t need to be spell-checked.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use &lt;code class=&quot;highlighter-rouge&quot;&gt;texsc&lt;/code&gt; in all my LaTeX projects, usually as part of their
build cycle, which I automate with &lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;GNU make&lt;/a&gt;.
You can do the same, as it’s open source.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="latex" /><summary type="html">Do you use LaTeX for your academic and technical writings? You don’t? Well you should! It’s the most only professional instrument for making properly formatted PDF documents. MS Word and Apple Pages are for secretaries non-tech people, while LaTeX is serious. It’s perfect in so many ways, thanks to Donald Knuth (the creator of TeX) and Leslie Lamport (the author of LaTeX), but it lacks one very convenient feature: spell checking. The only solution I’ve found so far, which works perfectly for my documents, is GNU aspell.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/10/zero-2.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/10/zero-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Open Source Etiquette</title><link href="https://www.yegor256.com/2020/07/29/open-source-etiquette.html" rel="alternate" type="text/html" title="Open Source Etiquette" /><published>2020-07-29T00:00:00+00:00</published><updated>2020-07-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/07/29/open-source-etiquette</id><content type="html" xml:base="https://www.yegor256.com/2020/07/29/open-source-etiquette.html">&lt;p&gt;Here is a short list of common courtesy rules for open source
software development. Actually, they apply elsewhere also, but they are most
visible when you do GitHub-based coding. I strongly believe that
sooner or later all programming will be open source and these rules
will apply to everybody. Consequently, it makes sense to start following them now,
whether you are an active Apache contributor or a happy owner
of the “Java for Dummies” book.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Hong Kil-dong (1986) by Kil-in Kim&quot; src=&quot;/images/2020/07/hong-kil-dong.jpg&quot; longdesc=&quot;#87cd841c&quot; /&gt;&lt;figcaption id=&quot;87cd841c&quot;&gt;Hong Kil-dong (1986) by Kil-in Kim&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In no particular order:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Small &lt;a href=&quot;https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests&quot;&gt;Pull Requests&lt;/a&gt;&lt;/strong&gt;.
Some recent &lt;a href=&quot;https://www.researchgate.net/publication/325730783_Modern_code_review_a_case_study_at_google&quot;&gt;research&lt;/a&gt;
done by Caitlin Sadowski et al. from Google and the University of Zurich
demonstrated that there is a strong correlation between change size
and review quality: larger changes (pull requests) negatively affect quality.
According to this article, Google developers
are strongly encouraged to make small, incremental changes.
Aside from &lt;a href=&quot;https://google.github.io/eng-practices/review/developer/small-cls.html&quot;&gt;Google&lt;/a&gt;,
many others explicitly say the same:
&lt;a href=&quot;https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/PullRequests.html#keep-pull-requests-small&quot;&gt;Microsoft&lt;/a&gt;,
&lt;a href=&quot;https://engineering.zalando.com/posts/2017/10/a-plea-for-small-pull-requests.html&quot;&gt;Zalando&lt;/a&gt;,
&lt;a href=&quot;https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests&quot;&gt;Atlassian&lt;/a&gt;,
and
&lt;a href=&quot;https://opensource.com/article/18/6/anatomy-perfect-pull-request&quot;&gt;OpenSource.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use &lt;a href=&quot;https://docs.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax&quot;&gt;Nice&lt;/a&gt;
&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Markdown&lt;/a&gt; in Your Docs&lt;/strong&gt;.
I didn’t manage to find any scientific research on this, maybe because it’s
obvious: the text “why is &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;?” is much easier to read than “why is f nil?”
Rich text formatting not only makes the text look nicer, but also helps
readers digest the content faster and with more pleasure. After you learn Markdown,
I’d suggest reading this blog post by Aaron Stannard from PetaBridge:
&lt;a href=&quot;https://petabridge.com/blog/use-github-professionally/&quot;&gt;How to Use Github Professionally&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Say Please, Thanks, and Sorry&lt;/strong&gt;.
&lt;a href=&quot;https://nypost.com/2014/02/15/popes-advice-to-couples-say-please-thanks-and-sorry/&quot;&gt;According&lt;/a&gt;
to Pope Francis, the recipe for success lies in saying three simple words.
He didn’t mean open source developers, but the advice perfectly applies to
us programmers. There are tons of articles written about online etiquette, all
of them are basically the same:
ask nicely, be grateful, and be ready to admit a mistake. I would recommend
&lt;a href=&quot;https://ben.balter.com/2014/11/06/rules-of-communicating-at-github/&quot;&gt;15 rules for communicating at GitHub&lt;/a&gt;
by Ben Balter, a Senior Product Manager at GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Descriptive &lt;a href=&quot;https://git-scm.com/docs/git-commit&quot;&gt;Commits&lt;/a&gt;&lt;/strong&gt;.
The style of formatting Git commit messages (I’m sure you are using Git) is usually
very specific in each project. However, there are some similarities and
common rules. I would recommend these blog posts:
&lt;a href=&quot;https://chris.beams.io/posts/git-commit/&quot;&gt;How to Write a Git Commit Message&lt;/a&gt; by Chris Beams,
&lt;a href=&quot;https://hackernoon.com/git-it-together-some-tips-on-commit-etiquette-and-best-practices-for-junior-developers-1f147b8dfd56&quot;&gt;Some tips on commit etiquette&lt;/a&gt; by Jeremy Gunter,
and
&lt;a href=&quot;https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;A Note About Git Commit Messages&lt;/a&gt; by Tim Pope.
Also, check these out:
&lt;a href=&quot;https://www.conventionalcommits.org/&quot;&gt;conventionalcommits.org&lt;/a&gt;
and
&lt;a href=&quot;https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting&quot;&gt;50/72 Formatting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have an &lt;a href=&quot;https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/personalizing-your-profile&quot;&gt;Avatar&lt;/a&gt;&lt;/strong&gt;.
A &lt;a href=&quot;https://academic.oup.com/jcmc/article/11/1/153/4616661&quot;&gt;study&lt;/a&gt; by
Kristine L. Nowak et al. from the University of Connecticut,
demonstrates that users with avatars, especially feminine and anthropomorphic ones,
are more likely to catch attention than those who have
no profile pictures (or have default ones provided by GitHub).
Of course, it’s not only the avatar that matters; your GitHub profile
must also have many other things: description, email, pinned repositories, etc.
Use this profile as an example: &lt;a href=&quot;https://github.com/m0nica&quot;&gt;@m0nica&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Online&lt;/strong&gt;.
Offline communication is much cheaper than online tickets:
just shout out a question in the office and you get an answer immediately.
No need to write those long tickets, formulating questions in English, waiting
for the assignee to post an answer, and so on. However, offline talk
hurts the project, for &lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;so many reasons&lt;/a&gt;.
Every time you move from a
GitHub issue to a Slack chat to discuss the problem, you are doing a disservice
to the project and all its participants. Remember that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Report Nicely&lt;/strong&gt;.
Just like with Git commits, bug reporting rules differ from project to project,
but the basic principles remain &lt;a href=&quot;/2018/04/24/right-way-to-report-bugs.html&quot;&gt;the same&lt;/a&gt;.
Just google “&lt;a href=&quot;https://www.google.com/search?q=how+to+write+a+bug+report&quot;&gt;how to write a bug report&lt;/a&gt;”
and listen to what those bloggers say. Your bug reports demonstrate
&lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;who you are&lt;/a&gt;
even better than your code. You may practice by submitting questions
to StackOverflow: the community there will punish you for all your mistakes,
quickly training your reporting skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Elegant READMEs&lt;/strong&gt;.
I wrote about this &lt;a href=&quot;/2019/04/23/elegant-readme.html&quot;&gt;before&lt;/a&gt;:
the importance of a perfectly written and formatted
&lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; file in an open source project is difficult to overemphasize.
Writing good code is important, but presenting it is part of online
etiquette: high-quality documentation means respect to the users
of your products.&lt;/p&gt;

&lt;p&gt;This seems to be it. If you do all of these, you will demonstrate
respect to other developers and they will respect you in return.
Did I forget anything important?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oss" /><summary type="html">Here is a short list of common courtesy rules for open source software development. Actually, they apply elsewhere also, but they are most visible when you do GitHub-based coding. I strongly believe that sooner or later all programming will be open source and these rules will apply to everybody. Consequently, it makes sense to start following them now, whether you are an active Apache contributor or a happy owner of the “Java for Dummies” book.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/07/hong-kil-dong.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2020/07/hong-kil-dong.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>