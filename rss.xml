<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2020-02-19T14:42:50+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Fat vs. Skinny Design</title><link href="https://www.yegor256.com/2020/02/19/fat-skinny-design.html" rel="alternate" type="text/html" title="Fat vs. Skinny Design" /><published>2020-02-19T00:00:00+00:00</published><updated>2020-02-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/02/19/fat-skinny-design</id><content type="html" xml:base="https://www.yegor256.com/2020/02/19/fat-skinny-design.html">&lt;p&gt;It seems that type/class hierarchies in OOP may be designed in two
extreme ways: either with full encapsulation of data in mind; or with just a few
interfaces making raw data visible, and letting classes deal with it, parse it,
and turn it into smaller data elements. You may be surprised, but I’m
suggesting the second option is more elegant. It seems to me that we don’t
lose object orientation, but rather gain a lot of flexibility, reusability, testability,
and so on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Owning Mahowny (2003) by Richard Kwietniowski&quot; src=&quot;/images/2020/02/owning-mahowny.jpg&quot; longdesc=&quot;#047d1b4a&quot; /&gt;&lt;figcaption id=&quot;047d1b4a&quot;&gt;Owning Mahowny (2003) by Richard Kwietniowski&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Take a look at this (let’s call it &lt;em&gt;fat&lt;/em&gt; and I will explain why later):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To obtain the name of the author we do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// It is stored in PostgreSQL (that&amp;#39;s why the Pg&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prefix) and retrieves everything using SQL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PgArticle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Visually, this design may look like this (in UML):&lt;/p&gt;

&lt;p&gt;&amp;lt;img src={“Message”:”The request contains an entity body but no Content-Type header. The inferred media type ‘application/octet-stream’ is not supported for this resource.”} style=”width:75%”/&amp;gt;&lt;/p&gt;

&lt;p&gt;Now, let’s compare it with an alternative design (which is much less
&lt;em&gt;fat&lt;/em&gt; than the previous one, I would even call it &lt;em&gt;skinny&lt;/em&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TxtHead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TxtAuthor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, in order to obtain the name of the author we have to extract
the head as a &lt;code&gt;String&lt;/code&gt;, extract the author as a &lt;code&gt;String&lt;/code&gt;, and then
extract the name as a &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PgArticle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TxtHead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TxtAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Visually in UML, it looks like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src={“Message”:”The request contains an entity body but no Content-Type header. The inferred media type ‘application/octet-stream’ is not supported for this resource.”} style=”width:75%”/&amp;gt;&lt;/p&gt;

&lt;p&gt;There were three interfaces in the first design, while the second one
has only one interface and two classes. I call the first one “fat” because
it returns interfaces, which already implement the functionality we are
looking for, and we don’t need to cover them with additional decorators
or adapters. Its hierarchy of &lt;em&gt;three&lt;/em&gt; interfaces is rich enough to give
us everything we need. That’s why it’s fat. The second one, on other hand
is pretty &lt;em&gt;skinny&lt;/em&gt;, there is only one interface, which returns us plain
text data, which we have to parse on our own. We need to &lt;em&gt;dress it up&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It seems that the skinny design is better, for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Extendability&lt;/strong&gt;.
The skinny design is definitely easier to extend. In order
to extract some new information from the author we just need to add a new
method to the class &lt;code&gt;TxtAuthor&lt;/code&gt;. We don’t need to re-design the entire hierarchy
of interfaces and to modify all their implementations. We deal with pure data,
which is managed and parsed later, in decorators, adapters, and other
supplementary &lt;a href=&quot;/2016/04/26/why-inputstream-design-is-wrong.html&quot;&gt;smart&lt;/a&gt; classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cohesion&lt;/strong&gt;.
The skinny design is definitely more cohesive, since everything that is
related to the management of PostgreSQL data stays in one class &lt;code&gt;SqlArticle&lt;/code&gt;. To the contrary,
the fat design spreads the functionality among many classes and, thanks to that,
makes the entire class-set more difficult to maintain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reusability&lt;/strong&gt;.
Class &lt;code&gt;TxtAuthor&lt;/code&gt; can definitely be used in any other place, where
parsing of an author’s information is required, while class &lt;code&gt;PgAuthor&lt;/code&gt; is
only suitable for one particular case: fetching and parsing
PostgreSQL-related data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Testability&lt;/strong&gt;.
Obviously, the skinny design is much easier to test, because mocking
a single interface is a much simpler task than mocking the entire
hierarchy. To test the class &lt;code&gt;TxtAuthor&lt;/code&gt; we just pass some fake text to
its constructor and check how it works. To test the class &lt;code&gt;PgAuthor&lt;/code&gt; we
would need to do much more, including running a fake instance of a PostgreSQL server.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything said above is true for both 1) from-PostgreSQL data retrievals
and 2) to-PostgreSQL data manipulations. Of course, manipulations may
require many methods to exist in &lt;code&gt;SqlArticle&lt;/code&gt;, which will make the skinny
design look ugly, and it will become obvious that some of these methods
have to be moved to lower-level classes/interfaces. This only demonstrates
that it’s not always possible to make skinny design with a single interface,
like in the example above. Sometimes we simply &lt;em&gt;have&lt;/em&gt; to make it more fat.&lt;/p&gt;

&lt;p&gt;However, there is one serious concern related to the skinny design: it lets
the raw &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;naked&lt;/a&gt;
data jump out of &lt;code&gt;SqlArticle&lt;/code&gt;, which is against the very idea
of object-oriented programming, as
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;we know&lt;/a&gt;. Indeed, if we let
&lt;code&gt;TxtHead&lt;/code&gt; do the parsing, we may lose some interesting PostgreSQL-related
context, which is available only inside &lt;code&gt;SqlArticle&lt;/code&gt;. We don’t want
complex data parsing to happen far away from the place where the data
is born. We want everything data-related to happen where the data lives:
inside &lt;code&gt;SqlArticle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a valid concern, but letting PostgreSQL-related information (like connection
settings) move from &lt;code&gt;PgArticle&lt;/code&gt; to &lt;code&gt;PgHead&lt;/code&gt; and then to &lt;code&gt;PgAuthor&lt;/code&gt; is an even
larger violation of the data encapsulation principle.&lt;/p&gt;

&lt;p&gt;In real-life situations, of course, it’s not possible to imagine pure
one-interface skinny designs. They will all be fat to some extent. My suggestion, though,
is to try to make designs less fat, letting interface users
dress them up however they like. This suggestion is very close to
what I said earlier about &lt;a href=&quot;/2016/04/26/why-inputstream-design-is-wrong.html&quot;&gt;smart classes&lt;/a&gt;,
but this time the principle is broader.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">It seems that type/class hierarchies in OOP may be designed in two extreme ways: either with full encapsulation of data in mind; or with just a few interfaces making raw data visible, and letting classes deal with it, parse it, and turn it into smaller data elements. You may be surprised, but I’m suggesting the second option is more elegant. It seems to me that we don’t lose object orientation, but rather gain a lot of flexibility, reusability, testability, and so on.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/02/owning-mahowny.jpg" /></entry><entry><title type="html">Object Cohesion: Why It Matters</title><link href="https://www.yegor256.com/2020/02/11/object-cohesion.html" rel="alternate" type="text/html" title="Object Cohesion: Why It Matters" /><published>2020-02-11T00:00:00+00:00</published><updated>2020-02-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/02/11/object-cohesion</id><content type="html" xml:base="https://www.yegor256.com/2020/02/11/object-cohesion.html">&lt;p&gt;You most probably know about &lt;a href=&quot;https://www.elegantobjects.org&quot;&gt;Elegant Objects&lt;/a&gt; (EO),
an alternative object-oriented paradigm, which claims that objects must
be immutable, have no
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;static methods&lt;/a&gt;,
never use
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL&lt;/a&gt; in their code,
use &lt;a href=&quot;/2016/04/12/java-annotations-are-evil.html&quot;&gt;no annotations&lt;/a&gt;,
and so on. We, the EO adepts, claim many things, but not so many people
believe us. Those non-believers &lt;a href=&quot;/testimonials.html&quot;&gt;say&lt;/a&gt;
that we are trolls, at best. Their main argument is: everybody works differently,
why should we listen to you? I have no answer for them… well I had no answer, until I
created &lt;a href=&quot;https://www.jpeek.org&quot;&gt;jPeek&lt;/a&gt; and started researching object &lt;em&gt;cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Кин-дза-дза! by Георгий Данелия&quot; src=&quot;/images/2020/02/kin-dza-dza.jpg&quot; longdesc=&quot;#62ef486d&quot; /&gt;&lt;figcaption id=&quot;62ef486d&quot;&gt;Кин-дза-дза! by Георгий Данелия&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me explain how cohesion can help us, EO adepts, to &lt;em&gt;prove&lt;/em&gt; some of our
assumptions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;Cohesion&lt;/a&gt;,
as a characteristic of a software module, was invented by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Constantine&quot;&gt;Larry Constantine&lt;/a&gt;
when I didn’t even exist yet, in 1974.
Here is what it means; take a look at this simple Java class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are two attributes and two methods. The method &lt;code&gt;addTitle()&lt;/code&gt; works with
the attribute &lt;code&gt;titles&lt;/code&gt;, while the method &lt;code&gt;addPrice()&lt;/code&gt; works only with the
attribute &lt;code&gt;prices&lt;/code&gt;. The cohesion is &lt;em&gt;low&lt;/em&gt; in this class, because the attributes
&lt;code&gt;titles&lt;/code&gt; and &lt;code&gt;prices&lt;/code&gt; are not related to each other in any way. We can easily
break this class into two pieces without losing anything:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we have two much more cohesive classes: their attributes and methods
are related to each other. We can’t break &lt;code&gt;Books1&lt;/code&gt; anymore, since each
attribute is needed by each method.&lt;/p&gt;

&lt;p&gt;Here is yet another example of a &lt;em&gt;highly&lt;/em&gt; cohesive class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can we break it into smaller pieces? No, we can’t. We can’t take any part
of the class out. The attribute &lt;code&gt;titles&lt;/code&gt; and both of the methods must stay
together. This means that the class is &lt;em&gt;highly&lt;/em&gt; cohesive.&lt;/p&gt;

&lt;p&gt;It was demonstrated a long time ago that more cohesive classes are better,
in terms of their error-proneness, than the ones with low cohesion,
for example by Victor R. Basili et al. in their study
&lt;a href=&quot;https://pdfs.semanticscholar.org/2bb8/c1f4eeb5e5ae353adeea0fd6933551b9e932.pdf&quot;&gt;A Validation of Object-Oriented Design Metrics as Quality Indicators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, if we can empirically prove that, for example, classes without static methods
are, on average, more cohesive than their static-rich fellows, we can say
that the claim that “static methods are evil” (postulated by Elegant Objects) is
scientifically validated. We can take a large set of
random Java classes and calculate their cohesion. Then, we can separate those
with static methods from those without them. Next, we can calculate which group
has higher average cohesion. If the group without static methods wins,
the assumption would be valid.&lt;/p&gt;

&lt;p&gt;Of course, another random set of Java classes may produce different results,
but this is how empirical science works: we can’t prove the theorem other
than by some experiments.&lt;/p&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;https://www.jpeek.org&quot;&gt;&lt;img src=&quot;https://www.jpeek.org/logo.svg&quot; style=&quot;width:64px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I created an open source software library to help me do these experiments and called
it &lt;a href=&quot;https://www.jpeek.org&quot;&gt;jPeek.org&lt;/a&gt;. It is a calculator of cohesion metrics
for Java code. No surprise, there are many metrics we can use to calculate cohesion. At least
&lt;a href=&quot;http://www.math.md/files/csjm/v25-n1/v25-n1-%28pp44-74%29.pdf&quot;&gt;thirty&lt;/a&gt;
of them are published, while only a few of them were properly implemented.
In jPeek, thanks to its contributors, we managed to implement over a dozen.&lt;/p&gt;

&lt;p&gt;Using this tool we can empirically prove some of the key points of EO.
For example, we can prove that
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;mutable&lt;/a&gt;
classes are less cohesive, annotations
negatively affect cohesion,
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt; are low-cohesion creatures,
and many other things. Thus cohesion will become the vehicle which will
drive Elegant Objects to a place where most of its claims will be scientifically
proven. Give us a few more years and we will have very interesting results.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A reviewer rejects your code and says: &amp;quot;This class is not cohesive enough!&amp;quot; What would you answer?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1228936961035001856?ref_src=twsrc%5Etfw&quot;&gt;February 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">You most probably know about Elegant Objects (EO), an alternative object-oriented paradigm, which claims that objects must be immutable, have no static methods, never use NULL in their code, use no annotations, and so on. We, the EO adepts, claim many things, but not so many people believe us. Those non-believers say that we are trolls, at best. Their main argument is: everybody works differently, why should we listen to you? I have no answer for them… well I had no answer, until I created jPeek and started researching object cohesion.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/02/kin-dza-dza.jpg" /></entry><entry><title type="html">One Question You Should Never Ask Your Boss</title><link href="https://www.yegor256.com/2020/01/15/question-never-ask.html" rel="alternate" type="text/html" title="One Question You Should Never Ask Your Boss" /><published>2020-01-15T00:00:00+00:00</published><updated>2020-01-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/01/15/question-never-ask</id><content type="html" xml:base="https://www.yegor256.com/2020/01/15/question-never-ask.html">&lt;p&gt;There are good and bad soldiers in any team. The job of a manager is to
understand which is which. Then to promote the good ones and discharge the bad ones.
There is one simple indicator I use to make this segregation. It’s a simple
question I either hear from my people or don’t. Those who ask it
are the bad soldiers. Their attitude and their behavior require immediate
corrective actions. Some of them are curable, while others are not. This
question tells me everything, if it’s being asked. I immediately understand
that I am dealing with a loser if I hear it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Broadchurch (2013) by Chris Chibnall&quot; src=&quot;/images/2020/01/broadchurch.jpg&quot; longdesc=&quot;#7bd6e061&quot; /&gt;&lt;figcaption id=&quot;7bd6e061&quot;&gt;Broadchurch (2013) by Chris Chibnall&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The question is: “What should I do next?”&lt;/p&gt;

&lt;p&gt;What’s wrong with that, you may wonder. Let me explain by a counter example.
A good soldier behaves differently. A good one wants to do interesting things,
wants to work with the most challenging problems, wants to resolve complex
issues, and wants to do what he/she wants to do!
A good soldier cares and doesn’t want to do what’s not important or not interesting.
A good one asks “What is our ultimate goal?” and then, after getting my answer and thinking
for a while, comes back to me with a plan for achieving this goal. A good one
&lt;em&gt;tells&lt;/em&gt; me what is next, instead of asking. All I need to do is to approve
or reject the plan proposed.&lt;/p&gt;

&lt;p&gt;Good soldiers don’t sit and passively wait until I come to them and say what exactly
needs to be done. Good soldiers pro-actively build their own plans by themselves and
do everything to convince me that they make sense.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Good soldiers pro-actively build their own plans and do everything to convince me that they make sense.
&lt;/aside&gt;

&lt;p&gt;Bad soldiers, on the other hand, ask me “What’s next?” and it gets very annoying.
It’s absolutely no fun to work with these people and I either try to explain to them
why such a question is a terrible mistake, or I simply get rid of them.&lt;/p&gt;

&lt;p&gt;Moreover, if the boss starts telling you what to do, you must realize that this
is the moment where the credit is lost. You’ve already been classified
as a bad soldier, a loser, an underachiever. Your chances of recovery are very
low. You must not allow this to happen. Act proactively; don’t wait until
it’s too late and the boss starts assigning tasks to you.&lt;/p&gt;

&lt;p&gt;P.S. By the way, I &lt;a href=&quot;https://www.google.com/search?q=questions+you+never+ask+your+boss&quot;&gt;googled&lt;/a&gt;
“questions you never ask your boss” and found
a lot of articles which prohibit many different questions. I wasn’t
surprised to find that none of them mention the question I’m talking about.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What do you do when you finish what your boss asked you to do?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1226410473354080256?ref_src=twsrc%5Etfw&quot;&gt;February 9, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="career" /><summary type="html">There are good and bad soldiers in any team. The job of a manager is to understand which is which. Then to promote the good ones and discharge the bad ones. There is one simple indicator I use to make this segregation. It’s a simple question I either hear from my people or don’t. Those who ask it are the bad soldiers. Their attitude and their behavior require immediate corrective actions. Some of them are curable, while others are not. This question tells me everything, if it’s being asked. I immediately understand that I am dealing with a loser if I hear it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/01/broadchurch.jpg" /></entry><entry><title type="html">Embrace the Chaos!</title><link href="https://www.yegor256.com/2020/01/07/embrace-the-chaos.html" rel="alternate" type="text/html" title="Embrace the Chaos!" /><published>2020-01-07T00:00:00+00:00</published><updated>2020-01-07T00:00:00+00:00</updated><id>https://www.yegor256.com/2020/01/07/embrace-the-chaos</id><content type="html" xml:base="https://www.yegor256.com/2020/01/07/embrace-the-chaos.html">&lt;p&gt;Being just yet another software developer in a large enterprise is a pain. You are surrounded
by legacy code, inconsistent architecture, low quality standards (assuming they even exist),
lack of coding discipline, broken or dirty unit tests, mediocre programmers, and so on. On top of
that, the management is very chaotic: no strict plans, no task
management, no objective metrics, no quality control, and no light at the
end of the tunnel. You feel like a cog in the machine: arrive at nine,
leave at five, be quiet, and paychecks will keep coming.
If you are talented and ambitious, sooner or later you will
start thinking about &lt;del&gt;suicide&lt;/del&gt; resignation. But hold on!&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Life Is Too Short (2011-2013) by Warwick Davis, et al.&quot; src=&quot;/images/2020/01/life-is-too-short.jpg&quot; longdesc=&quot;#c5d5a104&quot; /&gt;&lt;figcaption id=&quot;c5d5a104&quot;&gt;Life Is Too Short (2011-2013) by Warwick Davis, et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Try to think differently!&lt;/p&gt;

&lt;p&gt;Look at it from a different perspective. Imagine what it would look like if everything was
totally different: the architecture is clean, the code is perfect,
the documentation is outstanding, the team is full of experts,
the management is transparent, the plans are up to date, the metrics are
obvious and regularly collected, and the quality is under tight control.
This would be the end of the tunnel! There would be no room for improvement
anymore, since everything is already perfect. How would you feel now?
It seems that it’s exactly this scenario that would give you the feeling of being
merely a cog in a well-oiled machine.&lt;/p&gt;

&lt;p&gt;If you want to make a career and you have the energy for it,
the first scenario is a much better place to be: such an imperfect system &lt;em&gt;needs&lt;/em&gt;
improvements. And, of course, the one who makes them
gets the rewards: bonuses, a promotion, a raise, and so on.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Be thankful for the existence of the chaos—your career can grow because of it.
&lt;/aside&gt;

&lt;p&gt;If you see the issues around you, both technical and managerial, and you
know how to fix them—great! This means that you are already ahead
of many others who decided to put up with the routine and just wait
for the next paycheck. Use this situation in your own favor: contribute and succeed.&lt;/p&gt;

&lt;p&gt;Those who complain about the system are the ones who are expecting
to be nothing more than those cogs in the machine. They don’t see themselves as
system changers. They expect to play by the rules and expect the system to take care of them.
Don’t be like that. This is not how you build your career up. This is only
how you spend another few years with no fun.&lt;/p&gt;

&lt;p&gt;Instead, embrace the chaos!&lt;/p&gt;

&lt;p&gt;Be thankful for its existence—your career can grow because of it.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The boss doesn&amp;#39;t lead the team, doesn&amp;#39;t have a plan, doesn&amp;#39;t manage you, and doesn&amp;#39;t explain anything. What do you do?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1223864080135376897?ref_src=twsrc%5Etfw&quot;&gt;February 2, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="career" /><summary type="html">Being just yet another software developer in a large enterprise is a pain. You are surrounded by legacy code, inconsistent architecture, low quality standards (assuming they even exist), lack of coding discipline, broken or dirty unit tests, mediocre programmers, and so on. On top of that, the management is very chaotic: no strict plans, no task management, no objective metrics, no quality control, and no light at the end of the tunnel. You feel like a cog in the machine: arrive at nine, leave at five, be quiet, and paychecks will keep coming. If you are talented and ambitious, sooner or later you will start thinking about suicide resignation. But hold on!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2020/01/life-is-too-short.jpg" /></entry><entry><title type="html">Talented Programmers, Who Are They?</title><link href="https://www.yegor256.com/2019/12/31/talented-programmers.html" rel="alternate" type="text/html" title="Talented Programmers, Who Are They?" /><published>2019-12-31T00:00:00+00:00</published><updated>2019-12-31T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/12/31/talented-programmers</id><content type="html" xml:base="https://www.yegor256.com/2019/12/31/talented-programmers.html">&lt;p&gt;I’m not talking about those who are
famous, well-paid, or the authors of big and popular products.
They are not necessarily talented, even though their &lt;em&gt;results&lt;/em&gt; are outstanding.
Talent is something some of us have as God’s gift.
Very few of us… otherwise it would not be called a talent.
We all know what talent looks like in music, sport,
poetry, or the art of acting. We can tell right off the bat who’s got it and
who is faking it, no matter how hard they try.
Can we do the same after a short interview with a programmer? I believe we can.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Goodfellas (1990) by Martin Scorsese&quot; src=&quot;/images/2019/12/goodfellas.jpg&quot; longdesc=&quot;#91530686&quot; /&gt;&lt;figcaption id=&quot;91530686&quot;&gt;Goodfellas (1990) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I decided to read what others are saying about the art of interviewing and
how they suggest we detect the talented among all the other regular
software writers.
&lt;a href=&quot;https://blog.codinghorror.com/on-interviewing-programmers/&quot;&gt;Jeff Attwood&lt;/a&gt;
suggests paying attention to the person’s passion, communication skills,
personal attitude, and the ability to work in a team.
&lt;a href=&quot;https://www.joelonsoftware.com/2006/10/25/the-guerrilla-guide-to-interviewing-version-30/&quot;&gt;Joel Spolsky&lt;/a&gt;
suggests hiring those who are smart and can get things done.
&lt;a href=&quot;http://www.lihaoyi.com/post/HowtoconductagoodProgrammingInterview.html&quot;&gt;Haoyi&lt;/a&gt;
gives very detailed instructions for the interviewer with the focus being
on the candidate’s ability to write code, discuss problems, reason
about constraints, and be a person we would enjoy working with.&lt;/p&gt;

&lt;p&gt;All of these make sense, but it’s not about talent.
It’s about finding a person who can effectively write and maintain
spaghetti code and be &lt;em&gt;happy&lt;/em&gt; about it (maybe with just a little
dose of anti-depressants).&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;What exactly is talent? It’s an innate need to structure things.
&lt;/aside&gt;

&lt;p&gt;Imagine yourself recruiting yet another singer for a choir, which consists
of people who have no ear for music. Would you need talent? I doubt a talented
person would be able to sing in that choir. Well, maybe for a while, if you pay well enough. Just like any
other team in any other industry, most software groups
consist of &lt;em&gt;average&lt;/em&gt; code writers, not talented programmers. Modern programming, especially in big
projects, is not about talented individuals, it’s about the team work of mediocre
coders. That’s why all interview gurus teach us how to find yet
another coder: properly educated, trained, skilled, and ready
to write yet another pack of Spring controllers. And, of course, enjoy it.&lt;/p&gt;

&lt;p&gt;But sing? No.&lt;/p&gt;

&lt;p&gt;So, what exactly is talent?&lt;/p&gt;

&lt;p&gt;It’s an innate need to &lt;em&gt;structure&lt;/em&gt; things.&lt;/p&gt;

&lt;p&gt;Just like a musician, a talented programmer &lt;em&gt;physically&lt;/em&gt; can’t tolerate
what &lt;em&gt;sounds&lt;/em&gt; wrong: ambiguity, inconsistency, chaos, irrationality, and
lack of logic. A talented programmer &lt;em&gt;feels&lt;/em&gt; these things, while a mediocre
one says “Whatever works!” and gets on with it.&lt;/p&gt;

&lt;p&gt;Let me explain by example. Over the last five years I’ve been using the same
&lt;a href=&quot;https://github.com/yegor256/quiz/blob/master/Parser.java&quot;&gt;simple piece of Java code&lt;/a&gt;
to interview everybody who is interested in working with me.
I ask them to review it and find what’s wrong. Try it now. You have five minutes.&lt;/p&gt;

&lt;p&gt;How many issues did you find? Here are the
&lt;a href=&quot;https://github.com/yegor256/quiz/wiki/java-answers&quot;&gt;answers&lt;/a&gt;. There is
a prioritized list of defects I expect candidates to find. The most important
are at the top—they are about &lt;em&gt;structural&lt;/em&gt; problems in the code. Mediocre
developers are used to working with bad code and can easily put up with it.
The class name is &lt;code&gt;Parser&lt;/code&gt;, but it has &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; methods? Who cares,
as long as it works! The pair of methods is not &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;, but &lt;code&gt;get&lt;/code&gt; and …
all of a sudden &lt;code&gt;save&lt;/code&gt;? Who cares, it works anyway! And so on. Mediocre
programmers don’t feel &lt;em&gt;annoyed&lt;/em&gt; when they meet inconsistencies. Just like
people with no ear for music, they &lt;em&gt;don’t hear&lt;/em&gt; anything wrong!&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;A talented programmer constantly demanding discipline and consistency looks like a crazy OCD patient.
&lt;/aside&gt;

&lt;p&gt;When I interview programmers, I don’t pay attention to how much they know
about Java, how well they understand OOP, or how many projects they’ve
managed to complete to date. And, of course, I don’t care
how potentially likable they are. Instead, I pay attention to how much they &lt;em&gt;hate&lt;/em&gt;
to see what doesn’t look right. I check how &lt;em&gt;intolerant to chaos&lt;/em&gt; they are.
This is what my Java test is for.&lt;/p&gt;

&lt;p&gt;To be honest, very few of them exhibit these qualities.&lt;/p&gt;

&lt;p&gt;And that’s because very few projects (and project managers) need these qualities.
Most processes and codebases are poorly structured.
Any sign of intolerance of that structure, or honest attempts to introduce some discipline,
only annoys mediocre programmers, who are always in the majority.
A talented programmer constantly demanding discipline and
consistency looks like a crazy
&lt;a href=&quot;https://en.wikipedia.org/wiki/Obsessive%E2%80%93compulsive_disorder&quot;&gt;OCD patient&lt;/a&gt;.
Nobody understands what’s wrong and simply ignores him/her, at best.
Moreover, bad coding practices coming from popular frameworks
and poor management principles are encouraged by Agile and its coaches.
They train us to have no ear for high quality in programming.&lt;/p&gt;

&lt;p&gt;The market’s demand now is mediocrity, not talent.&lt;/p&gt;

&lt;p&gt;Thus, don’t worry if you feel that you don’t have much of
a talent—in most projects you will be far better off without it.&lt;/p&gt;

&lt;p&gt;Unfortunately.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Do you think you have a &lt;a href=&quot;https://twitter.com/hashtag/talent?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#talent&lt;/a&gt; for programming?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1213642929845293058?ref_src=twsrc%5Etfw&quot;&gt;January 5, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">I’m not talking about those who are famous, well-paid, or the authors of big and popular products. They are not necessarily talented, even though their results are outstanding. Talent is something some of us have as God’s gift. Very few of us… otherwise it would not be called a talent. We all know what talent looks like in music, sport, poetry, or the art of acting. We can tell right off the bat who’s got it and who is faking it, no matter how hard they try. Can we do the same after a short interview with a programmer? I believe we can.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/12/goodfellas.jpg" /></entry><entry><title type="html">Altruism Kills!</title><link href="https://www.yegor256.com/2019/12/24/altruism-kills.html" rel="alternate" type="text/html" title="Altruism Kills!" /><published>2019-12-24T00:00:00+00:00</published><updated>2019-12-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/12/24/altruism-kills</id><content type="html" xml:base="https://www.yegor256.com/2019/12/24/altruism-kills.html">&lt;p&gt;Altruism means selflessly giving others more than you take back, while egoism means
selfishly taking more than you return. Modern theories of management
and social life tell us that altruism means prosperity for the society
and success to the project. In my book
&lt;a href=&quot;/code-ahead.html&quot;&gt;&lt;em&gt;Code Ahead&lt;/em&gt;&lt;/a&gt; I claim the opposite: altruism hurts the
society and kills projects.
I truly believe that any group activity eventually collapses if it
encourages altruistic behavior among its members, be it a project, a company,
or a family.
This is why one of the core principles of
Zerocracy is &lt;a href=&quot;https://www.youtube.com/watch?v=vXUwE3FGfpg&quot;&gt;#NoAltruism&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Love Liza (2002) by Todd Louiso&quot; src=&quot;/images/2019/12/love-liza.jpg&quot; longdesc=&quot;#c756447c&quot; /&gt;&lt;figcaption id=&quot;c756447c&quot;&gt;Love Liza (2002) by Todd Louiso&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Have you ever heard about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Equity_theory&quot;&gt;Equity Theory&lt;/a&gt;?
J. Stacy Adams, the inventor of it, was sure that
“employees seek to maintain equity between the inputs that
they bring to a job and the outcomes that they receive from it
against the perceived inputs and outcomes of others.”
In other words, we feel motivated to contribute only when we
know that we take back an &lt;em&gt;equal&lt;/em&gt; amount of benefits.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Modern leadership is not about giving and taking, but about sharing and helping? I don’t buy this.
&lt;/aside&gt;

&lt;p&gt;You may say that &lt;a href=&quot;https://en.wikipedia.org/wiki/Transactional_leadership&quot;&gt;transactional management&lt;/a&gt;
is in the past and modern
teams are all about &lt;em&gt;transformational laissez-faire leadership&lt;/em&gt;, where
we don’t do primitive piecework trade, but rather
share common goals, &lt;del&gt;kiss&lt;/del&gt; inspire each other, and
contribute enthusiastically. You may say that
modern leadership is not about giving and taking,
but about sharing and helping.&lt;/p&gt;

&lt;p&gt;I don’t buy this.&lt;/p&gt;

&lt;p&gt;By the way, neither do Anders Skogstad et al. in their article
&lt;a href=&quot;https://www.researchgate.net/publication/6547331_The_Destructiveness_of_Laissez-Faire_Leadership_Behavior&quot;&gt;&lt;em&gt;The Destructiveness of Laissez-Faire Leadership Behavior&lt;/em&gt;&lt;/a&gt;
where they call it a counterproductive leadership style
associated with a stressful environment characterized
by high levels of role stress and interpersonal conflicts;
nor do Abdul Qayyum Chaudhry et al. in their study
&lt;a href=&quot;https://www.semanticscholar.org/paper/Impact-of-Transactional-and-Laissez-Faire-Style-on-Chaudhry-Javed/d7b2d986581910b5e1ce44899353cb1a2cb656a9&quot;&gt;&lt;em&gt;Impact of Transactional and Laissez Faire Leadership Style on Motivation&lt;/em&gt;&lt;/a&gt;,
where they confirm that workers are more motivated in those banks
where transaction leadership style is used.
Neither does Gary Yukl in his critical article
&lt;a href=&quot;https://www.semanticscholar.org/paper/An-evaluation-of-conceptual-weaknesses-in-and-Yukl/15adc8f497ed75ef4468e2b202864b5443d3f9d3&quot;&gt;&lt;em&gt;An Evaluation of the Conceptual Weaknesses in Transformational and Charismatic Leadership Theories&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No matter what we call it, a transactional management or
an inspirational leadership, team work is always about an &lt;em&gt;exchange&lt;/em&gt; of
value: 1) team members give their time and skills, and 2) the team pays them back,
either with cash, or appreciation, or a good office atmosphere.&lt;/p&gt;

&lt;p&gt;There are two possible extreme attitudes: 1) the &lt;em&gt;altruistic&lt;/em&gt; one, when programmers
contribute and expect absolutely nothing back, and 2) an &lt;em&gt;egoistic&lt;/em&gt; one, when
programmers don’t contribute at all, but expect their salaries to grow
every year &lt;del&gt;(also known as software outsourcing)&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;Ever heard about the Fail Fast vs Fail Safe dichotomy? It is
&lt;a href=&quot;http://martinfowler.com/ieeeSoftware/failFast.pdf&quot;&gt;well known&lt;/a&gt; that
any process survives better if it is designed to Fail Fast, revealing internal
problems as soon as possible, instead of being Fail Safe and concealing defects
in an attempt to survive. Even though Fail Fast feels more dangerous, it
leads to higher quality, no matter where we apply it, whether in management or
software design.&lt;/p&gt;

&lt;p&gt;If the team doesn’t reward its members correctly, they (according to the Equity
Theory) won’t contribute properly. If the team doesn’t reward correctly, it’s
a defect in the system. Just like a bug in source code, this defect in
the motivational system can either be 1) concealed (Fail Safe) or 2) revealed (Fail Fast).&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Encouraging team members to contribute altruistically means concealing management defects
&lt;/aside&gt;

&lt;p&gt;Encouraging team members to contribute altruistically means concealing the defect.
Programmers will keep working, slowly losing their motivation over a long
period of time. The quality of the project will degrade and nobody will
understand why it’s happening. The team will fall apart, losing its best
players one by one. They will burn out without even understanding why. Eventually,
the project will die for no obvious reason, while the key failure factor
was the inability to discover the defect due to the very
altruism of the programmers.&lt;/p&gt;

&lt;p&gt;On the other hand, if every programmer acts egoistically and demands
the project to pay them more than they deserve, the business will feel
the problem very soon — simply by running out of money. Egoistic programmers
reveal the defect in the motivational system and make it necessary for
the business to fix it somehow. Either by introducing measurable KPIs,
or by making requirements more strict and demanding, or maybe by checking
the quality of work more attentively. Something will be done immediately,
in order to save the business from bankruptcy. And the measures which will
be taken will help the project to survive and become &lt;em&gt;stronger&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thus, by letting the team pay us less than we deserve, we kill the team.
On the other hand, by letting the team pay us more than we deserve,
we help the team understand its issues faster and, because of that, become
stronger and survive.&lt;/p&gt;

&lt;p&gt;If you are a manager I have a suggestion for you. Fire those who are ready
to work overtime without any compensation. They are the trouble makers. Instead,
work with those who are not afraid of putting their own interests on the
table and demanding what’s theirs. They will make you stronger, … if you manage
to configure your project to deal with their demands correctly. If you don’t,
you will lose the money, the project, and your reputation. But you will
learn something.&lt;/p&gt;

&lt;p&gt;If you are a programmer, I guess you already understand what to do. Demand
as much as you can and deliver as little as possible. This is how you teach
your manager to manage projects and help the business understand and fix
problems faster.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What is your relationship with the employer? &lt;a href=&quot;https://twitter.com/hashtag/altruism?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#altruism&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1211161804367376384?ref_src=twsrc%5Etfw&quot;&gt;December 29, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Altruism means selflessly giving others more than you take back, while egoism means selfishly taking more than you return. Modern theories of management and social life tell us that altruism means prosperity for the society and success to the project. In my book Code Ahead I claim the opposite: altruism hurts the society and kills projects. I truly believe that any group activity eventually collapses if it encourages altruistic behavior among its members, be it a project, a company, or a family. This is why one of the core principles of Zerocracy is #NoAltruism.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/12/love-liza.jpg" /></entry><entry><title type="html">Does Code Review Involve Testing?</title><link href="https://www.yegor256.com/2019/12/03/testing-in-code-review.html" rel="alternate" type="text/html" title="Does Code Review Involve Testing?" /><published>2019-12-03T00:00:00+00:00</published><updated>2019-12-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/12/03/testing-in-code-review</id><content type="html" xml:base="https://www.yegor256.com/2019/12/03/testing-in-code-review.html">&lt;p&gt;When you review a pull/merge request from someone, do you check out
the branch and run the build? I usually don’t, but
&lt;a href=&quot;https://exceptionnotfound.net/should-code-review-include-manual-testing-depends-2/&quot;&gt;some people do&lt;/a&gt;.
Their obvious reason is: running a build, or even testing the product manually,
helps find more important errors. Just looking at the source code may not
reveal all visual defects recently introduced to the HTML/CSS, for example.
It’s better to check out the branch, start Apache, open the site in Chrome,
and see what’s broken. Then, make a screenshot, attach it to the pull request,
and return it back to the author. But I disagree with this, and here is why.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Why Women Kill (2019) by Marc Cherry&quot; src=&quot;/images/2019/12/why-women-kill.jpg&quot; longdesc=&quot;#c9ce840f&quot; /&gt;&lt;figcaption id=&quot;c9ce840f&quot;&gt;Why Women Kill (2019) by Marc Cherry&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The discussion is not new, check
&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/344618/does-code-review-typically-involve-uat-qa-testing&quot;&gt;this&lt;/a&gt;
and &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/95363/should-code-reviewers-test-as-part-of-the-review&quot;&gt;this&lt;/a&gt;
on SO. However, it seems that all the answers there miss the key point.&lt;/p&gt;

&lt;p&gt;As we all know, there are two &lt;em&gt;conflicting roles&lt;/em&gt; in any software project:
constructors and destructors, also known as programmers and testers.
Programmers add new features and fix bugs. Their result is the amount of
functionality created: the more, the better. While testers are breaking
the product and reporting bugs, doing anything they can to prove that it’s
not yet ready to be shipped to the customer. At some point of time the
team (or the management) decides that the fight is over and the product can be
delivered.&lt;/p&gt;

&lt;p&gt;Thanks to this essential conflict &lt;em&gt;quality&lt;/em&gt; is achieved.&lt;/p&gt;

&lt;p&gt;Programmers finish their part of the fight when the code passes the
&lt;em&gt;merge pipeline&lt;/em&gt;: the changes are made at their laptops, unit tests pass
locally, static analysis doesn’t complain, the build is clean,
and the branch is merged to the trunk. This is where programmers stop
and get their bonuses.&lt;/p&gt;

&lt;p&gt;Testers finish their part of the fight when they manage to find a new defect
in the product deployed to the staging or production environment: the
bug is found, reported, and accepted by the project. This is where
testers stop and get their bonuses.&lt;/p&gt;

&lt;p&gt;This is obvious. If it’s not, you may want to read
&lt;a href=&quot;/2014/08/22/art-of-software-testing.html&quot;&gt;&lt;em&gt;The Art of Software Testing&lt;/em&gt;&lt;/a&gt; by Glenford Myers
or
&lt;a href=&quot;/code-ahead.html&quot;&gt;&lt;em&gt;Code Ahead&lt;/em&gt;&lt;/a&gt; by Yegor Bugayenko. You may also want
to watch &lt;a href=&quot;https://www.youtube.com/watch?v=jZitXMQaXvE&quot;&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, where is the place for a code reviewer in this conflict?&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;The objective of a merge pipeline is to protect the code repository from programmers.
&lt;/aside&gt;

&lt;p&gt;I believe code review is part of the merge pipeline, together with unit
tests, static analyzers, linters, coverage control tools, mutation
testers, and everything else the project may want to put in there, in order
to make the life of programmers more difficult and the quality of
the source code higher. The objective of a merge pipeline is to protect
the code repository from programmers.&lt;/p&gt;

&lt;p&gt;Code reviewers are no different than linters or static analyzers: They are
blocking the branches with bad code from getting into the trunk. When they
block, they give their reasons. Their job is done (similar to linters) when
they manage to find a problem in the branch and &lt;em&gt;explain&lt;/em&gt; it. A linter, when
it rejects a pull request, says exactly where the problem is, which line,
and how it can be fixed. This is what a good code reviewer must do:
find a problematic line, explain the problem, and suggest a solution.&lt;/p&gt;

&lt;p&gt;This is what code reviewers must be paid for: completed reviews.&lt;/p&gt;

&lt;p&gt;What is a completed review? Does “Everything is OK” sound like a completed
review? For a linter — yes; for a code reviewer — no. This one is much better:
“I found three problems, explained them, and they were either debated or fixed.”
This is how the job description of a code reviewer may sound: Find the three
most critical problems, explain them, and make sure they are either fixed
or correctly argued.&lt;/p&gt;

&lt;p&gt;How reviewers find these three problems — that’s up to them. They may
do visual inspections of the code or run the build. However, they will still
be paid when they manage to find problems and make sure the author of the
code understands them and either fixes them or explains why they are not
fixable (or not problems). A visual inspection of the code is fast, while
checking the branch out and running the build is a much more time-consuming
operation. Moreover, a bug found after running the build locally is very
difficult to explain in the code review format. The discussion with the
author of the branch will take longer, which means more time to complete
the code review, which means lower effectiveness of the code reviewer.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;An effective, responsible and greedy code reviewer doesn’t explain to the author of the code what is wrong.
&lt;/aside&gt;

&lt;p&gt;My point is that smart code reviewers don’t do that, because it’s not efficient.
Pay attention, not because they don’t care, but because they know a better
way to contribute to the project. Let’s face it, when the branch in front
of us is passing all automated checks like linters and unit tests, and yet still
has some bugs which we can reproduce only by executing the code, something
is not right with our automated tests. An effective, responsible and greedy
code reviewer will not explain to the author of the code what is wrong. Instead,
a new bug will be created, to blame the merge pipeline for being too weak.
And, of course, this new bug will be rewarded.&lt;/p&gt;

&lt;p&gt;Thus, as a code reviewer, you can work with the branch locally, test it
and report your findings to the author. But this will be against your personal
interests and not beneficial for the project. Instead, you should complain
to the project about the low quality of the automated tests and put the
review on hold. When the complaint is resolved, the tests get stronger, you
get back to the review, which will be rejected by the merge pipeline, not by you.&lt;/p&gt;

&lt;p&gt;In this case, everybody wins: the pipeline gets stronger, you earn an extra
bonus for the reported bug, and the review is rejected with a very specific
&lt;em&gt;reproducible&lt;/em&gt; reason.&lt;/p&gt;

&lt;p&gt;P.S. The idea of this blog post was suggested by &lt;a href=&quot;https://twitter.com/rsoesemann&quot;&gt;Robert Sösemann&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">When you review a pull/merge request from someone, do you check out the branch and run the build? I usually don’t, but some people do. Their obvious reason is: running a build, or even testing the product manually, helps find more important errors. Just looking at the source code may not reveal all visual defects recently introduced to the HTML/CSS, for example. It’s better to check out the branch, start Apache, open the site in Chrome, and see what’s broken. Then, make a screenshot, attach it to the pull request, and return it back to the author. But I disagree with this, and here is why.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/12/why-women-kill.jpg" /></entry><entry><title type="html">How Much Cohesion Is Enough?</title><link href="https://www.yegor256.com/2019/11/19/how-much-cohesion-is-enough.html" rel="alternate" type="text/html" title="How Much Cohesion Is Enough?" /><published>2019-11-19T00:00:00+00:00</published><updated>2019-11-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/11/19/how-much-cohesion-is-enough</id><content type="html" xml:base="https://www.yegor256.com/2019/11/19/how-much-cohesion-is-enough.html">&lt;p&gt;Which one is better: &lt;code&gt;books.del(42)&lt;/code&gt; or &lt;code&gt;books.book(42).del()&lt;/code&gt;?
I do both and I rarely can tell which one is better. The first option
is shorter, while the second one is more object-oriented. The first
option is more difficult to extend, while the second one is more
verbose and requires more lines of code, which means a higher chance
of making mistakes. Which one do you prefer?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Irréversible (2002) by Gaspar Noé&quot; src=&quot;/images/2019/11/irreversible.jpg&quot; longdesc=&quot;#3c79fdd0&quot; /&gt;&lt;figcaption id=&quot;3c79fdd0&quot;&gt;Irréversible (2002) by Gaspar Noé&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Either one will work, of course, but the question is which design
is more object-oriented? It seems to depend on the size of the
object &lt;code&gt;books&lt;/code&gt;. If it’s small, there’s no need to get the book first, we can
just delete it right there:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if it’s larger, it’s better to get the &lt;code&gt;book&lt;/code&gt; first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Is there an explicit hard line between these two? Is there
a &lt;a href=&quot;/2017/12/19/srp-is-hoax.html&quot;&gt;strict rule&lt;/a&gt;
or maybe the ambiguous question “Is this class large enough already?”
should be answered every time by a vote?&lt;/p&gt;

&lt;p&gt;Let’s try to give two extreme answers:
1) never large enough, and 2) always large enough.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If a class is &lt;em&gt;never&lt;/em&gt; ready for extracting any parts of it
and turning them into new objects, we will end up with a very big
class, with many attributes, methods, and long lists of arguments
in almost all of them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If a class is &lt;em&gt;always&lt;/em&gt; good enough for extractions,
we will end up with &lt;a href=&quot;/2017/02/28/too-many-classes.html&quot;&gt;many small classes&lt;/a&gt;,
methods with almost no
arguments, and … a better object-oriented design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The common denominator is &lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;&lt;em&gt;cohesion&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Highly cohesive classes include attributes and methods that are related to
each other, while non-cohesive classes include whatever their developers
decided to add, even though some elements may not really belong together.
The first answer will give us a class with a very low cohesion, while
the second one will produce a large amount of highly cohesive small
classes.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;You question the cohesion of your class once you see more than seven methods or more than four attributes.
&lt;/aside&gt;

&lt;p&gt;Thus, the second option is better? Yes, it is. Smaller classes,
higher cohesion, … but more opportunities to lose focus and spread
functionality around too many places. “All methods in one object”
is a much more popular design, even though it’s less cohesive, exactly
because it’s easier to create: just put everything in one place and
call it a day. Later, of course, maintainability problems will show up.&lt;/p&gt;

&lt;p&gt;The bottom line is that there is no exact distinction between the right and
the wrong design in this case. We just have to do our best to keep classes highly
cohesive by decreasing the amount of methods in each of them. If there are
just a few methods, no need to extract the &lt;code&gt;Book&lt;/code&gt;, but once the amount of methods
gets bigger, the &lt;code&gt;Book&lt;/code&gt; is a perfect candidate for a new entity to
define.&lt;/p&gt;

&lt;p&gt;How many methods is OK?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/104406/&quot;&gt;Nobody knows&lt;/a&gt;,
but I would suggest you question the cohesion of your class once you see
more than seven methods or more than four attributes. Also, start thinking
about refactoring when any of your methods (except constructors) accepts more than
two arguments.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Which design is better? &lt;a href=&quot;https://twitter.com/hashtag/elegantobjects?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#elegantobjects&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1198599871495835649?ref_src=twsrc%5Etfw&quot;&gt;November 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Which one is better: books.del(42) or books.book(42).del()? I do both and I rarely can tell which one is better. The first option is shorter, while the second one is more object-oriented. The first option is more difficult to extend, while the second one is more verbose and requires more lines of code, which means a higher chance of making mistakes. Which one do you prefer?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/11/irreversible.jpg" /></entry><entry><title type="html">Revolutionary Evolution</title><link href="https://www.yegor256.com/2019/11/05/revolutionary-evolution.html" rel="alternate" type="text/html" title="Revolutionary Evolution" /><published>2019-11-05T00:00:00+00:00</published><updated>2019-11-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/11/05/revolutionary-evolution</id><content type="html" xml:base="https://www.yegor256.com/2019/11/05/revolutionary-evolution.html">&lt;p&gt;Here is the question I keep hearing almost every time I &lt;a href=&quot;/talks.html&quot;&gt;speak&lt;/a&gt; at
a conference about object-oriented programming and my
&lt;a href=&quot;/2014/09/10/anti-patterns-in-oop.html&quot;&gt;non-traditional&lt;/a&gt;
understanding of it: “How do I convince the whole team to start doing everything so differently?”
(asked &lt;a href=&quot;https://www.yegor256.com/2016/06/27/singletons-must-die.html#comment-4637223953&quot;&gt;here&lt;/a&gt;
just recently). Indeed, it’s easy to change your coding habits
and your software design if you are alone. What do you do if you are a member
of a larger team where everybody is very happy with the Spring Framework
and procedural programming? How do you change &lt;em&gt;their&lt;/em&gt; coding habits?
An even better question is: How do I not get fired while doing it?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;War, Inc. (2008) by Joshua Seftel&quot; src=&quot;/images/2019/11/war-inc.jpg&quot; longdesc=&quot;#1890f8f3&quot; /&gt;&lt;figcaption id=&quot;1890f8f3&quot;&gt;War, Inc. (2008) by Joshua Seftel&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;TL;DR You can’t win alone, you need a gang; assemble it.&lt;/p&gt;

&lt;p&gt;I remember a few years ago I joined a Java team as an architect and my boss
told me that the team had very talented programmers, but they needed
some help. He also told me that the architecture was great, but it needed
to be improved to become even better. And he also told me that I was there
to make changes, which they were looking forward to.&lt;/p&gt;

&lt;p&gt;In just a few weeks I realized that the reality was very different. Most of those
30 programmers were actually junior and could barely tell the difference
between an object method and a static one. I also found out that there
was no architecture at all, just a collection of &lt;code&gt;.java&lt;/code&gt; files created by
different people at different times. And, of course, it became obvious
that no matter how hard I tried, my ideas wouldn’t be accepted, simply
because they sounded too scary to those “talented” people.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Most programmers do what everybody else does, it’s safer.
&lt;/aside&gt;

&lt;p&gt;Seriously, if I had been one of those programmers, sitting there for a few
years, writing some Java code and collecting paychecks
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;twice a month&lt;/a&gt;, would
I be glad to meet some guy telling me that I had been very wrong for the last
few years and now it’s time to re-write everything? No matter how much
sense this guy would be making, I would simply sabotage him to protect myself.
No matter how much we declare the value of individualism and independent
thinking, most people are very social and dependent on the community around
them. In other words, they do what everybody else does. It’s safer.&lt;/p&gt;

&lt;p&gt;Those 30 people were not any better. They were going with the flow, using
&lt;a href=&quot;https://spring.io&quot;&gt;Spring&lt;/a&gt;, and &lt;a href=&quot;https://blog.mybatis.org/&quot;&gt;MyBatis&lt;/a&gt;,
and &lt;a href=&quot;/2016/06/27/singletons-must-die.html&quot;&gt;Singletons&lt;/a&gt;,
and &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;,
and &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;setters&lt;/a&gt;,
and &lt;a href=&quot;/2014/09/10/anti-patterns-in-oop.html&quot;&gt;everything else&lt;/a&gt; we,
&lt;a href=&quot;https://www.elegantobjects.org&quot;&gt;real OOP programmers&lt;/a&gt;, hate so much.
But I had to do something about it,
that is what I was paid for. However, just telling them that starting today we
should get rid of Spring because it’s &lt;a href=&quot;/2016/12/13/mvc-vs-oop.html&quot;&gt;anti-OOP&lt;/a&gt;
would mean only one thing for me: a termination of my contract, sooner or later.&lt;/p&gt;

&lt;p&gt;Such a &lt;em&gt;revolution&lt;/em&gt; would be a serious threat, both for programmers and for
the product. First, it would put most programmers back in junior positions, forcing them
to learn new paradigms from scratch, while they want to keep
enjoying their “senior developer” job titles and salaries. Second,
radical architectural changes always jeopardize the stability of
the existing software.&lt;/p&gt;

&lt;p&gt;This is what I did:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First, I picked the youngest and the most talented ones (at the same time). I talked
to all of them and found out who had the highest potential. Pay attention,
I picked not the best, but the ones I believed were most interested in learning
and growing professionally. No surprise, they were the youngest (career-wise, not by age). It was
obvious that they didn’t have enough professional mentoring and no growth
strategy. It was Spring, what growth can we talk about, right?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, I unofficially became their mentor. This is what junior and ambitious
engineers need most: a teacher. Someone, who can show them the learning
path and the direction to new knowledge. My mentorship was simply about
reviewing the code they wrote and telling them what was wrong, supporting
my criticism with my own blog posts and many other articles/books I could find
about “good” software design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Third, I organized regular weekly lectures for the entire team. I was spending
an hour every Monday speaking in front of them and explaining why
NULL &lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;is bad&lt;/a&gt;,
unit tests &lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;are good&lt;/a&gt;,
and so on. Everybody was free to attend. No surprise,
my “students” were always attending.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fourth, I was refactoring the code base at some critical places and asking
my “students” to review my pull requests. These small challenging tasks gave us good
material to debate and united our sub-team even better. My ultimate goal
was to assemble a gang who agreed with me. Reviewing each others code
was a perfect method for this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In just a few months it became obvious for everybody that the entire team
was not that solid anymore. We had the mainstream majority and the true-OOP minority
gathered around me. The status quo started to shake. The minority were
not happy about the architecture and were not afraid anymore to say so. The
architecture was still bad, but it was not “our” architecture anymore. It was
something we inherited from the past and we were committed
to changing it … eventually.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Don’t wait until your boss changes your title, start building a team of supporters.
&lt;/aside&gt;

&lt;p&gt;My first and primary objective was not to fix the architecture, but to
build a &lt;em&gt;coalition&lt;/em&gt; of supporters, and it was achieved.
I didn’t manage to get the majority though.
There were only 7 people in my gang. But this size was enough to change the
direction of the entire team of 30 programmers. Others passively
joined us later.&lt;/p&gt;

&lt;p&gt;I left that project in less than a year (I wasn’t fired). However, when I was leaving, it was
heading in the right direction: test coverage was growing, objects were
becoming immutable, new DTOs were not being created,
and so on. Spring Framework was still there, though.&lt;/p&gt;

&lt;p&gt;You can do exactly the same in your team, even if your position is still
a “junior” developer. Don’t wait until your boss changes your title, start
mentoring people around you and building a team of supporters. When it gets
big enough, the changes will start happening even without your will.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What is the best argument to convince a team?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1201034995336450049?ref_src=twsrc%5Etfw&quot;&gt;December 1, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="architect" /><summary type="html">Here is the question I keep hearing almost every time I speak at a conference about object-oriented programming and my non-traditional understanding of it: “How do I convince the whole team to start doing everything so differently?” (asked here just recently). Indeed, it’s easy to change your coding habits and your software design if you are alone. What do you do if you are a member of a larger team where everybody is very happy with the Spring Framework and procedural programming? How do you change their coding habits? An even better question is: How do I not get fired while doing it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/11/war-inc.jpg" /></entry><entry><title type="html">Software Quality Award, 2020</title><link href="https://www.yegor256.com/2019/11/03/award-2020.html" rel="alternate" type="text/html" title="Software Quality Award, 2020" /><published>2019-11-03T00:00:00+00:00</published><updated>2019-11-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/11/03/award-2020</id><content type="html" xml:base="https://www.yegor256.com/2019/11/03/award-2020.html">&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/andreea/quality-award.svg&quot; style=&quot;width:300px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This is the &lt;em&gt;sixth&lt;/em&gt; year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The maximum prize
is still the same—&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;,
&lt;a href=&quot;/2016/10/23/award-2017.html&quot;&gt;2017&lt;/a&gt;,
&lt;a href=&quot;/2017/10/24/award-2018.html&quot;&gt;2018&lt;/a&gt;,
&lt;a href=&quot;/2018/09/30/award-2019.html&quot;&gt;2019&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is &lt;a href=&quot;https://docs.google.com/forms/d/1d7-zopzlhDFkVEhxOOYFePCmRbycLGM9O9NFWVDhMaU&quot;&gt;&lt;strong&gt;the form&lt;/strong&gt;&lt;/a&gt;
to fill out.&lt;/p&gt;

&lt;p&gt;Important! Starting this years rewards are given as donations
to a Zerocracy project. This means, that you will have to have
a project in Zerocracy, where you will get the money. You will then
be able to get that money for yourself via micro-tasks.&lt;/p&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One person can submit only one project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Submissions are accepted until September 1, 2020.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I will check the commit history to make sure you’re the main contributor to the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Results will be announced October 15, 2020 on this page and by email (or maybe a bit later).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The best project will receive $4,096
(I may split this amount among a few projects and may give away a smaller amount!).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Winners that received any cash prizes in previous years can’t submit again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Z70PMGaxGhY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Z70PMGaxGhY/mqdefault.jpg&quot; alt=&quot;YouTube video #Z70PMGaxGhY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;How to win $4096 in the next year Quality Award? (webinar #29);
        1 November 2017.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open source (in GitHub).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least 4,096 lines of code (&lt;a href=&quot;https://www.npmjs.com/package/cloc&quot;&gt;&lt;code&gt;cloc&lt;/code&gt;&lt;/a&gt; without any arguments)
&lt;em&gt;and&lt;/em&gt; at least 16,384 &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;hits-of-code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one year old (the age of the first commit).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object-oriented (that’s the only thing I understand).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn’t matter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don’t care about
popularity; quality is the key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it’s still eligible for the award. I don’t care about
your marketing position; quality is all.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="award" /><summary type="html">This is the sixth year of the Software Quality Award. The maximum prize is still the same—$4,096. The rules are still the same. Read on. Previous years are here: 2015, 2016, 2017, 2018, 2019.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/andreea/quality-award.png" /></entry></feed>