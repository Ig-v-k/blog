<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2022-08-24T12:59:51+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Research Paper Simple Template</title><link href="https://www.yegor256.com/2022/08/24/research-paper-template.html" rel="alternate" type="text/html" title="Research Paper Simple Template" /><published>2022-08-24T00:00:00+00:00</published><updated>2022-08-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/24/research-paper-template</id><content type="html" xml:base="https://www.yegor256.com/2022/08/24/research-paper-template.html">&lt;p&gt;My &lt;a href=&quot;http://dblp.uni-trier.de/db/conf/krdb/krdb98.html#Bugaenko98&quot;&gt;first academic paper&lt;/a&gt;
was accepted and published in 1998. My most recent one was rejected by SPLASH just a week ago.
I’m writing two papers right now and co-authoring about ten others.
So far, my results are very poor: way more rejections than I expected.
The key lesson I’ve learned so far: the reason most papers get rejected
is not because they are essentially wrong. Instead, reviewers reject them
because they have no enthusiasm for decrypting a poorly structured text,
even though it may contain potentially interesting thoughts.
In this blog post I suggest how to structure a &lt;a href=&quot;https://en.wikipedia.org/wiki/Research_paper&quot;&gt;research paper&lt;/a&gt;.
Take it with a grain of salt though.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Il Camorrista (1986) by Giuseppe Tornatore&quot; src=&quot;/images/2022/08/il-camorrista.jpg&quot; longdesc=&quot;#f5448d2e&quot; /&gt;&lt;figcaption id=&quot;f5448d2e&quot;&gt;Il Camorrista (1986) by Giuseppe Tornatore&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Read &lt;a href=&quot;https://link.springer.com/book/10.1007/978-1-4471-6639-9&quot;&gt;&lt;em&gt;Writing for Computer Science&lt;/em&gt;&lt;/a&gt; by Justin Zobel.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&quot;https://www.latex-project.org&quot;&gt;LaTeX&lt;/a&gt;, either locally or in &lt;a href=&quot;https://www.overleaf.com&quot;&gt;Overleaf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read my personal &lt;a href=&quot;https://yegor256.github.io/latex-best-practices/main.pdf&quot;&gt;best practices&lt;/a&gt; for LaTeX.&lt;/p&gt;

&lt;h2 id=&quot;title&quot;&gt;Title&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.nature.com/nature-index/news-blog/how-to-write-a-good-research-science-academic-paper-title&quot;&gt;title&lt;/a&gt;
is the &lt;a href=&quot;https://www.nature.com/articles/d41586-018-02404-4&quot;&gt;key message&lt;/a&gt; of your paper.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&quot;https://blog.wordvice.com/how-to-write-the-perfect-title-for-your-research-paper/&quot;&gt;this method&lt;/a&gt; to invent it.&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;https://www.youtube.com/watch?v=TF8MKOfo3gI&quot;&gt;suggest&lt;/a&gt; the following rule:
The first author in the list is you.
The last one is your boss.
Key contributors stay in the middle, in alphabetic order of their last names.
Everybody else is listed in the Acknowledgments section.&lt;/p&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&quot;https://writing.wisc.edu/handbook/assignments/writing-an-abstract-for-your-research-paper/&quot;&gt;abstract&lt;/a&gt;
is a one-paragraph version of the paper, with an emphasis
on Introduction, Results, and Discussion.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Answer these questions in this particular order:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is going on in your field of study?&lt;/li&gt;
  &lt;li&gt;What is wrong?&lt;/li&gt;
  &lt;li&gt;Why is this Problem important?&lt;/li&gt;
  &lt;li&gt;Why is it not fixed yet by others?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, formulate your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Research_question&quot;&gt;Research Question(s)&lt;/a&gt;
or a &lt;a href=&quot;https://www.enago.com/academy/how-to-develop-a-good-research-hypothesis/&quot;&gt;Hypothesis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, make a disputable &lt;a href=&quot;https://writingcenter.unc.edu/tips-and-tools/thesis-statements/&quot;&gt;Thesis Statement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, enumerate the Contributions that your article makes to science.
A Contribution is something tangible, which a reader can take from your study
and use somehow in their own studies.
A theorem, a method, a toolkit, a data-set, or an algorithm are good examples of a Contribution.&lt;/p&gt;

&lt;p&gt;Finally, help your reader understand how the rest of the paper is structured and why.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;A reader may not know much about your field of study. This section
may help them understand your problem domain and its terminology better.
For example, if you write about a new programming language, this section may explain
what a compiler is, and grammar, front-end, back-end, AST, and so on.&lt;/p&gt;

&lt;p&gt;Educate your readers in order to make it more comfortable for them
to read the rest of the paper.&lt;/p&gt;

&lt;h2 id=&quot;related-work&quot;&gt;Related Work&lt;/h2&gt;

&lt;p&gt;In the first paragraph, give an overview of all existing studies that
you managed to find. Classify them somehow.&lt;/p&gt;

&lt;p&gt;Then write one paragraph per study. Explain what the study was about
and what are its key findings. Finish each paragraph with the flaws
you found in the study. Make a claim that due to these flaws this
study is not a solution to the Problem.&lt;/p&gt;

&lt;p&gt;Finish the section with a paragraph claiming that, to the best of your knowledge,
not a single existing study solves the Problem.&lt;/p&gt;

&lt;h2 id=&quot;method-or-device&quot;&gt;Method or Device&lt;/h2&gt;

&lt;p&gt;There are two types of research:
you either &lt;em&gt;observe&lt;/em&gt; the reality in order to discover its new laws
(this is how &lt;a href=&quot;https://en.wikipedia.org/wiki/Isaac_Newton&quot;&gt;Isaac Newton&lt;/a&gt;
discovered his &lt;a href=&quot;https://en.wikipedia.org/wiki/Newton's_laws_of_motion&quot;&gt;laws of motion&lt;/a&gt;),
or &lt;em&gt;extend&lt;/em&gt; the reality with a new device
(this is how &lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Edison&quot;&gt;Thomas Edison&lt;/a&gt; invented the &lt;a href=&quot;https://en.wikipedia.org/wiki/Incandescent_light_bulb&quot;&gt;light bulb&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you observe, algorithmically &lt;a href=&quot;https://research.com/research/how-to-write-research-methodology&quot;&gt;describe&lt;/a&gt; the Method.&lt;/p&gt;

&lt;p&gt;If you extend, describe the Device and its usage scenarios.&lt;/p&gt;

&lt;h2 id=&quot;proof&quot;&gt;Proof&lt;/h2&gt;

&lt;p&gt;Formally prove that your Device possesses certain qualities, predicted in the Hypothesis.&lt;/p&gt;

&lt;p&gt;The section mostly consists of definitions, examples, lemmas, theorems, and proofs.&lt;/p&gt;

&lt;h2 id=&quot;experimental-results&quot;&gt;Experimental Results&lt;/h2&gt;

&lt;p&gt;Apply the Method, step by step, to the real data.&lt;/p&gt;

&lt;p&gt;Present your findings using tables and graphs.&lt;/p&gt;

&lt;p&gt;Post your input data, intermediate data, and all output data in a public
GitHub repository. Make a reference to it.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;Informally &lt;a href=&quot;https://plos.org/resource/how-to-write-conclusions/&quot;&gt;interpret&lt;/a&gt; your results.&lt;/p&gt;

&lt;p&gt;Explain how your results are different from Related Work.&lt;/p&gt;

&lt;p&gt;Highlight limitations of the study. Discuss its &lt;a href=&quot;https://www.creative-wisdom.com/teaching/WBI/threat.shtml&quot;&gt;threats to validity&lt;/a&gt;.
Any method or any idea has its flaws. If you don’t admit them, your
readers will think that you are either concealing the issues or
not understanding your own domain well enough.&lt;/p&gt;

&lt;p&gt;Highlight the significance of the study.&lt;/p&gt;

&lt;p&gt;Discuss unanswered questions and suggest topics for future studies.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Spend one paragraph explaining how your research question was answered
in this paper. Imagine the reader just reads the Introduction and
then immediately this Conclusion. It should read fluently.&lt;/p&gt;

&lt;p&gt;This paragraph is a short version of the Discussion.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h2&gt;

&lt;p&gt;Here, you say “many thanks to individuals and organizations that
contributed to the research, including …” You list them all, in
alphabetic order. You may add your bosses, colleagues, people
who reviewed your paper, your parents, and even your dog.&lt;/p&gt;

&lt;p&gt;If the research was done while you were an employee of ACME Inc.,
say that “the research was funded by ACME Inc.”&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Use &lt;a href=&quot;https://ctan.org/pkg/biblatex?lang=en&quot;&gt;BibLaTeX&lt;/a&gt; to automate citations,
and &lt;a href=&quot;https://tex.stackexchange.com/questions/25701&quot;&gt;read this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use either &lt;a href=&quot;https://en.wikipedia.org/wiki/APA_style&quot;&gt;APA&lt;/a&gt;
or &lt;a href=&quot;https://ieeeauthorcenter.ieee.org/wp-content/uploads/IEEE-Reference-Guide.pdf&quot;&gt;IEEE&lt;/a&gt;
citation styles.&lt;/p&gt;

&lt;h2 id=&quot;appendices&quot;&gt;Appendices&lt;/h2&gt;

&lt;p&gt;Long tables, complex proofs, large figures are good candidates for placing
into appendices. Keeping them in the main part of the paper may jeopardize
its readability.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html">My first academic paper was accepted and published in 1998. My most recent one was rejected by SPLASH just a week ago. I’m writing two papers right now and co-authoring about ten others. So far, my results are very poor: way more rejections than I expected. The key lesson I’ve learned so far: the reason most papers get rejected is not because they are essentially wrong. Instead, reviewers reject them because they have no enthusiasm for decrypting a poorly structured text, even though it may contain potentially interesting thoughts. In this blog post I suggest how to structure a research paper. Take it with a grain of salt though.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/08/il-camorrista.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/08/il-camorrista.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Declarative and Immutable Pipeline of Transformations</title><link href="https://www.yegor256.com/2022/08/10/xsline-immutable-pipeline.html" rel="alternate" type="text/html" title="Declarative and Immutable Pipeline of Transformations" /><published>2022-08-10T00:00:00+00:00</published><updated>2022-08-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/10/xsline-immutable-pipeline</id><content type="html" xml:base="https://www.yegor256.com/2022/08/10/xsline-immutable-pipeline.html">&lt;p&gt;A few months ago I made a &lt;a href=&quot;https://github.com/yegor256/xsline&quot;&gt;small Java library&lt;/a&gt;,
which is worth explaining since
the design of its classes and interfaces is pretty unusual. It’s very much
object-oriented for a pretty imperative task: building a pipeline of
document transformations. The goal was to do this in a declarative and
immutable way, and in Java. Well, as much as it’s possible.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Barfuss (2005) by Til Schweiger&quot; src=&quot;/images/2022/08/barfuss.jpg&quot; longdesc=&quot;#53e51a8f&quot; /&gt;&lt;figcaption id=&quot;53e51a8f&quot;&gt;Barfuss (2005) by Til Schweiger&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say you have a document, and you have a collection of transformations,
each of which will do something with the document. Each transformation, for example,
is a small piece of Java code. You want to build a list
of transformations and then pass a document through this list.&lt;/p&gt;

&lt;p&gt;First, I made an interface &lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Shift.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;&lt;/a&gt;
(instead of the frequently used and boring “transformation”):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I made an interface &lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Train.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Train&lt;/code&gt;&lt;/a&gt;
(this is the name I made up for the collection
of transformations) and its default implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ah, I forgot to tell you. I’m a big fan of &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt;
objects. That’s why the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Train&lt;/code&gt; doesn’t have a method &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, but instead has &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;. The difference is that
&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; modifies the object, while &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; makes a new one.&lt;/p&gt;

&lt;p&gt;Now, I can build a train of shifts with
&lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/TrDefault.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrDefault&lt;/code&gt;&lt;/a&gt;,
a simple default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&lt;/code&gt;, assuming
&lt;code class=&quot;highlighter-rouge&quot;&gt;ShiftA&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShiftB&lt;/code&gt; are already implemented:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShiftA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShiftB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I created an &lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Xsline.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xsline&lt;/code&gt;&lt;/a&gt;
class (it’s “XSL” + “pipeline”, since in my case
I’m managing XML documents and transform them using XSL stylesheets). An instance
of this class encapsulates an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&lt;/code&gt; and then passes a document
through all its transformations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Xsline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far so good.&lt;/p&gt;

&lt;p&gt;Now, I want all my transformations to log themselves. I created
&lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/StLogged.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StLogged&lt;/code&gt;&lt;/a&gt;,
a decorator of &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;, which encapsulates the original &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;, decorates its method &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;,
and prints a message to the console when the transformation is completed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StLogged&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Transformation completed!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, I have to do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StLogged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShiftA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StLogged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShiftB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks like a duplication of &lt;code class=&quot;highlighter-rouge&quot;&gt;new StLogged(&lt;/code&gt;, especially with a collection of a few dozen
shifts. To get rid of this duplication I created a decorator for &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&lt;/code&gt;, which
on the fly decorates shifts that it encapsulates, using
&lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/StLogged.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StLogged&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrLogged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShiftA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShiftB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In my case, all shifts are doing XSL transformations, taking XSL stylesheets from
files available in classpath. That’s why the code looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrLogged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StXSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet-a.xsl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StXSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet-b.xsl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is an obvious duplication of &lt;code class=&quot;highlighter-rouge&quot;&gt;new StXSL(...)&lt;/code&gt;, but I can’t simply get rid of it,
since the method &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; expects an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;, not a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. To solve this,
I made the &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&lt;/code&gt; generic and created
&lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/TrClasspath.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrClasspath&lt;/code&gt;&lt;/a&gt;
decorator:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet-a.xsl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet-b.xsl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrClasspath.with()&lt;/code&gt; accepts &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, turns it into
&lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/StXSL.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StXSL&lt;/code&gt;&lt;/a&gt;
and passes to &lt;code class=&quot;highlighter-rouge&quot;&gt;TrDefault.with()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pay attention to the snippet above: the &lt;code class=&quot;highlighter-rouge&quot;&gt;train&lt;/code&gt; is now of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&amp;lt;String&amp;gt;&lt;/code&gt;, not &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&amp;lt;Shift&amp;gt;&lt;/code&gt;,
as would be required by &lt;code class=&quot;highlighter-rouge&quot;&gt;Xsline&lt;/code&gt;.
The question now is: how do we get back to &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&amp;lt;Shift&amp;gt;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Ah, I forgot to mention. I wanted to design this library with one important principle
in mind, &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;suggested&lt;/a&gt;
in 2014: all objects may only implement methods from their interfaces. That’s why,
I couldn’t just add a method &lt;code class=&quot;highlighter-rouge&quot;&gt;getEncapsulatedTrain()&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;TrClasspath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I introduced a new interface
&lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/Train.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Train.Temporary&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;
with a single method &lt;code class=&quot;highlighter-rouge&quot;&gt;back()&lt;/code&gt;
returning &lt;code class=&quot;highlighter-rouge&quot;&gt;Train&amp;lt;T&amp;gt;&lt;/code&gt;. The class &lt;code class=&quot;highlighter-rouge&quot;&gt;TrClasspath&lt;/code&gt; implements
it and I can do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet-a.xsl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet-b.xsl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next I decided to get rid of the duplication of &lt;code class=&quot;highlighter-rouge&quot;&gt;.with()&lt;/code&gt; calls. Obviously, it would
be easier to have the ability to provide a list of file names as an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;
and build the train from it. I created a new class
&lt;a href=&quot;https://github.com/yegor256/xsline/blob/0.5.2/src/main/java/com/yegor256/xsline/TrBulk.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrBulk&lt;/code&gt;&lt;/a&gt;,
which does exactly that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;stylesheet-a.xsl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;stylesheet-b.xsl&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrBulk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this design I can construct the train in almost any possible way.&lt;/p&gt;

&lt;p&gt;See, for example, how we use it &lt;a href=&quot;https://github.com/objectionary/eo/blob/0.23.6/eo-parser/src/main/java/org/eolang/parser/ParsingTrain.java#L86-L103&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/objectionary/eo/blob/0.23.6/eo-maven-plugin/src/main/java/org/eolang/maven/SpyTrain.java#L49-L75&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="xml" /><summary type="html">A few months ago I made a small Java library, which is worth explaining since the design of its classes and interfaces is pretty unusual. It’s very much object-oriented for a pretty imperative task: building a pipeline of document transformations. The goal was to do this in a declarative and immutable way, and in Java. Well, as much as it’s possible.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/08/barfuss.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/08/barfuss.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Code and Its Tests in Different Pull Requests</title><link href="https://www.yegor256.com/2022/08/04/code-and-tests-different-pull-requests.html" rel="alternate" type="text/html" title="The Code and Its Tests in Different Pull Requests" /><published>2022-08-04T00:00:00+00:00</published><updated>2022-08-04T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/08/04/code-and-tests-different-pull-requests</id><content type="html" xml:base="https://www.yegor256.com/2022/08/04/code-and-tests-different-pull-requests.html">&lt;p&gt;I suggested this idea a few weeks ago
&lt;a href=&quot;https://twitter.com/yegor256/status/1525758255225528320&quot;&gt;on Twitter&lt;/a&gt;
and got mostly negative reactions. That’s why I wrote this blog post, to elaborate on the
subject in an attempt to convince you. Here is the rule I’m suggesting:
always submit changes to the code separately from the changes to
its unit tests. Simply put, in one pull request you modify the tests, maybe
marking some of them as “disabled.” You merge this pull request and then
make the second one, modifying the code and most probably
removing the “disabled” markers from the tests. You don’t touch the
body of the tests in the second pull request.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Mafioso (1962) by Alberto Lattuada&quot; src=&quot;/images/2022/06/mafioso.jpg&quot; longdesc=&quot;#e0369b6c&quot; /&gt;&lt;figcaption id=&quot;e0369b6c&quot;&gt;Mafioso (1962) by Alberto Lattuada&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;It may look like a contradiction of the principles of
&lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;TDD&lt;/a&gt;.
However, to me this approach looks like an extreme application of TDD, not a violation
of it. First we merge the tests, which most probably will break the build, since
the functionality that they test is not present yet. In order to avoid the broken
state of the build we disable the new tests that we added and the tests that we modified.
In &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;JUnit 5&lt;/a&gt;, for example, we do this with
&lt;a href=&quot;https://junit.org/junit5/docs/5.0.0-M2/api/org/junit/jupiter/api/Disabled.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Disabled&lt;/code&gt;&lt;/a&gt; annotation.&lt;/p&gt;

&lt;p&gt;Reviewers validate the changes you make, asking themselves these questions:
“Do we really need this new functionality?
Does it conflict with the existing functionality?
Does it make sense to test new functionality this particular way?”
They don’t think about &lt;em&gt;how&lt;/em&gt; the functionality will be implemented, they
only care about the &lt;em&gt;requirements&lt;/em&gt; you impose in your tests against the
product. The reviewers act more or less as requirements engineers at this stage.
They validate the &lt;em&gt;intent&lt;/em&gt;, not the &lt;em&gt;realization&lt;/em&gt; of it.&lt;/p&gt;

&lt;p&gt;Then, in the second pull request, you modify the code without touching the tests.
Now, reviewers can rest assured that you haven’t changed the requirements just to make
them more suitable for your implementation. In other words, they know that you didn’t &lt;em&gt;cheat&lt;/em&gt;.
Since you didn’t touch the tests, it’s a guarantee for reviewers that requirements
remain stable and you only modify the implementation. Speaking business language,
you don’t change the &lt;em&gt;contract&lt;/em&gt; if/when you understand that you can’t deliver
what was &lt;em&gt;promised&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, when you modify the tests only, without touching the code, it’s much
easier for the reviewers to understand whether or not your changes truly belong to the
problem you are supposed to be solving. We programmers tend to make a typical mistake:
we make changes to the code, some tests fail, we fix the tests … no matter whether
they are “our” tests or not. We simply make the tests pass regardless of &lt;em&gt;why&lt;/em&gt; they fail.
Instead of &lt;em&gt;listening&lt;/em&gt; to them, we shut them up. Later, the reviewers may not understand
why some tests were modified. Especially if a pull request is big. They will most
probably blindly trust you and merge the pull request.&lt;/p&gt;

&lt;p&gt;That’s why separating tests from code is a solution. First, the tests get modified
and the reviewers will pay attention only to the scope of tests. They will easily
catch you if the changes are too broad and are not related to the problem you
are solving. Then the code gets modified and reviewers don’t need to worry about
tests at all. They don’t pay attention to them, they only review the implementation.
They know that you can’t break the tests since the build pipeline
won’t allow you to do this.&lt;/p&gt;

&lt;p&gt;What do you think now? Does it make sense?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">I suggested this idea a few weeks ago on Twitter and got mostly negative reactions. That’s why I wrote this blog post, to elaborate on the subject in an attempt to convince you. Here is the rule I’m suggesting: always submit changes to the code separately from the changes to its unit tests. Simply put, in one pull request you modify the tests, maybe marking some of them as “disabled.” You merge this pull request and then make the second one, modifying the code and most probably removing the “disabled” markers from the tests. You don’t touch the body of the tests in the second pull request.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/mafioso.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/mafioso.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Command Line Default Options in Linearized Plain Text</title><link href="https://www.yegor256.com/2022/07/20/command-line-defaults.html" rel="alternate" type="text/html" title="Command Line Default Options in Linearized Plain Text" /><published>2022-07-20T00:00:00+00:00</published><updated>2022-07-20T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/07/20/command-line-defaults</id><content type="html" xml:base="https://www.yegor256.com/2022/07/20/command-line-defaults.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;https://github.com/yegor256/xcop&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yegor256/xcop/master/logo.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/2017/08/29/xcop.html&quot;&gt;A few years ago&lt;/a&gt;
I created &lt;a href=&quot;https://github.com/yegor256/xcop&quot;&gt;xcop&lt;/a&gt;,
a simple command line tool that
can check the style of an XML file. It’s similar to
&lt;a href=&quot;https://checkstyle.sourceforge.io&quot;&gt;Checkstyle&lt;/a&gt; (for Java) and
&lt;a href=&quot;https://pypi.org/project/pep8/&quot;&gt;Pep8&lt;/a&gt; (for Python),
but for XML. It’s pretty easy to use &lt;code class=&quot;highlighter-rouge&quot;&gt;xcop&lt;/code&gt;: just run it with a few command
line arguments and it returns the list of errors found in your XML file, if there are any. However,
some of the arguments may be convenient to have as defaults and instead of
passing them through the command line on every execution, we could store them in some configuration file.
The question is: What is the best format for this file?
&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt;, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/TOML&quot;&gt;TOML&lt;/a&gt;?
None of them! I suggest plain text.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Trotsky (2009) by Jacob Tierney&quot; src=&quot;/images/2022/07/the-trotsky.jpg&quot; longdesc=&quot;#2a549763&quot; /&gt;&lt;figcaption id=&quot;2a549763&quot;&gt;The Trotsky (2009) by Jacob Tierney&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say, you want &lt;code class=&quot;highlighter-rouge&quot;&gt;xcop&lt;/code&gt; to check all &lt;code class=&quot;highlighter-rouge&quot;&gt;*.xml&lt;/code&gt; files in your repository,
but ignore XML files in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.idea/&lt;/code&gt; directory. You also want to make sure
all XML files have a license in their preamble. This is how you would
call &lt;code class=&quot;highlighter-rouge&quot;&gt;xcop&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ xcop --include '*.xml' --exclude '.idea/**' \
  --license LICENSE.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You have to use this set of arguments everywhere you call &lt;code class=&quot;highlighter-rouge&quot;&gt;xcop&lt;/code&gt;:
in the build script, in the CI/CD pipeline, and on your laptop when you check
that everything is correct. What some of us sometimes do is create a new
Bash file called &lt;code class=&quot;highlighter-rouge&quot;&gt;run_xcop.sh&lt;/code&gt; with exactly this single command.&lt;/p&gt;

&lt;p&gt;I suggest a better solution. You can create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.xcop&lt;/code&gt;
plain text file in the root of the repository and put all
the required “default” command line options there, one per line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--include=*.xml
--exclude=.idea/**
--license=LICENSE.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you can call the tool just like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ xcop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will find the &lt;code class=&quot;highlighter-rouge&quot;&gt;.xcop&lt;/code&gt; file and will read all lines from it, treating
each of them as command line arguments. It will basically &lt;em&gt;concatenate&lt;/em&gt;
what is provided in the command line with what is found in the file
with defaults.&lt;/p&gt;

&lt;p&gt;I believe this approach is much better than YAML, JSON, XML, TOML, INI,
and other configuration formats simply because it doesn’t require us
users to learn two formats: one for command line options, another one
for the configuration file. We learn just one and use it interchangeably
either when we call the tool “manually” or when we configure its
behavior in the file with defaults.&lt;/p&gt;

&lt;p&gt;By the way, it’s possible to configure the behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;xcop&lt;/code&gt; globally
creating the file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xcop&lt;/code&gt; (in the home directory of the user). The
defaults from this file will also be concatenated with the ones provided
in the command line and with the ones found in the local &lt;code class=&quot;highlighter-rouge&quot;&gt;.xcop&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I designed a few of my other command line tools using the same principle,
including
&lt;a href=&quot;https://github.com/yegor256/pdd&quot;&gt;pdd&lt;/a&gt;,
&lt;a href=&quot;https://github.com/yegor256/texqc&quot;&gt;texqc&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/yegor256/texsc&quot;&gt;texsc&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">A few years ago I created xcop, a simple command line tool that can check the style of an XML file. It’s similar to Checkstyle (for Java) and Pep8 (for Python), but for XML. It’s pretty easy to use xcop: just run it with a few command line arguments and it returns the list of errors found in your XML file, if there are any. However, some of the arguments may be convenient to have as defaults and instead of passing them through the command line on every execution, we could store them in some configuration file. The question is: What is the best format for this file? YAML, JSON, or TOML? None of them! I suggest plain text.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/07/the-trotsky.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/07/the-trotsky.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Automated Tests Are the Safety Net that Saves You</title><link href="https://www.yegor256.com/2022/07/05/safety-net.html" rel="alternate" type="text/html" title="Automated Tests Are the Safety Net that Saves You" /><published>2022-07-05T00:00:00+00:00</published><updated>2022-07-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/07/05/safety-net</id><content type="html" xml:base="https://www.yegor256.com/2022/07/05/safety-net.html">&lt;p&gt;Automated tests are the ones that are usually called unit tests or integration tests,
or just any tests that are being executed &lt;em&gt;automatically&lt;/em&gt;. That’s the difference
between them and manual tests. What is the purpose of automated tests?
First and foremost, they reduce the amount of routine work: we don’t
need to remember how to test a module, the tests remember. We just click
a button and a suite of tests, which may consist of hundreds or thousands,
runs and reports errors, if any are found. Saving time is important,
but it’s not the only and, if you ask me, not the most important purpose
of automated tests. A more important one is their role as a safety net.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Main picture&quot; src=&quot;/images/2022/06/safety-net.jpg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Do you know what a safety net is? Wikipedia
&lt;a href=&quot;https://en.wikipedia.org/wiki/Safety_net&quot;&gt;says&lt;/a&gt; that
it is “a net to protect people from injury after falling from heights.”
You most probably have seen it on buildings which are being
constructed or reconstructed.
The red one in the picture is the safety net.&lt;/p&gt;

&lt;p&gt;If construction workers accidentally fall down
or drop their tools, they won’t die and won’t kill anyone on the ground.
Does this knowledge help them work more effectively? I believe it does. I didn’t
find any research on this subject, comparing the productivity
of workers who know that there is a safety net beneath them with the productivity
of workers who know that a mistake would most probably cost them their lives or
the life of child playing on the ground. The results of such research are obvious though,
I believe.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Y0Zx_sdVG48&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Y0Zx_sdVG48/mqdefault.jpg&quot; alt=&quot;YouTube video #Y0Zx_sdVG48&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M199: Unit tests are the Safety Net that you can&amp;#39;t afford to not use;
        24 June 2022.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;The same is true for us programmers. Modifying the source code and knowing that
there are no automated tests in place is similar to working at height
without a safety net: one mistake could cost you server downtime, a frustrated
customer, lost money, and maybe a lost job. How high would the productivity
of a programmer be while working like this? Do we need to do research to find out?
Or is the answer as obvious as for construction workers?&lt;/p&gt;

&lt;p&gt;In order to give you enough confidence, automated tests must not only be
written and committed to a repository, but they must be automatically executed
before every change you try to make to the trunk. You must be able
to run them after every change you make locally, while incrementally developing the code.
Then, you must know that even if you accidentally forget to run them locally
and send your branch to the trunk for merging, the automated merge pipeline
will catch you.&lt;/p&gt;

&lt;p&gt;The more time and effort you invest into making your safety net strong,
that is, the better your tests cover your code, then the more &lt;em&gt;productive&lt;/em&gt; your
work will be, the safer you will feel in introducing new features or fixing bugs.
Simply put, you will code &lt;em&gt;faster&lt;/em&gt; and &lt;em&gt;better&lt;/em&gt;. Just because you know that
you can’t break what you did yesterday.&lt;/p&gt;

&lt;p&gt;The first thing you do when you start a new software project is
implement a safety net: you automate the build pipeline and you create
a few simple automated tests. You make sure they protect you. Only then do you
start writing code. Ask construction workers: are they allowed to start a workday
without a safety net? Obviously not. I’m sure it’s even illegal. The same
must be true for us programmers: coding without the safety net of automated tests
must be illegal.&lt;/p&gt;

&lt;p&gt;When a bug is reported to you by your customers, this should mean
that the safety net has a &lt;em&gt;hole&lt;/em&gt;. It is not tight enough, that’s why the bug
fell down on the head of your customer. What do you do before you fix the bug?
You fix the safety net. You add more automated tests, which will catch this
bug in the future. Only then do you fix the bug.&lt;/p&gt;

&lt;p&gt;I believe that the safety net of a software project is its most valuable asset.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">Automated tests are the ones that are usually called unit tests or integration tests, or just any tests that are being executed automatically. That’s the difference between them and manual tests. What is the purpose of automated tests? First and foremost, they reduce the amount of routine work: we don’t need to remember how to test a module, the tests remember. We just click a button and a suite of tests, which may consist of hundreds or thousands, runs and reports errors, if any are found. Saving time is important, but it’s not the only and, if you ask me, not the most important purpose of automated tests. A more important one is their role as a safety net.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/safety-net.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/safety-net.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Principle of One</title><link href="https://www.yegor256.com/2022/06/14/principle-of-one.html" rel="alternate" type="text/html" title="The Principle of One" /><published>2022-06-14T00:00:00+00:00</published><updated>2022-06-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/06/14/principle-of-one</id><content type="html" xml:base="https://www.yegor256.com/2022/06/14/principle-of-one.html">&lt;p&gt;When I make a slide deck for a new presentation, invent a new domain name, think about
a name for a new Java class, itemize bullet points in an academic paper, even
write an email—I try to follow a simple principle which helps me make
my content more solid. Well, at least I believe it does. Maybe it will help you as well.
The principle is simple: at all costs, try to squeeze the content into
&lt;em&gt;one&lt;/em&gt; word, &lt;em&gt;one&lt;/em&gt; sentence, &lt;em&gt;one&lt;/em&gt; paragraph, or &lt;em&gt;one&lt;/em&gt; page.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;True Story (2021) by Eric Newman&quot; src=&quot;/images/2022/06/true-story.jpg&quot; longdesc=&quot;#f816eca5&quot; /&gt;&lt;figcaption id=&quot;f816eca5&quot;&gt;True Story (2021) by Eric Newman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;A more formal definition of the principle would be this:
it’s either one word/sentence/paragraph/page &lt;em&gt;or&lt;/em&gt; way more.
Let’s see an example. Say I need to list my plans for tomorrow:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- write a new article
- send an email to my boss
- cook a dinner
- take a nap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Do any of them need to be longer than one word? Not really. “Take a nap”
is just three words, as is “cook a dinner”. On the one hand, three might not be considered
“way more” than one. On the other, they could be shortened without
any loss of meaning. Thus, I have to decide whether to make them all &lt;em&gt;much&lt;/em&gt;
longer than one word or shorten them all to a single one.
The second choice is always preferable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- article
- email
- dinner
- nap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I wrote about &lt;a href=&quot;/2015/01/12/compound-name-is-code-smell.html&quot;&gt;compound variable names&lt;/a&gt;
in an earlier post: the same principle is applicable
to them. Variables must either be nouns without any other words around them,
or use many more words, which is an exceptional situation.&lt;/p&gt;

&lt;p&gt;In another &lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;blog post about resumes&lt;/a&gt;
I mentioned that a good CV must take exactly one page.
If it’s more, it should be many more. But definitely not two
or three pages.&lt;/p&gt;

&lt;p&gt;I suggest applying this principle to every piece of content
you write: try to squeeze it into &lt;em&gt;one&lt;/em&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">When I make a slide deck for a new presentation, invent a new domain name, think about a name for a new Java class, itemize bullet points in an academic paper, even write an email—I try to follow a simple principle which helps me make my content more solid. Well, at least I believe it does. Maybe it will help you as well. The principle is simple: at all costs, try to squeeze the content into one word, one sentence, one paragraph, or one page.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/true-story.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/true-story.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reflection Means Hidden Coupling</title><link href="https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling.html" rel="alternate" type="text/html" title="Reflection Means Hidden Coupling" /><published>2022-06-05T00:00:00+00:00</published><updated>2022-06-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling</id><content type="html" xml:base="https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reflective_programming&quot;&gt;Reflective programming&lt;/a&gt; (or reflection) happens
when your code changes itself on the fly. For example, a method of a class, when we call it,
among other things adds a new method to the class
(also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Monkey_patch&quot;&gt;monkey patching&lt;/a&gt;). 
Java, Python, PHP, JavaScript, you name it—they
all have this “powerful” feature. What’s 
&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/193526&quot;&gt;wrong&lt;/a&gt; with it? 
Well, it’s 
&lt;a href=&quot;https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/&quot;&gt;slow&lt;/a&gt;, 
&lt;a href=&quot;https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection&quot;&gt;dangerous&lt;/a&gt;,
and hard to read and debug.
But all that is nothing compared with the &lt;em&gt;coupling&lt;/em&gt; it introduces to the code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Wheelman (2017) by Jeremy Rush&quot; src=&quot;/images/2022/02/wheelman.jpg&quot; longdesc=&quot;#18fe7bad&quot; /&gt;&lt;figcaption id=&quot;18fe7bad&quot;&gt;Wheelman (2017) by Jeremy Rush&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are many situations when reflection can “help” you.
Let’s go through all of them and see why the coupling they add to the code is
unnecessary and harmful.&lt;/p&gt;

&lt;h2 id=&quot;type-checking-and-casting&quot;&gt;Type Checking and Casting&lt;/h2&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m not sure everybody would agree that this is reflection, but I believe
it is: we check the structure of the class at runtime and then make
a call to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; which doesn’t exist in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;. This method only
“shows up” at runtime, when we make
a &lt;a href=&quot;https://stackoverflow.com/questions/19017258&quot;&gt;dynamic shortcut&lt;/a&gt;
to it in the bytecode.&lt;/p&gt;

&lt;p&gt;Why is this bad, aside from the fact that
1) it’s &lt;a href=&quot;http://www.buzdin.lv/2011/01/is-java-reflection-really-slow.html&quot;&gt;slow&lt;/a&gt;,
2) it’s more verbose and so &lt;a href=&quot;https://armedia.com/blog/instanceof-avoid-in-code/&quot;&gt;less readable&lt;/a&gt;,
and
3) it introduces a new point of failure since the object &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; may not be
an instance of class &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;,
leading to &lt;a href=&quot;https://docs.oracle.com/javaee/5/api/javax/el/MethodNotFoundException.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MethodNotFoundException&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The biggest problem the code above causes to the entire program is the coupling
it introduces between itself and its clients, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The size is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method may work or it may not. It will depend on the actual class of &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;. If it is
&lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;, the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; will succeed. Otherwise, there will be a runtime failure.
By looking at the method &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; we can’t tell what is the right way to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; in order
to avoid runtime failure. We need to read the body of &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; and only then can we change &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt;
to something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The size is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The size is unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code seems to be OK so far. However, what will happen when &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; changes its implementation
to something like this (I took it from
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;this article&lt;/a&gt;
about casting):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; perfectly handles any type that’s coming in, whether it’s an instance
of &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt; or not. However, the method &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; doesn’t know about the changes made in the method &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt;.
Instead, it still believes that &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; will break if it gets anything aside from &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;.
To keep them in sync we have to remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; knows too much about &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt;  and will
have to modify it when &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; changes. Thus, it’s valid to say that &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; is
coupled with &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; and this coupling is &lt;em&gt;hidden&lt;/em&gt;:
most probably, we will forget to modify &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; gets a better implementation.
Moreover, there could be many other places in the program similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt;,
which we must remember to modify when the method &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; changes.
Obviously, we will forget about most of them.&lt;/p&gt;

&lt;p&gt;This coupling, which is a big maintainability issue, was introduced thanks to the
very existence of reflection in Java. If we had not been able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator
and class casting (or did not even have them), the coupling would not be possible in the first place.&lt;/p&gt;

&lt;h2 id=&quot;forceful-testing&quot;&gt;Forceful Testing&lt;/h2&gt;

&lt;p&gt;Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;The book is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; by &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How would you write a unit test for this class and for its method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;?
Obviously, it’s almost impossible without refactoring the class.
The method &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; sends text to the console, which we can’t easily mock
since it’s “static.” The right way would be to make &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out&lt;/code&gt; injectable
as a dependency, but some of us
&lt;a href=&quot;https://stackoverflow.com/questions/34571&quot;&gt;believe&lt;/a&gt; that reflection is a better option,
which would allow us to test the private method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; directly, without
calling &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testNamingWorks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;David West&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Object Thinking&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Object Thinking by David West&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also use &lt;a href=&quot;https://github.com/powermock/powermock&quot;&gt;PowerMock&lt;/a&gt; Java library
to do many “beautiful” things with private methods.&lt;/p&gt;

&lt;p&gt;The problem with this test is that it is tightly coupled with the object it
tests: the test &lt;em&gt;knows&lt;/em&gt; too much about the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;. The test knows that the
class contains a private method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;. The test also knows that the method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;
will at some point be called by the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;. Instead of testing &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;
the test tests what it’s not supposed to be aware of: the internals of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main purpose of a unit test is to be a “safety net” for us
programmers trying to modify the code that was written earlier or much much earlier:
if we break anything, the tests give us a timely signal, “highlighting” the place
where the code was broken. If nothing is highlighted and the tests are green
I can continue modifying the code. I rely on the information from my tests. I trust them.&lt;/p&gt;

&lt;p&gt;I take the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; and want to modify it, simply making the method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;
return &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. It’s a pretty
innocent modification, which may be necessary for performance considerations.
Before I start making any changes, I run all tests
(it’s a &lt;a href=&quot;https://wiki.c2.com/?TestEveryRefactoring&quot;&gt;good practice&lt;/a&gt;) and they all pass.
Then I make my changes, expecting no tests to fail:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;The book is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; by &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, the test &lt;code class=&quot;highlighter-rouge&quot;&gt;BookTest&lt;/code&gt; will fail, because it &lt;em&gt;expects&lt;/em&gt; my class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; to have
method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; which returns &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. If it’s not my test or I wrote it a long time ago,
I would be frustrated to learn this fact: the test expects me to write my &lt;em&gt;private&lt;/em&gt; methods
only one specific way. Why? What’s wrong with returning &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;? I would think
that there is some hidden reason for this. Otherwise, why would a test demand anything
from a private implementation of a class? Very soon, after some investigation I would
find out that there is no reason. It’s just an assumption the test made about the
internals of &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; and this assumption has no reasons aside from “We didn’t have time
to refactor the class and make &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out&lt;/code&gt; injectable.”&lt;/p&gt;

&lt;p&gt;By the way, this testing approach is
&lt;a href=&quot;/2018/12/11/unit-testing-anti-patterns.html&quot;&gt;known&lt;/a&gt;
as the “Inspector” test anti-pattern.&lt;/p&gt;

&lt;p&gt;What would I do next? I would have to roll back my changes and then start refactoring
the test &lt;em&gt;and&lt;/em&gt; the class, in order to get rid of this assumption. However, changing the
test and at the same time changing main code is,
&lt;a href=&quot;https://twitter.com/yegor256/status/1525758255225528320&quot;&gt;I believe&lt;/a&gt;,
a &lt;a href=&quot;https://stackoverflow.com/questions/1569168&quot;&gt;dangerous practice&lt;/a&gt;:
most probably I will introduce some new bugs.&lt;/p&gt;

&lt;p&gt;The tests are not a “safety net” for me anymore. I can’t trust them.
I modify the code and I know that I didn’t break anything.
However, the test gives me a red signal.
How can I trust it if it lies in such a simple scenario?&lt;/p&gt;

&lt;p&gt;This coupling between the unit test &lt;code class=&quot;highlighter-rouge&quot;&gt;BookTest&lt;/code&gt; and the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;
would not happen if it was not possible to use reflection in the first place.
If nobody had the ability to reach the private method in any way,
the Inspector anti-pattern in unit tests would not be possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2017/02/07/private-method-is-new-class.html&quot;&gt;Of course&lt;/a&gt;,
life would be even better if we also didn’t have private methods.&lt;/p&gt;

&lt;h2 id=&quot;factories&quot;&gt;Factories&lt;/h2&gt;

&lt;p&gt;Here is how a typical &lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;factory&lt;/a&gt;
may work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is a Factory Method:&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Op&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;factory method&lt;/a&gt;
is &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;. It expects the name of the “operator” to be provided
and then,
using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class.forName()&lt;/code&gt;&lt;/a&gt;
from the Java Reflection API, constructs the name of the class, finds it in the
&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/environment/paths.html&quot;&gt;classpath&lt;/a&gt;,
and makes an instance of it. Now, say there are two classes both implementing the
interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Operator&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpPlus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpMinus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we use them, first asking our factory method to make objects from
operator names:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Plus&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minus&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minus&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; will be 13.&lt;/p&gt;

&lt;p&gt;We would not be able to do this without reflection. We would have to do this
instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpPlus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OpMinus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OpMinus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you ask me, this code looks much more readable and maintainable.
First of all, because in any IDE that enables
&lt;a href=&quot;https://www.jetbrains.com/help/idea/navigating-through-the-source-code.html#go_to_declaration&quot;&gt;code navigation&lt;/a&gt;
it would be possible to click on &lt;code class=&quot;highlighter-rouge&quot;&gt;OpMinus&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;OpPlus&lt;/code&gt; and immediately
jump to the body of the class. Second, the logic of class finding
is provided out-of-the-box by JVM: I don’t need to guess what happens when
&lt;code class=&quot;highlighter-rouge&quot;&gt;make(&quot;Plus&quot;)&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;There are a few reasons why people love static factories. I don’t agree with them.
This &lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;blog post&lt;/a&gt;
explains why. Without reflection it wouldn’t be possible to
have static factories at all and the code would be better and more maintainable.&lt;/p&gt;

&lt;h2 id=&quot;annotations&quot;&gt;Annotations&lt;/h2&gt;

&lt;p&gt;In Java you can attach an annotation
(an instance of a &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;-ish interface)
to a class (or an element of it like a method or an argument).
The information from the annotation can then be read at runtime or compile time.
In modern frameworks like &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html&quot;&gt;Spring&lt;/a&gt;
this feature is frequently used in order
to automate &lt;a href=&quot;https://stackoverflow.com/questions/19414734&quot;&gt;objects wiring&lt;/a&gt;:
you just attach some annotations to your classes
and the framework will find them, instantiate them, place them into a
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;DI container&lt;/a&gt;,
and assign to other objects’ attributes.&lt;/p&gt;

&lt;p&gt;I’ve &lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;said it earlier&lt;/a&gt;
that this very mechanism of discovering objects and &lt;em&gt;automatically&lt;/em&gt;
wiring them together is an anti-pattern. I’ve also
&lt;a href=&quot;/2016/04/12/java-annotations-are-evil.html&quot;&gt;said earlier&lt;/a&gt;
that annotations are an anti-pattern.
Neither dependency injection containers, not auto-wiring, nor annotations
would exist if there was no reflection. Life would be much better
and Java/OOP much cleaner.&lt;/p&gt;

&lt;p&gt;The clients of annotated objects/classes are coupled with them, and
this coupling is &lt;em&gt;hidden&lt;/em&gt;. An annotated object can change its interface or
modify annotations and the code will compile just fine. The problem will
surface only later at runtime, when the expectations of other objects
won’t be satisfied.&lt;/p&gt;

&lt;h2 id=&quot;serialization&quot;&gt;Serialization&lt;/h2&gt;

&lt;p&gt;When programmers don’t understand
&lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;object-oriented paradigm&lt;/a&gt;,
they make &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt; instead of
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;proper objects&lt;/a&gt;.
Then, in order to transfer a DTO over a network or save it to a file, they
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serialization&quot;&gt;serialize&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Marshalling_%28computer_science%29&quot;&gt;marshall&lt;/a&gt; them.
It’s usually done by a special serialization engine, which takes a DTO,
&lt;a href=&quot;http://erights.org/data/serial/jhu-paper/intro.html&quot;&gt;breaks&lt;/a&gt;
all possible encapsulation barriers,
reads the values of all of its fields,
and packages them into, say, a piece of JSON.&lt;/p&gt;

&lt;p&gt;In order to let the serialization engine break encapsulation barriers, a programming
language has to have reflection. First, because some fields of a DTO may be private
and thus accessible only through reflection.
Second, even if a DTO is designed “right” with all necessary
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;
for the private fields, still reflection is required in order to understand
which getters are present and can be called.&lt;/p&gt;

&lt;p&gt;The attitude serialization expresses towards objects is very similar to what
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM&lt;/a&gt; does. Neither of them
talk to objects, but instead they pretty “offensively” tear them apart, taking away
what’s necessary, and leaving the poor objects unconscious. If in the future an
object decides to change its structure, rename some fields, or change the types
of returned values—other objects, which actually are coupled with the object through
serialization, won’t notice anything. They will notice, but only at runtime,
when “invalid data format” exceptions start floating up. The developers
of the object won’t have a chance to notice that their changes to the interface
of the object affect some other places in the code base.&lt;/p&gt;

&lt;p&gt;We can say that serialization is a “perfect” method of coupling two objects
such that neither one will know about it.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;very idea&lt;/a&gt;
of object-oriented programming is centered around the principle
that an object is king. An object and only an object may decide what
to do with the data it encapsulates. The existence of this principle and adherence
to it helps avoid runtime errors usually caused by a simple scenario:
A uses the data coming from B without telling B how it’s being used,
then B changes the format or semantics of the data, and A fails to understand it.&lt;/p&gt;

&lt;p&gt;Obviously, serialization in such an “abusive” way would not be possible,
if there was no reflection in the first place. A more careful serialization
would be possible and would be used, not through reflection but via
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;printers&lt;/a&gt;
implemented by objects.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To conclude, reflection introduces coupling, which is hidden. This is the
most dangerous type of coupling, because it’s hard to follow, it’s hard to find,
and it’s hard to remove. Without reflection object-oriented design would be
much cleaner and solid. But even if this feature does exist,
I suggest you never use reflection in your programming language.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Do you use reflective programming (reflection)?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1535919879886446592?ref_src=twsrc%5Etfw&quot;&gt;June 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Reflective programming (or reflection) happens when your code changes itself on the fly. For example, a method of a class, when we call it, among other things adds a new method to the class (also known as monkey patching). Java, Python, PHP, JavaScript, you name it—they all have this “powerful” feature. What’s wrong with it? Well, it’s slow, dangerous, and hard to read and debug. But all that is nothing compared with the coupling it introduces to the code.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/02/wheelman.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/02/wheelman.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bugs Occam’s Razor</title><link href="https://www.yegor256.com/2022/03/29/bugs-occam-razor.html" rel="alternate" type="text/html" title="Bugs Occam’s Razor" /><published>2022-03-29T00:00:00+00:00</published><updated>2022-03-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/03/29/bugs-occam-razor</id><content type="html" xml:base="https://www.yegor256.com/2022/03/29/bugs-occam-razor.html">&lt;p&gt;For each accepted explanation of a phenomenon, there may be an extremely 
large, perhaps even incomprehensible, number of possible and 
more complex alternatives. The principle of parsimony, also known
as &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam's_razor&quot;&gt;Occam’s razor&lt;/a&gt;, 
suggests we prefer the simplest one. For example, 
“I can’t open the door and can’t attend the meeting” is a description
of a problem, which could be reduced to “I can’t open the door”
without losing any information, which might be important for those
who are waiting for me in the meeting room. I suggest applying the same
principle to bug reports.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Game of Thrones (2011–2019) by David Benioff&quot; src=&quot;/images/2022/03/game-of-thrones.jpg&quot; longdesc=&quot;#605dc3e3&quot; /&gt;&lt;figcaption id=&quot;605dc3e3&quot;&gt;Game of Thrones (2011–2019) by David Benioff&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say I design a simple imperative programming language and you submit
this bug report to me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Here is my code:

a := 7
a := a + 5 - 3
a := a / 3
print a

It doesn't work as expected. It prints 4, 
but it should print 3.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I have to investigate and find out which operator is broken: 
maybe the addition doesn’t work, or maybe
the assignment, or the division. I don’t know, and I have to
&lt;a href=&quot;/2016/02/09/are-you-still-debugging.html&quot;&gt;debug/test&lt;/a&gt; 
in order to find out… Me. Not you. Why not you?&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=jiEJnLBowHc&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/jiEJnLBowHc/mqdefault.jpg&quot; alt=&quot;YouTube video #jiEJnLBowHc&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M190: Make sure the bugs you report explain the simplest possible scenarios;
        4 April 2022.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;The more I work with bug reports, the more I believe that 
this must be your job as a bug reporter,
to play with the code and do the best you can to make your snippet as
short as it can be to represent the defect.&lt;/p&gt;

&lt;p&gt;Of course, you don’t need to do glass-box testing of my code finding the cause
of the bug, but on the API surface you must do your job and conclude
that the subtraction operator is broken:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Here is my code:

a := 7
a := a - 3
print a

It doesn't work as expected. It prints 7, 
but it should print 4.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, you’ve &lt;em&gt;reduced&lt;/em&gt; the scope of the defect to a much smaller one. 
You did your “home work” and found out that only one 
particular operator in my programming language is broken: the
subtraction. You saved my time and increased the chance of your
bug report being fixed sooner rather than later.&lt;/p&gt;

&lt;p&gt;In general, I believe that this bug optimization work 
must be done by reporters, not product owners.
I would even say that this might be a valid bug rejection reason: 
the report is not the simplest possible one.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If a bug report is messy or overly complex, who should clean it up before we start fixing it?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1528370540628566018?ref_src=twsrc%5Etfw&quot;&gt;May 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">For each accepted explanation of a phenomenon, there may be an extremely large, perhaps even incomprehensible, number of possible and more complex alternatives. The principle of parsimony, also known as Occam’s razor, suggests we prefer the simplest one. For example, “I can’t open the door and can’t attend the meeting” is a description of a problem, which could be reduced to “I can’t open the door” without losing any information, which might be important for those who are waiting for me in the meeting room. I suggest applying the same principle to bug reports.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/03/game-of-thrones.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/03/game-of-thrones.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Fallacies of AI Driven Coding</title><link href="https://www.yegor256.com/2022/02/16/ai-coding.html" rel="alternate" type="text/html" title="Fallacies of AI Driven Coding" /><published>2022-02-16T00:00:00+00:00</published><updated>2022-02-16T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/02/16/ai-coding</id><content type="html" xml:base="https://www.yegor256.com/2022/02/16/ai-coding.html">&lt;p&gt;A few days ago, &lt;a href=&quot;https://deepmind.com&quot;&gt;DeepMind&lt;/a&gt; 
(&lt;a href=&quot;https://techcrunch.com/2014/01/26/google-deepmind/&quot;&gt;acquired&lt;/a&gt; by Google in 2014) released
&lt;a href=&quot;https://alphacode.deepmind.com&quot;&gt;AlphaCode&lt;/a&gt; and self-published
a
&lt;a href=&quot;https://storage.googleapis.com/deepmind-media/AlphaCode/competition_level_code_generation_with_alphacode.pdf&quot;&gt;paper&lt;/a&gt;
explaining how their artificial intelligence (AI) can “understand”
a programming contest task written in English and then write a Python, Java or C++ program, which
would work in about 30% of cases.
Earlier last year &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenAI&quot;&gt;OpenAI&lt;/a&gt; 
(&lt;a href=&quot;https://openai.com/blog/microsoft/&quot;&gt;$1B-funded&lt;/a&gt; by Microsoft in 2019)
released &lt;a href=&quot;https://openai.com/blog/openai-codex/&quot;&gt;Codex&lt;/a&gt;
and published a &lt;a href=&quot;https://arxiv.org/abs/2107.03374&quot;&gt;paper&lt;/a&gt;, claiming
that their AI can also solve around 30% of the programming tasks it was
tested with.
&lt;a href=&quot;https://www.wired.com/story/ai-write-code-like-humans-bugs/&quot;&gt;Wired&lt;/a&gt;,
the &lt;a href=&quot;https://www.ft.com/content/65477c33-cb72-418d-b03d-b60cfc5a8b5d&quot;&gt;Financial Times&lt;/a&gt;,
&lt;a href=&quot;https://www.theverge.com/2022/2/2/22914085/alphacode-ai-coding-program-automatic-deepmind-codeforce&quot;&gt;The Verge&lt;/a&gt;
and many others have already announced the victory: 
AI &lt;a href=&quot;https://www.bbc.com/news/business-57914432&quot;&gt;will replace programmers&lt;/a&gt; 
and we are all going to lose our jobs.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Short Circuit (1986) by John Badham&quot; src=&quot;/images/2022/02/short-circuit.jpg&quot; longdesc=&quot;#51ce7628&quot; /&gt;&lt;figcaption id=&quot;51ce7628&quot;&gt;Short Circuit (1986) by John Badham&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I would identify five beliefs about AI and its code-writing abilities,
which, in my opinion, are fundamental fallacies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI writes code (NOT!)&lt;/strong&gt;&lt;br /&gt;
It’s not true.
Neither AlphaCode nor Codex &lt;em&gt;write&lt;/em&gt; code. Instead, they &lt;em&gt;find&lt;/em&gt; it.
According to the AlphaCode paper, “generating code that solves a specific task 
requires &lt;em&gt;searching&lt;/em&gt; in a huge structured space of programs.” 
Even though Machine Learning (ML) makes searching
faster, it doesn’t make it writing. As far as I understand (the paper
is pretty vague on the exact details of model training), they turn
descriptions of programming tasks into sequences of numbers (tokenized characters!)
and then label them with solutions found … in GitHub or 
&lt;a href=&quot;https://codeforces.com&quot;&gt;Codeforces&lt;/a&gt; open repositories.
Then they ask the model to find the best solution for the vector of characters
in question. Saying that they write code is similar to saying that
Google draws pictures of cats when I search for a “black cat.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI understands requirements in a natural language (NOT!)&lt;/strong&gt;&lt;br /&gt;
It doesn’t really &lt;em&gt;understand&lt;/em&gt; anything.
Neither AlphaCode nor Codex analyze the &lt;em&gt;semantics&lt;/em&gt; of the input. Whether it
says “draw a green line” or “save a file,” the AI sees just two sequences of characters:
of length 17 and 11 respectively. It doesn’t &lt;em&gt;know&lt;/em&gt; what “green” means nor how it’s different
from a “file.” They tokenize text into vectors. If they used
&lt;a href=&quot;https://en.wikipedia.org/wiki/Controlled_natural_language&quot;&gt;CNL&lt;/a&gt; it would
be understanding, but they don’t.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI pair-programs with a human (NOT!)&lt;/strong&gt;&lt;br /&gt;
We may expect AI not to entirely replace us programmers, but instead help us
write certain blocks of code: &lt;a href=&quot;https://copilot.github.com&quot;&gt;Copilot&lt;/a&gt; 
(&lt;a href=&quot;https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/&quot;&gt;released&lt;/a&gt; 
by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; in 2021) 
is a notable example, &lt;a href=&quot;https://hackernoon.com/openais-new-code-generator-github-copilot-and-codex-bb143773&quot;&gt;powered&lt;/a&gt;
by the same Codex. A few months ago I got an early access to Codex and played a bit with
its features. My impression, as a programmer, was that it was neither able to
write an entire program nor did the blocks of
code it produced in response to my requests fit together. They were syntactically
valid and implemented the functionality requested, but the AI was falling short in combining
them the way I, a human, might agree to maintain them later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI autocompletes, that’s why they can write (NOT!)&lt;/strong&gt;&lt;br /&gt;
Indeed, there are a few products which do code autocompletion
with the use of ML, for example &lt;a href=&quot;https://www.codota.com&quot;&gt;Codota&lt;/a&gt;,
&lt;a href=&quot;https://www.tabnine.com&quot;&gt;Tabnine&lt;/a&gt;,
and
&lt;a href=&quot;https://www.kite.com&quot;&gt;Kite&lt;/a&gt;.
However, they don’t work with natural languages.
These are two different research problems:
1) how to &lt;a href=&quot;https://en.wikipedia.org/wiki/Autocomplete&quot;&gt;autocomplete&lt;/a&gt; 
an existing program with known
functionality and an already existing &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;, 
and 
2) how to turn natural language text into an AST.
As far as I understand, they don’t and never will overlap.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI just needs time to mature (NOT!)&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://spectrum.ieee.org/openai-wont-replace-coders&quot;&gt;Some&lt;/a&gt; believe
that AI will replace programmers, but “that day won’t arrive any time soon.”
However, it seems to me that it’s not a matter of maturity. The very 
direction researchers of OpenAI and DeepMind are trying to pursue is a dead end.
ML is just not the right tool to turn unstructured English text into a well-structured 
AST which is parseable by C++ compiler. To do this we need the AI to 
learn the semantics of the natural language and then, using 
&lt;em&gt;creativity&lt;/em&gt; and &lt;em&gt;imagination&lt;/em&gt;,
create all necessary AST elements in the right order. 
I simply don’t believe that ML is the right technology for this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To conclude, ML will never write our code, because … it’s just not
the right tool for the job.
However, it may be suitable for other things, like autocompletion, 
refactoring, bug fixing, optimization, and so on. I’m particularly interested
in automated refactoring: imagine a large legacy code base given to AI,
which improves certain parts of it, making the code faster,
safer, more readable, or shorter. Maybe it will even upgrade the code to newer frameworks, SDKs,
and dependencies. This is where ML already helps and will help more,
improving &lt;em&gt;existing&lt;/em&gt; ASTs.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=4I8BflW7EpU&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/4I8BflW7EpU/mqdefault.jpg&quot; alt=&quot;YouTube video #4I8BflW7EpU&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M188: I don&amp;#39;t think ML will ever be able to write code;
        21 February 2022.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Trying to apply ML to code generating is a road to nowhere, which
only wastes resources and … boosts stocks of Google and Microsoft.&lt;/p&gt;

&lt;p&gt;Besides, how much good will it do to the industry if programmers write
code mostly by finding samples on the Internet, copying, and sticking them together?
Many of them already do that even without AI.
The &lt;a href=&quot;https://stackoverflow.blog/2021/12/30/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/&quot;&gt;analysis&lt;/a&gt; 
recently done by Stack Overflow demonstrates that “the higher a user’s reputation, 
the less often they are copying.” Less skilful programmers tend to copy.
Is this a good tendency? Do we want AI to push it further?&lt;/p&gt;

&lt;p&gt;Will AI ever be able to write code by reading natural language requirements?
Yes, it will. When we invent artificial creativity.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="ai" /><summary type="html">A few days ago, DeepMind (acquired by Google in 2014) released AlphaCode and self-published a paper explaining how their artificial intelligence (AI) can “understand” a programming contest task written in English and then write a Python, Java or C++ program, which would work in about 30% of cases. Earlier last year OpenAI ($1B-funded by Microsoft in 2019) released Codex and published a paper, claiming that their AI can also solve around 30% of the programming tasks it was tested with. Wired, the Financial Times, The Verge and many others have already announced the victory: AI will replace programmers and we are all going to lose our jobs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/02/short-circuit.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/02/short-circuit.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Academic Teaching is Hard</title><link href="https://www.yegor256.com/2021/12/01/teaching.html" rel="alternate" type="text/html" title="Academic Teaching is Hard" /><published>2021-12-01T00:00:00+00:00</published><updated>2021-12-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/12/01/teaching</id><content type="html" xml:base="https://www.yegor256.com/2021/12/01/teaching.html">&lt;p&gt;A few months ago I got an opportunity to teach a single course for
3rd-year BSc students at &lt;a href=&quot;https://innopolis.university/en/&quot;&gt;Innopolis University&lt;/a&gt; (Russia). 
The title was “System Software Design.” 
The size of the group was about 150 people and the duration was
8 weeks. I was supposed to give them sixteen lectures, 
two lectures per week. And I was asked to examine their knowledge
by the end of the course. Pretty much a normal job for a university
teacher. And you know, in my opinion, I failed most parts of it. 
Here is what I learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Die Welle (2008) by Dennis Gansel&quot; src=&quot;/images/2021/11/die-welle.jpg&quot; longdesc=&quot;#2787ff7e&quot; /&gt;&lt;figcaption id=&quot;2787ff7e&quot;&gt;Die Welle (2008) by Dennis Gansel&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;By the way, all lectures were 
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLaIsQH4uc08woJKRAA7mmjs9fU0jeKjjM&quot;&gt;video recorded&lt;/a&gt; 
and all slide decks are &lt;a href=&quot;https://github.com/yegor256/ssd16&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-huge&quot;&gt;It’s Huge&lt;/h2&gt;

&lt;p&gt;I’ve got &lt;a href=&quot;/talks.html&quot;&gt;a lot of experience&lt;/a&gt; 
of giving speeches at software conferences,
workshops, meetups, and so on. Usually, such a speech is 30-40 minutes long with
10-15 minutes for Q&amp;amp;A at the end. Then, you just walk away and relax.&lt;/p&gt;

&lt;p&gt;Here it was something completely different. First, the lecture takes 90 minutes
with a small five-minute break in the middle. Second, I had to give two 
lectures straight. Third, I had two lectures on Tuesday and two on Wednesday.
Thus, I had 180+180=360 minutes of teaching every second week. 360 minutes! It’s
similar to 10 conference speeches! Imagine how much it takes to prepare ten
conference speeches. All my evenings and weekends were completely occupied with
this. The lesson I’ve learned: start preparing your course long before
the first day of it and expect to spend a lot of time on it.&lt;/p&gt;

&lt;h2 id=&quot;syllabus&quot;&gt;Syllabus&lt;/h2&gt;

&lt;p&gt;It seems that for some/most students, my course was not so much about learning
something new, but about getting the “A” grade. They started bugging me right
from the beginning of the course: how exactly will you examine our projects
and how will the grading decision be made? I don’t blame them, I blame myself:
I didn’t give them a Syllabus at the beginning of the course. Somewhere
in the middle of the course I wrote it up, 
&lt;a href=&quot;https://yegor256.github.io/ssd16/syllabus.pdf&quot;&gt;see here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-lieu-of-an-exam&quot;&gt;In Lieu of an Exam&lt;/h2&gt;

&lt;p&gt;Instead of examining their knowledge I decided to ask them to create
some software, using the knowledge they supposedly got at the lectures. It was a good decision,
because I can’t even imagine how much time an oral examination of 150 people would take and how
subjective it would be. There was another option though: a questionnaire with
right and wrong answers. But still, it would take a lot of time to create
one. Asking them to make a piece of software was a better choice, until
I realized that I didn’t know how I could &lt;em&gt;objectively&lt;/em&gt; evaluate it.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://yegor256.github.io/ssd16/syllabus.pdf&quot;&gt;Syllabus&lt;/a&gt; 
I suggested some criteria, but they were far from being objective.
The only objective one was the number of stars their repository
would acquire on GitHub. By the way, all of them reached 
the highest required number: fifteen. Some of them got more than forty,
which, according to my plan, was the point: to show them that good software
with a small boost (by the stars given to you by friends-and-family)
can easily gain larger popularity.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=8qfd93SyXpM&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/8qfd93SyXpM/mqdefault.jpg&quot; alt=&quot;YouTube video #8qfd93SyXpM&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;SSD 13/16: Test-Driven Development;
        9 October 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;By the way, I’m still dreaming about a software package or a hosted service, which would
go through any GitHub repository and make a quality analysis of it. Not the
quality of code, but the quality of process, documentation, discipline,
communications, etc. Such a software may use Machine Learning
to make non-deterministic guesses about the internals of a repository. It
may also benchmark thousands of GitHub repositories and then evaluate the
given one against those which are the best.&lt;/p&gt;

&lt;p&gt;Without such software I had to review their repositories one by one.
Which took me an entire day. TAs did their review before me, 
which was helpful too.&lt;/p&gt;

&lt;h2 id=&quot;labs&quot;&gt;Labs&lt;/h2&gt;

&lt;p&gt;There were not only lectures, but also practical tasks, called “Labs.”
I had three Teaching Assistants (TA), each of which had one third
of my students. The TAs were also teaching them software design, trying to 
go along with the content I was giving at the lectures. Did it work well?
It didn’t. And it was 100% my fault.&lt;/p&gt;

&lt;p&gt;Each TA has their own ideas about software design, about software quality,
about management, about many other things. If I wanted to do it right, 
I would have had to “teach” the TAs first, spending
some time for this before starting the course. Maybe I would have even had to give
them some guidelines, explaining my expectations. This would be very
helpful, since TAs interact with students much more than the lecturer.
I, being a standing-up teacher, was not able to &lt;em&gt;discuss&lt;/em&gt; things
with students: I was mostly delivering them my thoughts. TAs and Labs
are where the discussions are happening.&lt;/p&gt;

&lt;p&gt;Thus, the lesson I’ve learned: before starting teaching,
make sure your TAs understand your content well. Very well.&lt;/p&gt;

&lt;h2 id=&quot;attendance&quot;&gt;Attendance&lt;/h2&gt;

&lt;p&gt;At my first lecture there were about 120 people in the room. At the last one
there were ten. I’m not sure exactly why, but there are a few possible
reasons. First, maybe the lectures were boring. Well, can I make them 12 times
more fun next time? I doubt it.&lt;/p&gt;

&lt;p&gt;The second possible reason is that I didn’t check their attendance. I told
them right at the beginning of the course: “I don’t care about your physical presence here,
I only care about the product you create in eight weeks.” 
Maybe this was a mistake, but I still think that forcing students to attend 
lectures is disrespectful.&lt;/p&gt;

&lt;p&gt;Third, maybe most of them found it more comfortable to watch the recorded
lectures on YouTube instead of going to the class. I was trying to publish
videos in just a few days after each lecture. Was it a mistake? Maybe so,
but I still believe that video content is king. By the way, each lecture
out of sixteen published, was already watched at least a thousand times 
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLaIsQH4uc08woJKRAA7mmjs9fU0jeKjjM&quot;&gt;on YouTube&lt;/a&gt;.
A few dozen students in the room versus a thousand people on YouTube:
who do you think is more important?&lt;/p&gt;

&lt;p&gt;Thus, if you want your class to be full each time: 
1) entertain them,
2) make grades depend on attendance, 
and
3) don’t publish videos until after the exam (or don’t record at all).
But I won’t do either of those. I’m fine with ten people in the room,
thousands on YouTube, and a few very interesting products created by 
those who most probably never attended (I discuss them below).&lt;/p&gt;

&lt;h2 id=&quot;best-students&quot;&gt;Best Students&lt;/h2&gt;

&lt;p&gt;There were four possible grades to give: A, B, C, and D. The failing
one was “D”, but”C” was not good either. Students formed small
groups of up to four people. Each group created their own GitHub project
(actually, three groups out of fifty made them in GitLab) and I reviewed them. Here is
how I distributed my marks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A++ : 2
A+  : 6
A   : 22
B   : 13
C   : 4
D   : 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Formally speaking, I gave “A” marks to 2+6+22 people (including “A+” and “A++”) marks, but
I felt obligated to emphasize the difference between excellent and good projects
even through they are in the same formal “A” category: that’s why there are extra “A++” and “A+” marks. 
Of course, there was a possibility
to give “A” only to those who are “A+” and “A++” in my classification, shifting
the rest of the schedule down and giving many more “C” marks, 
but I was afraid that this would lead to a lot of complaints. 
Put simply, I chickened out.&lt;/p&gt;

&lt;p&gt;Now, to reward those who got “A++” and “A+” I’m publishing their projects here, 
and their accounts. They may consider this blog post as my personal
letter of recommendation for each of them. If you, dear reader, are a potential
employer of these guys, I highly recommend them.&lt;/p&gt;

&lt;p&gt;Here they are the “A++” two:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/InnoTutor&quot;&gt;&lt;strong&gt;InnoTutor&lt;/strong&gt;&lt;/a&gt; 
&lt;br /&gt;
by 
&lt;a href=&quot;https://github.com/SMore-Napi&quot;&gt;@SMore-Napi&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Dablup&quot;&gt;@Dablup&lt;/a&gt;, 
&lt;a href=&quot;https://github.com/tasneem22&quot;&gt;@tasneem22&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/emileyray&quot;&gt;@emileyray&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Doctorinna&quot;&gt;&lt;strong&gt;Doctorinna&lt;/strong&gt;&lt;/a&gt; 
&lt;br /&gt;
by
&lt;a href=&quot;https://github.com/DanisAlukaev&quot;&gt;@DanisAlukaev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ladamoroz&quot;&gt;@ladamoroz&lt;/a&gt;, 
&lt;a href=&quot;https://github.com/maxim-pr&quot;&gt;@maxim-pr&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/Denisalik&quot;&gt;@Denisalik&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at the quality of the repositories! 
Don’t judge them much by the quality of code
or the usefulness of the products (even though they are useful) — the course
was not about coding. The course was about organizing your code and 
making technical decisions. They, I believe, did very well, keeping in mind
that they are students.&lt;/p&gt;

&lt;p&gt;These are six “A+” repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/repeating/PoputchikiInno&quot;&gt;&lt;strong&gt;PoputchikiInno&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/pierrepicaud&quot;&gt;@pierrepicaud&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/Kamil-Sabbagh&quot;&gt;@Kamil-Sabbagh&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/repeating&quot;&gt;@repeating&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/Karam19&quot;&gt;@Karam19&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Ahuratus/Trajectory-Detection-Web-services&quot;&gt;&lt;strong&gt;Trajectory-Detection-Web-services&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/Ehsan2754&quot;&gt;@Ehsan2754&lt;/a&gt;
  and
  &lt;a href=&quot;https://github.com/Mr-Barry&quot;&gt;@Mr-Barry&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/yadariya/InnoBookCrossing&quot;&gt;&lt;strong&gt;InnoBookCrossing&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://github.com/Fressermenschen&quot;&gt;@Fressermenschen&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/Kastrylia&quot;&gt;@Kastrylia&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/romanza705&quot;&gt;@romanza705&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/yadariya&quot;&gt;@yadariya&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/TonyDecvA180XN/Cmple&quot;&gt;&lt;strong&gt;Cmple&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/TonyDecvA180XN&quot;&gt;@TonyDecvA180XN&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gitlab.com/amirovaldiar/kolorz-frontend&quot;&gt;&lt;strong&gt;kolorz-frontend&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://gitlab.com/amirovaldiar&quot;&gt;@amirovaldiar&lt;/a&gt;,
  &lt;a href=&quot;https://gitlab.com/ease-ln&quot;&gt;@ease-ln&lt;/a&gt;,
  and
  &lt;a href=&quot;https://gitlab.com/nailyavaliull1409&quot;&gt;@nailyavaliull1409&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/PictureInspector/Picture-Inspector&quot;&gt;&lt;strong&gt;Picture-Inspector&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://github.com/Palandr1234&quot;&gt;@Palandr1234&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/datapaf&quot;&gt;@datapaf&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/Dinislam36&quot;&gt;@Dinislam36&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also pretty good.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Big thanks to Innopolis University and personally to its Dean, 
Prof. &lt;a href=&quot;https://scholar.google.com/citations?user=PdMO57sAAAAJ&amp;amp;hl=en&quot;&gt;Giancarlo Succi&lt;/a&gt;,
for giving me this opportunity to realize that being a teacher is
very hard and … fun.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What a good teacher does?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1467390909025300481?ref_src=twsrc%5Etfw&quot;&gt;December 5, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html">A few months ago I got an opportunity to teach a single course for 3rd-year BSc students at Innopolis University (Russia). The title was “System Software Design.” The size of the group was about 150 people and the duration was 8 weeks. I was supposed to give them sixteen lectures, two lectures per week. And I was asked to examine their knowledge by the end of the course. Pretty much a normal job for a university teacher. And you know, in my opinion, I failed most parts of it. Here is what I learned.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/11/die-welle.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/11/die-welle.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>