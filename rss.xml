<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2021-12-07T07:23:32+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Academic Teaching is Hard</title><link href="https://www.yegor256.com/2021/12/01/teaching.html" rel="alternate" type="text/html" title="Academic Teaching is Hard" /><published>2021-12-01T00:00:00+00:00</published><updated>2021-12-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/12/01/teaching</id><content type="html" xml:base="https://www.yegor256.com/2021/12/01/teaching.html">&lt;p&gt;A few months ago I got an opportunity to teach a single course for
3rd-year BSc students at &lt;a href=&quot;https://innopolis.university/en/&quot;&gt;Innopolis University&lt;/a&gt; (Russia). 
The title was “System Software Design.” 
The size of the group was about 150 people and the duration was
8 weeks. I was supposed to give them sixteen lectures, 
two lectures per week. And I was asked to examine their knowledge
by the end of the course. Pretty much a normal job for a university
teacher. And you know, in my opinion, I failed most parts of it. 
Here is what I learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Die Welle (2008) by Dennis Gansel&quot; src=&quot;/images/2021/11/die-welle.jpg&quot; longdesc=&quot;#2787ff7e&quot; /&gt;&lt;figcaption id=&quot;2787ff7e&quot;&gt;Die Welle (2008) by Dennis Gansel&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;By the way, all lectures were 
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLaIsQH4uc08woJKRAA7mmjs9fU0jeKjjM&quot;&gt;video recorded&lt;/a&gt; 
and all slide decks are &lt;a href=&quot;https://github.com/yegor256/ssd16&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-huge&quot;&gt;It’s Huge&lt;/h2&gt;

&lt;p&gt;I’ve got &lt;a href=&quot;/talks.html&quot;&gt;a lot of experience&lt;/a&gt; 
of giving speeches at software conferences,
workshops, meetups, and so on. Usually, such a speech is 30-40 minutes long with
10-15 minutes for Q&amp;amp;A at the end. Then, you just walk away and relax.&lt;/p&gt;

&lt;p&gt;Here it was something completely different. First, the lecture takes 90 minutes
with a small five-minute break in the middle. Second, I had to give two 
lectures straight. Third, I had two lectures on Tuesday and two on Wednesday.
Thus, I had 180+180=360 minutes of teaching every second week. 360 minutes! It’s
similar to 10 conference speeches! Imagine how much it takes to prepare ten
conference speeches. All my evenings and weekends were completely occupied with
this. The lesson I’ve learned: start preparing your course long before
the first day of it and expect to spend a lot of time on it.&lt;/p&gt;

&lt;h2 id=&quot;syllabus&quot;&gt;Syllabus&lt;/h2&gt;

&lt;p&gt;It seems that for some/most students, my course was not so much about learning
something new, but about getting the “A” grade. They started bugging me right
from the beginning of the course: how exactly will you examine our projects
and how will the grading decision be made? I don’t blame them, I blame myself:
I didn’t give them a Syllabus at the beginning of the course. Somewhere
in the middle of the course I wrote it up, 
&lt;a href=&quot;https://yegor256.github.io/ssd16/syllabus.pdf&quot;&gt;see here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-lieu-of-an-exam&quot;&gt;In Lieu of an Exam&lt;/h2&gt;

&lt;p&gt;Instead of examining their knowledge I decided to ask them to create
some software, using the knowledge they supposedly got at the lectures. It was a good decision,
because I can’t even imagine how much time an oral examination of 150 people would take and how
subjective it would be. There was another option though: a questionnaire with
right and wrong answers. But still, it would take a lot of time to create
one. Asking them to make a piece of software was a better choice, until
I realized that I didn’t know how I could &lt;em&gt;objectively&lt;/em&gt; evaluate it.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://yegor256.github.io/ssd16/syllabus.pdf&quot;&gt;Syllabus&lt;/a&gt; 
I suggested some criteria, but they were far from being objective.
The only objective one was the number of stars their repository
would acquire on GitHub. By the way, all of them reached 
the highest required number: fifteen. Some of them got more than forty,
which, according to my plan, was the point: to show them that good software
with a small boost (by the stars given to you by friends-and-family)
can easily gain larger popularity.&lt;/p&gt;

&lt;p&gt;By the way, I’m still dreaming about a software package or a hosted service, which would
go through any GitHub repository and make a quality analysis of it. Not the
quality of code, but the quality of process, documentation, discipline,
communications, etc. Such a software may use Machine Learning
to make non-deterministic guesses about the internals of a repository. It
may also benchmark thousands of GitHub repositories and then evaluate the
given one against those which are the best.&lt;/p&gt;

&lt;p&gt;Without such software I had to review their repositories one by one.
Which took me an entire day. TAs did their review before me, 
which was helpful too.&lt;/p&gt;

&lt;h2 id=&quot;labs&quot;&gt;Labs&lt;/h2&gt;

&lt;p&gt;There were not only lectures, but also practical tasks, called “Labs.”
I had three Teaching Assistants (TA), each of which had one third
of my students. The TAs were also teaching them software design, trying to 
go along with the content I was giving at the lectures. Did it work well?
It didn’t. And it was 100% my fault.&lt;/p&gt;

&lt;p&gt;Each TA has their own ideas about software design, about software quality,
about management, about many other things. If I wanted to do it right, 
I would have had to “teach” the TAs first, spending
some time for this before starting the course. Maybe I would have even had to give
them some guidelines, explaining my expectations. This would be very
helpful, since TAs interact with students much more than the lecturer.
I, being a standing-up teacher, was not able to &lt;em&gt;discuss&lt;/em&gt; things
with students: I was mostly delivering them my thoughts. TAs and Labs
are where the discussions are happening.&lt;/p&gt;

&lt;p&gt;Thus, the lesson I’ve learned: before starting teaching,
make sure your TAs understand your content well. Very well.&lt;/p&gt;

&lt;h2 id=&quot;attendance&quot;&gt;Attendance&lt;/h2&gt;

&lt;p&gt;At my first lecture there were about 120 people in the room. At the last one
there were ten. I’m not sure exactly why, but there are a few possible
reasons. First, maybe the lectures were boring. Well, can I make them 12 times
more fun next time? I doubt it.&lt;/p&gt;

&lt;p&gt;The second possible reason is that I didn’t check their attendance. I told
them right at the beginning of the course: “I don’t care about your physical presence here,
I only care about the product you create in eight weeks.” 
Maybe this was a mistake, but I still think that forcing students to attend 
lectures is disrespectful.&lt;/p&gt;

&lt;p&gt;Third, maybe most of them found it more comfortable to watch the recorded
lectures on YouTube instead of going to the class. I was trying to publish
videos in just a few days after each lecture. Was it a mistake? Maybe so,
but I still believe that video content is king. By the way, each lecture
out of sixteen published, was already watched at least a thousand times 
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLaIsQH4uc08woJKRAA7mmjs9fU0jeKjjM&quot;&gt;on YouTube&lt;/a&gt;.
A few dozen students in the room versus a thousand people on YouTube:
who do you think is more important?&lt;/p&gt;

&lt;p&gt;Thus, if you want your class to be full each time: 
1) entertain them,
2) make grades depend on attendance, 
and
3) don’t publish videos until after the exam (or don’t record at all).
But I won’t do either of those. I’m fine with ten people in the room,
thousands on YouTube, and a few very interesting products created by 
those who most probably never attended (I discuss them below).&lt;/p&gt;

&lt;h2 id=&quot;best-students&quot;&gt;Best Students&lt;/h2&gt;

&lt;p&gt;There were four possible grades to give: A, B, C, and D. The failing
one was “D”, but”C” was not good either. Students formed small
groups of up to four people. Each group created their own GitHub project
(actually, three groups out of fifty made them in GitLab) and I reviewed them. Here is
how I distributed my marks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A++ : 2
A+  : 6
A   : 22
B   : 13
C   : 4
D   : 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Formally speaking, I gave “A” marks to 2+6+22 people (including “A+” and “A++”) marks, but
I felt obligated to emphasize the difference between excellent and good projects
even through they are in the same formal “A” category: that’s why there are extra “A++” and “A+” marks. 
Of course, there was a possibility
to give “A” only to those who are “A+” and “A++” in my classification, shifting
the rest of the schedule down and giving many more “C” marks, 
but I was afraid that this would lead to a lot of complaints. 
Put simply, I chickened out.&lt;/p&gt;

&lt;p&gt;Now, to reward those who got “A++” and “A+” I’m publishing their projects here, 
and their accounts. They may consider this blog post as my personal
letter of recommendation for each of them. If you, dear reader, are a potential
employer of these guys, I highly recommend them.&lt;/p&gt;

&lt;p&gt;Here they are the “A++” two:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/InnoTutor&quot;&gt;&lt;strong&gt;InnoTutor&lt;/strong&gt;&lt;/a&gt; 
&lt;br /&gt;
by 
&lt;a href=&quot;https://github.com/SMore-Napi&quot;&gt;@SMore-Napi&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Dablup&quot;&gt;@Dablup&lt;/a&gt;, 
&lt;a href=&quot;https://github.com/tasneem22&quot;&gt;@tasneem22&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/emileyray&quot;&gt;@emileyray&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Doctorinna&quot;&gt;&lt;strong&gt;Doctorinna&lt;/strong&gt;&lt;/a&gt; 
&lt;br /&gt;
by
&lt;a href=&quot;https://github.com/DanisAlukaev&quot;&gt;@DanisAlukaev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ladamoroz&quot;&gt;@ladamoroz&lt;/a&gt;, 
&lt;a href=&quot;https://github.com/maxim-pr&quot;&gt;@maxim-pr&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/Denisalik&quot;&gt;@Denisalik&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at the quality of the repositories! 
Don’t judge them much by the quality of code
or the usefulness of the products (even though they are useful) — the course
was not about coding. The course was about organizing your code and 
making technical decisions. They, I believe, did very well, keeping in mind
that they are students.&lt;/p&gt;

&lt;p&gt;These are six “A+” repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/repeating/PoputchikiInno&quot;&gt;&lt;strong&gt;PoputchikiInno&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/pierrepicaud&quot;&gt;@pierrepicaud&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/Kamil-Sabbagh&quot;&gt;@Kamil-Sabbagh&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/repeating&quot;&gt;@repeating&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/Karam19&quot;&gt;@Karam19&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Ahuratus/Trajectory-Detection-Web-services&quot;&gt;&lt;strong&gt;Trajectory-Detection-Web-services&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/Ehsan2754&quot;&gt;@Ehsan2754&lt;/a&gt;
  and
  &lt;a href=&quot;https://github.com/Mr-Barry&quot;&gt;@Mr-Barry&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/yadariya/InnoBookCrossing&quot;&gt;&lt;strong&gt;InnoBookCrossing&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://github.com/Fressermenschen&quot;&gt;@Fressermenschen&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/Kastrylia&quot;&gt;@Kastrylia&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/romanza705&quot;&gt;@romanza705&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/yadariya&quot;&gt;@yadariya&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/TonyDecvA180XN/Cmple&quot;&gt;&lt;strong&gt;Cmple&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/TonyDecvA180XN&quot;&gt;@TonyDecvA180XN&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gitlab.com/amirovaldiar/kolorz-frontend&quot;&gt;&lt;strong&gt;kolorz-frontend&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://gitlab.com/amirovaldiar&quot;&gt;@amirovaldiar&lt;/a&gt;,
  &lt;a href=&quot;https://gitlab.com/ease-ln&quot;&gt;@ease-ln&lt;/a&gt;,
  and
  &lt;a href=&quot;https://gitlab.com/nailyavaliull1409&quot;&gt;@nailyavaliull1409&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/PictureInspector/Picture-Inspector&quot;&gt;&lt;strong&gt;Picture-Inspector&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://github.com/Palandr1234&quot;&gt;@Palandr1234&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/datapaf&quot;&gt;@datapaf&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/Dinislam36&quot;&gt;@Dinislam36&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also pretty good.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Big thanks to Innopolis University and personally to its Dean, 
Prof. &lt;a href=&quot;https://scholar.google.com/citations?user=PdMO57sAAAAJ&amp;amp;hl=en&quot;&gt;Giancarlo Succi&lt;/a&gt;,
for giving me this opportunity to realize that being a teacher is
very hard and … fun.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What a good teacher does?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1467390909025300481?ref_src=twsrc%5Etfw&quot;&gt;December 5, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html">A few months ago I got an opportunity to teach a single course for 3rd-year BSc students at Innopolis University (Russia). The title was “System Software Design.” The size of the group was about 150 people and the duration was 8 weeks. I was supposed to give them sixteen lectures, two lectures per week. And I was asked to examine their knowledge by the end of the course. Pretty much a normal job for a university teacher. And you know, in my opinion, I failed most parts of it. Here is what I learned.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/11/die-welle.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/11/die-welle.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Objectionary: Dictionary and Factory for EO Objects</title><link href="https://www.yegor256.com/2021/10/21/objectionary.html" rel="alternate" type="text/html" title="Objectionary: Dictionary and Factory for EO Objects" /><published>2021-10-21T00:00:00+00:00</published><updated>2021-10-21T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/10/21/objectionary</id><content type="html" xml:base="https://www.yegor256.com/2021/10/21/objectionary.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://www.eolang.org&quot;&gt;&lt;img src=&quot;/images/books/elegant-objects/cactus.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Since the time of Kernighan and Ritchie we share binary code in
libraries. You need to print some text with &lt;a href=&quot;https://en.wikipedia.org/wiki/Printf_format_string&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printf()&lt;/code&gt;&lt;/a&gt; in C++? 
You get &lt;a href=&quot;https://en.wikipedia.org/wiki/Glibc&quot;&gt;libc&lt;/a&gt; library with
&lt;a href=&quot;https://stackoverflow.com/a/33188344/187141&quot;&gt;700+&lt;/a&gt; other functions inside.
You need to copy a Java stream?
You get &lt;a href=&quot;https://commons.apache.org/proper/commons-io/&quot;&gt;Apache Commons IO&lt;/a&gt; with 
&lt;a href=&quot;https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html#copy-java.io.InputStream-java.io.OutputStream-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt;&lt;/a&gt; and 
&lt;a href=&quot;https://commons.apache.org/proper/commons-io/apidocs/index.html&quot;&gt;140+&lt;/a&gt; 
other methods and classes.
The same happens in all languages I’m aware of, like Ruby, Python, JavaScript, PHP:
you need an object, or a class, or a function, or a method—you have to add
the entire library to your build. 
Wouldn’t it be more elegant to deal with individual objects instead?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Mænd &amp;amp; høns (2015) by Anders Thomas Jensen&quot; src=&quot;/images/2021/10/maend-and-hons.jpg&quot; longdesc=&quot;#5f493073&quot; /&gt;&lt;figcaption id=&quot;5f493073&quot;&gt;Mænd &amp;amp; høns (2015) by Anders Thomas Jensen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The idea is not new and not mine. 
I got it from the book &lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;Object Thinking&lt;/a&gt;
by David West, where he suggested creating an &lt;em&gt;Objectionary&lt;/em&gt; (page 306), 
a “combination of dictionary and object factory,” with the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The total number of objects is less than 2000;&lt;/li&gt;
  &lt;li&gt;Each object is an autonomous executable entity;&lt;/li&gt;
  &lt;li&gt;Every object has a unique ID and a unique “address”;&lt;/li&gt;
  &lt;li&gt;Objects are nothing more than collections of objects;&lt;/li&gt;
  &lt;li&gt;Objects require hardware-specific VMs for execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;&lt;img src=&quot;/images/2015/04/book-object-thinking.jpg&quot; style=&quot;width:96px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Seventeen years later (the book was published in 2004), we implemented the idea
on top of &lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;, our new programming language.
The language is intentionally much simpler than Java or C++.
You can read its more or less formal description 
&lt;a href=&quot;https://www.eolang.org/eolang-paper.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To turn an EO program into an executable entity and release it to 
the &lt;a href=&quot;https://www.objectionary.com&quot;&gt;Objectionary&lt;/a&gt;, 
one has to go through the following mandatory steps,
assuming the JVM is used as a target platform
(the steps marked with 🌵 are implemented by our
&lt;a href=&quot;https://github.com/cqfn/eo&quot;&gt;eo-maven-plugin&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Assemble&lt;/strong&gt;🌵:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Parse&lt;/strong&gt;🌵: &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; ➜ &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Optimize&lt;/strong&gt;🌵: &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; ➜ better &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Discover&lt;/strong&gt;🌵: find all foreign aliases&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Pull&lt;/strong&gt;🌵: &lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;download&lt;/a&gt; foreign &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; objects&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Resolve&lt;/strong&gt;🌵: &lt;a href=&quot;https://search.maven.org/&quot;&gt;download&lt;/a&gt; and unpack &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; artifacts&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Place&lt;/strong&gt;🌵: move artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files to &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Mark&lt;/strong&gt;🌵: mark &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources found in &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; as foreign&lt;/li&gt;
      &lt;li&gt;↑ Go back to &lt;strong&gt;Parse&lt;/strong&gt; if some &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files are still not parsed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transpile&lt;/strong&gt;🌵: &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; ➜ &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assemble&lt;/strong&gt;🌵: same as above, but for tests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compile&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; ➜ &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test&lt;/strong&gt;: run all unit tests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unplace&lt;/strong&gt;🌵: remove artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unspile&lt;/strong&gt;🌵: remove auto-generated &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; files&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Copy&lt;/strong&gt;🌵: copy &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files to &lt;code class=&quot;highlighter-rouge&quot;&gt;EO-SOURCES/&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deploy&lt;/strong&gt;: package &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; artifact and put it into Maven Central&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Push&lt;/strong&gt;: send a pull request to &lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;yegor256/objectionary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merge&lt;/strong&gt;: we test and merge the pull request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is an iterative process, which loops over and over
again until all required &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; objects are parsed and their atoms are present
as &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files. 
Then, all &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; files are transpiled to &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; and then compiled
to &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; binaries. Then, tested, packaged, and deployed to Maven Central. Then,
merged to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch of &lt;a href=&quot;https://www.objectionary.com&quot;&gt;Objectionary&lt;/a&gt;, 
via a pull request.&lt;/p&gt;

&lt;p&gt;The first part of the algorithm can be automated with 
&lt;a href=&quot;https://github.com/cqfn/eo&quot;&gt;our Maven plugin&lt;/a&gt;, simply by placing &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources
in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; and adding this to &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.eolang&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;eo-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Take it from Maven Central --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;register&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;assemble&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;transpile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;copy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;unplace&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;unspile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt; goal will scan the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; directory, find all
&lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources, and “register” them in a special CSV catalog at 
&lt;code class=&quot;highlighter-rouge&quot;&gt;target/eo-foreigns.csv&lt;/code&gt;. Next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; goal will call
the following goals: &lt;code class=&quot;highlighter-rouge&quot;&gt;parse&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;optimize&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;discover&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;. All these goals use the CSV catalog when they parse, optimize,
pull and so on.&lt;/p&gt;

&lt;p&gt;When all of them are done, &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; checks the catalog: 
do any &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files still require parsing? If they do, another
cycle starts, again with parsing. When all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files are parsed,
the goal &lt;code class=&quot;highlighter-rouge&quot;&gt;transpile&lt;/code&gt; is executed, which turns &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; files into &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt;
and places them into &lt;code class=&quot;highlighter-rouge&quot;&gt;target/generated-sources&lt;/code&gt;. The rest is done by the
standard &lt;a href=&quot;https://maven.apache.org/plugins/maven-compiler-plugin/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maven-compiler-plugin&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s discuss each step in detail.&lt;/p&gt;

&lt;h2 id=&quot;parse-&quot;&gt;Parse 🌵&lt;/h2&gt;

&lt;p&gt;Say, this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; source code at &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/hello.eo&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+alias org.eolang.io.stdout

[] &amp;gt; hello
  &quot;Jeff&quot; &amp;gt; user
  stdout &amp;gt; @
    &quot;Hello, %s!&quot;
    user&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will be parsed to this XMIR (XML Intermediate Representation):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;program&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Jeff&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, %s!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/program&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you wonder what this XML means, read 
&lt;a href=&quot;https://www.eolang.org/eolang-paper.pdf&quot;&gt;this document&lt;/a&gt;:
there is a section about XMIR.&lt;/p&gt;

&lt;h2 id=&quot;optimize-&quot;&gt;Optimize 🌵&lt;/h2&gt;

&lt;p&gt;At this step the XMIR produced by the parser goes through 
many XSL transformations, sometimes getting additional elements and attributes.
Our example XMIR may get a new attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;@ref&lt;/code&gt;, pointing the reference to the
object &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; to the line where the object was defined:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;program&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Jeff&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, %s!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/program&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some XSL transformation may check for grammar or semantic errors and
add a new element &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;errors/&amp;gt;&lt;/code&gt; if something wrong is found. Thus, if parsing
didn’t find any syntax errors, all other errors will be visible inside
the XMIR document, for example, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;program&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;errors&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;error&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;package&amp;lt;/error&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/errors&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Jeff&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, %s!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/program&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By the way, this is not a real error, I just made it up.&lt;/p&gt;

&lt;h2 id=&quot;discover-&quot;&gt;Discover 🌵&lt;/h2&gt;

&lt;p&gt;At this step we find out which objects are “foreign”. In our example,
the object &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; is not foreign, since it’s defined in the code we
have in front of us, while the object &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; is not defined here and
that’s why is a foreign one.&lt;/p&gt;

&lt;p&gt;Going through all &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; files we can easily judge which object is foreign just
by looking at their names. Once we see the reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;org.eolang.io.stdout&lt;/code&gt;,
we check the presence of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;org/eolang/io/stdout.eo&lt;/code&gt; in the directory
with all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources. If the file is absent, we put the object name
into the CSV catalog and claim it to be foreign.&lt;/p&gt;

&lt;h2 id=&quot;pull&quot;&gt;Pull&lt;/h2&gt;

&lt;p&gt;Here we simply try to find source code &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files for all foreign
objects in Objectionary, by looking at its 
&lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;GitHub repository&lt;/a&gt;. 
For example, this is where we would find
&lt;a href=&quot;https://github.com/yegor256/objectionary/blob/master/objects/org/eolang/io/stdout.eo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.eo&lt;/code&gt;&lt;/a&gt;.
We find them there and pull to the local disc.&lt;/p&gt;

&lt;p&gt;Pay attention, we pull the sources. Not binaries or compiled XMIR
documents, but the sources in &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; format.&lt;/p&gt;

&lt;h2 id=&quot;resolve-&quot;&gt;Resolve 🌵&lt;/h2&gt;

&lt;p&gt;This is what &lt;a href=&quot;https://github.com/yegor256/objectionary/blob/master/objects/org/eolang/io/stdout.eo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.eo&lt;/code&gt;&lt;/a&gt;
may look like, after the pull:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;+package org.eolang.io
+rt jvm org.eolang:eo-runtime:0.10.2

[text] &amp;gt; stdout /bool&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object is an &lt;em&gt;atom&lt;/em&gt;. This means that even though we have its source code,
it’t not complete without a piece of platform-specific binary code.
An atom is an object implemented by the runtime
platform, where the EO program is executed (also known
as &lt;a href=&quot;https://en.wikipedia.org/wiki/Foreign_function_interface&quot;&gt;FFI mechanism&lt;/a&gt;).
The line that starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; (runtime) explains where to get the
runtime code. The &lt;code class=&quot;highlighter-rouge&quot;&gt;jvm&lt;/code&gt; part is the name of the runtime.&lt;/p&gt;

&lt;p&gt;We go to &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt;, find there the artifact 
&lt;a href=&quot;https://search.maven.org/artifact/org.eolang/eo-runtime&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.eolang:eo-runtime:0.10.2&lt;/code&gt;&lt;/a&gt;,
and unpack it (it’s a zip archive with &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files after all).&lt;/p&gt;

&lt;p&gt;By the way, a program may contain a number of &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; meta instructions, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+package org.eolang.io
+rt jvm org.eolang:eo-runtime:0.10.2
+rt ruby eo-core:0.5.8
+rt python eo-basics:0.0.3

[text] &amp;gt; stdout /bool&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, three runtime platforms will know where to get the missing code
for the &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; atom:
EO➝Java will go to &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt; for the JAR artifact,
EO➝Ruby will go to &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; 
trying to find the gem by the name &lt;code class=&quot;highlighter-rouge&quot;&gt;eo-core&lt;/code&gt; and version &lt;code class=&quot;highlighter-rouge&quot;&gt;0.5.8&lt;/code&gt;,
while EO➝Python will go to &lt;a href=&quot;https://pypi.org/&quot;&gt;PyPi&lt;/a&gt; 
trying to find &lt;code class=&quot;highlighter-rouge&quot;&gt;eo-basics&lt;/code&gt; package with the version &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.3&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;place-&quot;&gt;Place 🌵&lt;/h2&gt;

&lt;p&gt;Next we place all &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files found in the unpacked JAR,
into the &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes&lt;/code&gt; directory. We do this in order 
to help Maven Compiler Plugin find them in classpath.&lt;/p&gt;

&lt;h2 id=&quot;mark-&quot;&gt;Mark 🌵&lt;/h2&gt;

&lt;p&gt;In each JAR file that arrives we can find &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources. They are the programs
this JAR file has had in classpath while it was built. We consider them
as foreign objects too and add to the CSV catalog.&lt;/p&gt;

&lt;h2 id=&quot;transpile-&quot;&gt;Transpile 🌵&lt;/h2&gt;

&lt;p&gt;When all foreign objects which are registered in the catalog are downloaded,
compiled, and optimized, we are ready to start 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Source-to-source_compiler&quot;&gt;&lt;em&gt;transpiling&lt;/em&gt;&lt;/a&gt;.
Instead of compiling XMIR directly to Bytecode, we transpile it to &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt;
and let Java complier do the job of generating Bytecode.&lt;/p&gt;

&lt;p&gt;We believe that there are a few benefits of transpiling to Java vs. compilation to Bytecode:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Output code is easier to read and debug,&lt;/li&gt;
  &lt;li&gt;Optimization power of existing compilers is reused,&lt;/li&gt;
  &lt;li&gt;Complexity of a transpiler is lower than of a compiler,&lt;/li&gt;
  &lt;li&gt;Portability of the output code is higher.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We already have two EO➝Java transpilers: 
&lt;a href=&quot;https://github.com/cqfn/eo&quot;&gt;canonical one&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/polystat/hse-transpiler&quot;&gt;the one&lt;/a&gt; made by &lt;a href=&quot;https://www.hse.ru/en/&quot;&gt;HSE University&lt;/a&gt;. 
We also have EO➝Python experimental &lt;a href=&quot;https://github.com/polystat/eo2py&quot;&gt;transpiler&lt;/a&gt; 
made by students of &lt;a href=&quot;https://innopolis.university/en/&quot;&gt;Innopolis University&lt;/a&gt;. 
Most probably, when you read this article, there will be more transpilers available.&lt;/p&gt;

&lt;p&gt;Even though we believe in transpiling, it’s still possible to create 
EO➝Bytecode, EO➝LLVM, or EO➝x86 compilers. 
You are more than welcome to try!&lt;/p&gt;

&lt;h2 id=&quot;compile&quot;&gt;Compile&lt;/h2&gt;

&lt;p&gt;At this step, the standard &lt;a href=&quot;https://maven.apache.org/plugins/maven-compiler-plugin/&quot;&gt;Maven Compiler Plugin&lt;/a&gt; 
finds auto-generated &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; files in &lt;code class=&quot;highlighter-rouge&quot;&gt;target/generated-sources&lt;/code&gt;
and turns them into &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files.&lt;/p&gt;

&lt;h2 id=&quot;unplace-&quot;&gt;Unplace 🌵&lt;/h2&gt;

&lt;p&gt;Here, we remove all &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files unpacked from dependencies. This is
necessary, in order to avoid getting them packaged into the 
final JAR.&lt;/p&gt;

&lt;p&gt;We do placing and then unplacing simply because Maven Compiler Plugin
&lt;a href=&quot;https://stackoverflow.com/questions/3410548&quot;&gt;doesn’t allow&lt;/a&gt; 
us to extend classpath in runtime. If it would be possible,
we would just download dependencies from Maven Central and add them
to classpath, without unpacking, placing, and then unplacing.&lt;/p&gt;

&lt;h2 id=&quot;unspile-&quot;&gt;Unspile 🌵&lt;/h2&gt;

&lt;p&gt;Here, we delete all &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files from the &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/&lt;/code&gt; directory,
which were auto-generated from &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt;. We don’t want to ship binaries,
which can be generated from &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources. We only want to ship 
atoms, which are &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; files originally.&lt;/p&gt;

&lt;h2 id=&quot;copy-&quot;&gt;Copy 🌵&lt;/h2&gt;

&lt;p&gt;At this step we take all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources from &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; and copy
them to &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/EO-SOURCES/&lt;/code&gt; directory. Later, they will be
packaged together with &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt;, which will be
deployed to Maven Central. While copying, we replace &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt; in the
runtime version to the currently deploying version. Take a look 
at the file &lt;a href=&quot;https://github.com/cqfn/eo/blob/master/eo-runtime/src/main/eo/org/eolang/io/stdout.eo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.eo&lt;/code&gt;&lt;/a&gt;, 
in its source repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+package org.eolang.io
+rt jvm org.eolang:eo-runtime:0.0.0

[text] &amp;gt; stdout /bool&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The version at the &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; line is &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt;. When sources are copied to the 
JAR, this text is replaced.&lt;/p&gt;

&lt;p&gt;The motivation to ship sources together with binaries is the following.
When atom binaries are compiled from Java to Bytecode, they stay
next to transpiled sources. They are compiled together. Moreover,
unit tests also rely on both atom sources and auto-generated/transpiled
sources. We want future users of the JAR to know what sources we
had in place when the compilation was going on, to maybe let them reproduce
it or at least know what were the surroundings of the binaries they get.&lt;/p&gt;

&lt;p&gt;From a more practical standpoint, we need these sources in the JAR
in order to let the &lt;strong&gt;Mark&lt;/strong&gt; step understand what objects
are worth pulling next to the atoms resolved.&lt;/p&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;/h2&gt;

&lt;p&gt;Here, we package everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/&lt;/code&gt; into a JAR
archive and &lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;deploy&lt;/a&gt;  it
to Maven Central.&lt;/p&gt;

&lt;p&gt;I suggest deploying sources to GitHub Pages too, to let users see
them on the Web. Also, it will be helpful later when we make a pull 
request to Objectionary. 
Check this &lt;a href=&quot;https://github.com/yegor256/eo-files/blob/master/.rultor.yml#L17-L31&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.rultor.yml&lt;/code&gt;&lt;/a&gt; 
script in one of my EO libraries, it deploys &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources to GitHub Pages,
substituting &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt; version markers in them correctly.&lt;/p&gt;

&lt;h2 id=&quot;push&quot;&gt;Push&lt;/h2&gt;

&lt;p&gt;When the deployment is finished and Maven Central updates its CDN servers,
it’s time to submit a pull request to &lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;yegor256/objectionary&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources of objects go into &lt;code class=&quot;highlighter-rouge&quot;&gt;objects/&lt;/code&gt; and their unit tests
go into &lt;code class=&quot;highlighter-rouge&quot;&gt;tests/&lt;/code&gt;. Basically, we just copy &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/eo&lt;/code&gt;
over there. But, stop… one important detail. In the sources, as was said earlier,
we have &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; versions set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt;. Here, when we copy to Objectionary,
versions must be set to real numbers.&lt;/p&gt;

&lt;h2 id=&quot;merge&quot;&gt;Merge&lt;/h2&gt;

&lt;p&gt;When the pull request arrives, a GitHub Action pre-configured in the
&lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;yegor256/objectionary&lt;/a&gt; repository
transpiles all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources to all known platforms and runs all unit tests.
If everything is clean, we review the pull request and decide whether
the objects suggested go along with others already present in the Objectionary.&lt;/p&gt;

&lt;p&gt;Once the pull request is merged, the objects become part of the centralized
dictionary of all objects of EO. Take a look at &lt;a href=&quot;https://github.com/yegor256/objectionary/pull/2&quot;&gt;this pull request&lt;/a&gt;, 
where a new object was submitted to Objectionary, after its atom was
deployed to Maven Central.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Since the time of Kernighan and Ritchie we share binary code in libraries. You need to print some text with printf() in C++? You get libc library with 700+ other functions inside. You need to copy a Java stream? You get Apache Commons IO with copy() and 140+ other methods and classes. The same happens in all languages I’m aware of, like Ruby, Python, JavaScript, PHP: you need an object, or a class, or a function, or a method—you have to add the entire library to your build. Wouldn’t it be more elegant to deal with individual objects instead?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/10/maend-and-hons.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/10/maend-and-hons.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Calibrated Achievement Points</title><link href="https://www.yegor256.com/2021/10/12/calibrated-achievement-points.html" rel="alternate" type="text/html" title="Calibrated Achievement Points" /><published>2021-10-12T00:00:00+00:00</published><updated>2021-10-12T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/10/12/calibrated-achievement-points</id><content type="html" xml:base="https://www.yegor256.com/2021/10/12/calibrated-achievement-points.html">&lt;p&gt;It’s a well-known problem nowadays: how can we measure the performance 
and productivity of individual contributors who do non-routine 
creative work? The best examples are research and development (R&amp;amp;D) teams, which 
usually consist of software engineers, designers, 
scientists, architects, quality experts, product managers, and so on. 
Such professionals deliver results that are hard to get down to simple numbers. 
Many authors &lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;argue&lt;/a&gt;
that the very idea of measuring individual performance is toxic and may only 
lead to negative consequences. We tried to challenge this point of view 
and did an experiment in our team, which demonstrated that individual 
performance can indeed be measured, even if people’s work involves creativity, 
and results are hard to predict. We designed a system of 
Calibrated Achievement Points (CAPs), which are rewarded to those who deliver 
visible and tangible results of different kinds. This article explains how 
CAPs work and summarizes the results of the experiment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Gridlock&amp;#39;d (1997) by Vondie Curtis-Hall&quot; src=&quot;/images/2021/10/gridlockd.jpg&quot; longdesc=&quot;#88e55448&quot; /&gt;&lt;figcaption id=&quot;88e55448&quot;&gt;Gridlock&amp;#39;d (1997) by Vondie Curtis-Hall&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;“Competitions are for horses, not artists,” said 
&lt;a href=&quot;https://en.wikipedia.org/wiki/B%C3%A9la_Bart%C3%B3k&quot;&gt;Béla Bartók&lt;/a&gt;, 
a Hungarian composer about a hundred years ago.
Indeed, how can we measure the productivity of someone making a piece
of art, say, a painting? By the amount of acrylic put on the canvas
per minute? Or maybe we ask painters to compete on the size of the canvas in 
inches—the bigger the painting, the better the painter!? Obviously, such metrics
would be considered not only useless, but harmful. Encouraging artists
to compete by such productivity indicators will kill the very idea of art
and will most probably discourage most talented artists from participating.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Competition positively affects creativity.
&lt;/aside&gt;

&lt;p&gt;It seems that these days, however, there are people who would disagree with the famous composer. 
For example, Jacob Eisenberg from University College Dublin and 
William Forde Thompson from Macquarie University, 
in &lt;a href=&quot;https://www.researchgate.net/publication/233148051_The_Effects_of_Competition_on_Improvisers'_Motivation_Stress_and_Creative_Performance&quot;&gt;their research&lt;/a&gt;
into how amateur musicians’ creativity changes under stress of competition, demonstrated:
competition positively affects creativity.
A more recent &lt;a href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3250603&quot;&gt;study&lt;/a&gt;
by Daniel Gross from Duke University confirmed this finding
and extended it with a warning: heavy competition drives us to stop creativity
altogether.
Anil Rathi in &lt;a href=&quot;https://hbr.org/2014/11/to-encourage-innovation-make-it-a-competition&quot;&gt;HBR noted&lt;/a&gt;,
from a business perspective, 
that “well-managed internal competitions amplify the company’s overall creative ambience.”&lt;/p&gt;

&lt;p&gt;Thus, it seems that in the modern world competition and creativity go together.
However, the positive effect of competition depends on the
rules the team has to play by and the quality of metrics. 
If the metrics are reasonable and well understood
by all participants, the competition drives the creativity.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Qii3yrQJdHs&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Qii3yrQJdHs/mqdefault.jpg&quot; alt=&quot;YouTube video #Qii3yrQJdHs&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M179: Calibrated Achievement Points (CAP) to measure R&amp;amp;D productivity;
        18 October 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Of course, measuring the productivity of an artist by the amount of acrylic they
put on the canvas or the productivity of a composer by the frequency
of pushing the piano keys would be useless and harmful.
There are however many examples of good metrics in art, sport, and science,
which have stimulated the creativity of artists, athletes, and scientists for centuries:
the &lt;a href=&quot;https://www.nobelprize.org/&quot;&gt;Nobel Prize&lt;/a&gt; is probably the most famous competition every 
world-class researcher is dreaming of winning, while the Olympic Games and 
World Championships are what we have for athletes, 
and the &lt;a href=&quot;https://www.oscars.org/&quot;&gt;Oscars&lt;/a&gt; and &lt;a href=&quot;https://www.festival-cannes.com/en/&quot;&gt;Cannes Film Festival&lt;/a&gt;
are competitions for the best artists in cinema，and so on.&lt;/p&gt;

&lt;p&gt;Even though the value of competition may be well understood by
a business, a practical application of it in an R&amp;amp;D department
may face many obstacles. The main problem would be to answer the question
of both employees and the management: “What are the metrics that can objectively measure
the performance of our people, who are not athletes or actors?”&lt;/p&gt;

&lt;p&gt;After more than a year of experiments we found an answer and built
a system of CAPs. We defined a list of 30+ possible achievements 
any member of our R&amp;amp;D team can make while working within the scope of
our research and development. Here are some of them as an example (the “limit”
in brackets is how many achievements of this type are possible to count in one year):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Major Product Release”: 30 (4)
— a software product in a major version is packaged and released to its users;&lt;/li&gt;
  &lt;li&gt;“Conference Article Accepted”: 70
— a new research paper submitted to a computer science conference and accepted there for publishing;&lt;/li&gt;
  &lt;li&gt;“Technical Report Accepted”: 40 (4)
— a short 2-4 page internal report about technical results is submitted to
our review board and accepted by it;&lt;/li&gt;
  &lt;li&gt;“New Hire”: 20 (4)
— a new employee has passed all required interviews and joined the team;&lt;/li&gt;
  &lt;li&gt;“GitHub Star”: 1
— most of our software projects are open source, that’s why we reward new stars obtained in GitHub;&lt;/li&gt;
  &lt;li&gt;“Lecture or Seminar”: 5 (4)
— an educational presentation made inside the department.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list is available for everybody in our internal Wiki. Each member
of our team can decide for themselves which achievements to deliver
in order to win in the ranking. The achievements from the list don’t replace
the everyday work everybody is doing but are the “extra mile” anyone
can walk in order to stand out.&lt;/p&gt;

&lt;p&gt;Some achievements are personal, such as a lecture or a conference article,
while others may only be created by a team, such as a major product release
or new GitHub stars. Individual achievements are attributed directly
to the account of an employee, while team achievements are distributed
equally among team members: we have seven teams in our department.&lt;/p&gt;

&lt;p&gt;Obviously, the levels of competence and qualification are different
for different people. Some of them are junior programmers, while others
are PhD degree holders with decades of experience. Publishing a 
computer science article for a junior programmer is a much larger achievement
(which is harder to do) than for a seasoned expert. To take this 
imbalance into account we introduced “weights” for each person, which
are used as denominators. For example, if Jeff, a junior programmer, with a weight of 
10 publishes an article, he earns 7 points (we divide 70 by 10).
At the same time, if Sarah, a PhD with a weight of 25, publishes an article,
she earns only 2.8 points (we divide 70 by 25).&lt;/p&gt;

&lt;p&gt;We organized our results monitoring system with a “push” principle in mind:
everyone is responsible for reporting their own results to our team assistant.
We don’t “pull” the information from them, they decide for themselves
when and what to report. The team assistant collects the data in a simple
Excel spreadsheet and emails it to everybody once a week (there are about 50
people in our team). The document contains the journal of all achievements
reported to date, the ranking of every team member, and their weights.&lt;/p&gt;

&lt;p&gt;Since the information is publicly available weekly, we encourage every
team member to dispute the achievements of others, if they feel like it. We don’t
have a special auditor for the results people report. Instead, peer review
demonstrates perfect results: when someone reports something that 
violates our expectations of quality or fairness, almost
immediately a concern gets raises. Most disputes, which happen every few months,
we resolve by open discussions.&lt;/p&gt;

&lt;p&gt;As was noted by David Sarnoff, an American businessman and pioneer 
of American radio and television, “competition brings out the best in products 
and the worst in people.” The CAP system we designed helped us not only
see the best in product by increasing the productivity and creativity of
our people, but also decrease the amount of “worst” which inevitably
surfaces when people compete against each other. The CAP system gives us
the rules, which are fair and transparent enough to significantly reduce the amount
of conflicts and of cheating.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">It’s a well-known problem nowadays: how can we measure the performance and productivity of individual contributors who do non-routine creative work? The best examples are research and development (R&amp;amp;D) teams, which usually consist of software engineers, designers, scientists, architects, quality experts, product managers, and so on. Such professionals deliver results that are hard to get down to simple numbers. Many authors argue that the very idea of measuring individual performance is toxic and may only lead to negative consequences. We tried to challenge this point of view and did an experiment in our team, which demonstrated that individual performance can indeed be measured, even if people’s work involves creativity, and results are hard to predict. We designed a system of Calibrated Achievement Points (CAPs), which are rewarded to those who deliver visible and tangible results of different kinds. This article explains how CAPs work and summarizes the results of the experiment.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/10/gridlockd.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/10/gridlockd.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SIMBA: Simplified Management By Artifacts</title><link href="https://www.yegor256.com/2021/09/09/simba.html" rel="alternate" type="text/html" title="SIMBA: Simplified Management By Artifacts" /><published>2021-09-09T00:00:00+00:00</published><updated>2021-09-09T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/09/09/simba</id><content type="html" xml:base="https://www.yegor256.com/2021/09/09/simba.html">&lt;p&gt;Here is a very simple management framework, which we have used in 
our teams for the last two years. We came to it experimentally,
trying to merge some Agile principles, 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge&quot;&gt;PMBOK&lt;/a&gt; ideas, and
common sense. Our experience so far is positive, even though
the proposed rules of work are not really about 
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project management&lt;/a&gt;, 
but more about keeping an eye on the situation and making sure
it’s not falling apart. This is the best most 
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;modern teams&lt;/a&gt; 
can afford anyway.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Lion King (2019) by Jon Favreau&quot; src=&quot;/images/2021/09/lion-king.jpg&quot; longdesc=&quot;#c0d7dab4&quot; /&gt;&lt;figcaption id=&quot;c0d7dab4&quot;&gt;Lion King (2019) by Jon Favreau&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Each group has a Team Coordinator (TC), who is usually not the most
knowledgeable expert, but someone with good organizational
skills and strong self-discipline. TC is responsible for 
four cornerstone elements of our management framework: 
1) Plan, 2) Monday Reports, 3) Weekly Calls, and 4) Demos.&lt;/p&gt;

&lt;h2 id=&quot;plan&quot;&gt;Plan&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-thinking.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Our Plan is a very simple text document visible for everybody in the
team, usually in Google Docs, and editable by the TC only. 
It is a primitive version of a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Work_breakdown_structure&quot;&gt;Work Breakdown Structure (WBS)&lt;/a&gt;
married with a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Gantt_chart&quot;&gt;Gantt Chart&lt;/a&gt;,
where each line is a tangible artifact, like a file, a document,
a software module, a PDF report, and so on. Tasks are not welcome
in the Plan, only artifacts. An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Requirements v1 [Jeff+Bill, 25-Aug, 80%]
- Dataset with 500+ files [Anna+Jeff, 3-Sep, 100%]
- XYZ module deployed [John+Jeff, 14-Sep, 50%]
- Database redesign [Bill+Mary, 27-Sep, 20%]
- ABC package released [Jeff+Mary, 1-Oct, 0%]
- Report on data analysis [Jeff+Anna, 5-Oct, 10%]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each artifact has 1) an owner and 2) a reviewer. 
In the first artifact “&lt;em&gt;Requirements v1&lt;/em&gt;” the owner is Jeff and 
the reviewer is Bill. Jeff will make sure the requirements
are delivered, and Bill will check them and confirm. 
The owners may not necessarily
be primary contributors to their artifacts, but they are responsible for
keeping the delivery status under control. 
Simply put, when an artifact is delivered on time, we &lt;em&gt;reward&lt;/em&gt;
the owner; when the delivery is missed, we also &lt;em&gt;blame&lt;/em&gt; (I know, most of you
don’t like this word) the owner.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=939ntzufGB0&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/939ntzufGB0/mqdefault.jpg&quot; alt=&quot;YouTube video #939ntzufGB0&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M178: Try to focus your team on artifacts and their delivery status;
        27 September 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Each artifact has a planned delivery date. The dates may
change as often as necessary, but at any moment of time
the Plan has to have dates defined for &lt;em&gt;all&lt;/em&gt; artifacts.
The list is reverse sorted by dates.&lt;/p&gt;

&lt;p&gt;Each artifact has a subjectively measured status of completion,
like “80%” for the first artifact above. The TC collects this
information from reviewers, not owners.&lt;/p&gt;

&lt;p&gt;No more than three artifacts may be owned by one person 
and no more than four may be reviewed. Thus, anyone
is allowed to keep no more than seven artifacts under control.&lt;/p&gt;

&lt;h2 id=&quot;monday-reports&quot;&gt;Monday Reports&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-writing.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Each Monday morning, the TC sends a report by email
to all team sponsors: a plain-text email without
any attachments or fancy formatting. All stakeholders,
including all team members, are CC-ed too.
An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;From: Team Coordinator
To: Big Boss
CC: Programmer #1, Programmer #2, Friend #1, etc.
Subject: WEEK13 Dataset, Requirements, XYZ 

Hi all,

Last week achievements:
- Added 100 new files to the Dataset [100%]
- Fixed the deployment of XYZ [50%]
- Refined the requirements [80%]
Next week plans:
- To publish ABC package draft
- To review first draft of the report
Risks:
- The server is weak, we may fail the delivery
  of the dataset, report milestone will be missed.

Bye.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;subject&lt;/strong&gt; of the email starts with the &lt;code class=&quot;highlighter-rouge&quot;&gt;WEEK13&lt;/code&gt;, where
13 is the number of the previous calendar week 
in the current year. By the way, 
there are &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_week_date&quot;&gt;52 weeks&lt;/a&gt; 
in almost every year.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;WEEK&lt;/code&gt; part makes report emails easily searchable in the inbox.
There is also a comma-separated list of the most important topics of the report,
to give the reader a quick impression about the results being reported.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;achievement&lt;/strong&gt; of the last week starts with a verb or a past
tense, like “fixed,” “added,” “refined” etc. After the verb
the artifact is mentioned, which we contributed to. At the end 
of each line there is a progress status, subjectively measured
by the author of the report. There should be no more than seven
achievement points, no matter how big the team is nor how detailed
the Plan. The report must not tell the full story, but only 
highlight what’s most important.&lt;/p&gt;

&lt;p&gt;Wherever possible, each achievement item must be supplemented
with a link leading to a pull request, or a file, or a document.
There has to be something traceable and verifiable: the readers
of the report must be able to find all necessary details for
each item without asking its owner or the author of the report.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;task&lt;/strong&gt; for a new week starts with a verb in the infinitive
form, like “to publish” or “to review” and then, of course,
the artifact is mentioned. There should be no more than seven
tasks in the list.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;risk&lt;/strong&gt;, in &lt;a href=&quot;/2019/05/14/cause-risk-effect.html&quot;&gt;Cause-Risk-Effect format&lt;/a&gt;, 
is an opportunity for the reporter to protect the team:
the more people knew about risks, the harder it will be to blame
the team for failures, which are inevitable.&lt;/p&gt;

&lt;h2 id=&quot;weekly-calls&quot;&gt;Weekly Calls&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-listening.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Every week at the same time and day, 
we make a 30-minute Zoom status call: everybody participates.
We look at the Plan and discuss whether our work is still on track.
We ask each other:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Will all artifacts delivered mean success?&lt;/li&gt;
  &lt;li&gt;Did we break down the scope correctly?&lt;/li&gt;
  &lt;li&gt;What did we miss in our Plan?&lt;/li&gt;
  &lt;li&gt;Are all owners committed to the their dates and scopes?&lt;/li&gt;
  &lt;li&gt;Are there any risks overlooked?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We &lt;em&gt;don’t&lt;/em&gt; use status calls for reporting. This is what we have
Monday Reports for.&lt;/p&gt;

&lt;p&gt;All decisions we make at status calls we call Meeting Minutes and send by email to everybody (or post in our Telegram group chat).&lt;/p&gt;

&lt;h2 id=&quot;demos&quot;&gt;Demos&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-speaking.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Almost every week we ask some artifact owner to demonstrate his or her
results at a one-hour “demo” Zoom call. Usually it happens when
the delivery date is approaching and an owner is ready to 
show something complete. However, demo calls are also very useful
to collect opinions when an artifact is still in progress.&lt;/p&gt;

&lt;p&gt;It’s the responsibility of a TC to make regular demo calls weekly,
inviting owners of the most important artifacts.&lt;/p&gt;

&lt;p&gt;All status calls and demo calls are recorded and posted into 
a private list on YouTube, where all team members can watch them
later.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Here is a very simple management framework, which we have used in our teams for the last two years. We came to it experimentally, trying to merge some Agile principles, PMBOK ideas, and common sense. Our experience so far is positive, even though the proposed rules of work are not really about project management, but more about keeping an eye on the situation and making sure it’s not falling apart. This is the best most modern teams can afford anyway.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/09/lion-king.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/09/lion-king.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Logging in Unit Tests, a Bad Practice</title><link href="https://www.yegor256.com/2021/08/11/logging-in-unit-tests.html" rel="alternate" type="text/html" title="Logging in Unit Tests, a Bad Practice" /><published>2021-08-11T00:00:00+00:00</published><updated>2021-08-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/08/11/logging-in-unit-tests</id><content type="html" xml:base="https://www.yegor256.com/2021/08/11/logging-in-unit-tests.html">&lt;p&gt;Logging is an inevitable part of debugging. Well, at least in modern
high-level programming languages and architectures. It wasn’t thirty 
years ago, in Assembly, but it is now. Sometimes we trace variables, 
but rarely. More often we just print them to console. Moreover, we don’t
just print them using &lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; or whatever it is we have for console
printing; instead, we send messages to a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_logging_framework&quot;&gt;logging framework&lt;/a&gt;, which deals with 
the console or any other logging destinations, like files. The beauty
of such frameworks is that we don’t need to remove logging after debugging
is finished—we just configure the framework to suppress all debug-level
messages in the production environment. Some logging may happen
inside unit tests. Do we also leave them there or maybe not?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Children of Men (2006) by Alfonso Cuarón&quot; src=&quot;/images/2021/08/children-of-men.jpg&quot; longdesc=&quot;#739264dd&quot; /&gt;&lt;figcaption id=&quot;739264dd&quot;&gt;Children of Men (2006) by Alfonso Cuarón&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is an example (it’s a simplification of a real unit test at
&lt;a href=&quot;https://github.com/polystat/polystat/blob/0.0.1/src/test/java/org/polystat/far/CalcTest.java&quot;&gt;CalcTest.java&lt;/a&gt;
from &lt;a href=&quot;https://www.polystat.org&quot;&gt;Polystat&lt;/a&gt;, a static analyzer we’re working on right now):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.jcabi.log.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.jcabi.xml.XML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildsSimpleXml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is the XML:\n%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNullValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is Java and I’m using &lt;a href=&quot;https://junit.org/junit5/&quot;&gt;JUnit5&lt;/a&gt;+&lt;a href=&quot;http://hamcrest.org/&quot;&gt;Hamcrest&lt;/a&gt; 
together with my own logging framework
&lt;a href=&quot;https://log.jcabi.com&quot;&gt;jcabi-log&lt;/a&gt;, which is a decorator of 
&lt;a href=&quot;http://www.slf4j.org/&quot;&gt;Slf4j&lt;/a&gt;, which uses &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j&lt;/a&gt; to print to 
the console.&lt;/p&gt;

&lt;p&gt;What is going on here? There is a class &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; with a method &lt;code class=&quot;highlighter-rouge&quot;&gt;build()&lt;/code&gt;, which
makes an XML document (I’m using &lt;a href=&quot;https://xml.jcabi.com&quot;&gt;jcabi-xml&lt;/a&gt; library, which is a decorator of
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/package-summary.html&quot;&gt;JDK DOM&lt;/a&gt;). 
Then, the unit test prints the contents of the XML document to
the console and makes a pretty silly assertion: the document is not NULL.
It is silly because if it were NULL, the logging statement 
would already fail at the &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;I’m the developer of this code, so I know what was going on: I was too lazy
to write a proper assertion, which would look into the XML document
and ensure that there were proper elements inside. I just printed it to the
console, &lt;em&gt;visually&lt;/em&gt; confirmed its validity and called it a day. 
If I’d had more time, this is how I would have written a much better unit test
(I made the &lt;a href=&quot;https://github.com/polystat/polystat/issues/10&quot;&gt;improvements&lt;/a&gt; in Polystat tests just now):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.jcabi.matchers.XhtmlMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildsSimpleXml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;XhtmlMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xhtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;XhtmlMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasXPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the XML document is built and then tested for the presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;//foo&lt;/code&gt; 
&lt;a href=&quot;https://en.wikipedia.org/wiki/XPath&quot;&gt;XPath&lt;/a&gt; inside it. 
The content of the document will be printed to the console
only in the case where the assertion fails. If the XML has the required
XPath, there will be no console output, which means no noise for future
developers.&lt;/p&gt;

&lt;p&gt;Moreover, now it’s a &lt;em&gt;single-statement&lt;/em&gt; test, which by itself is 
&lt;a href=&quot;/2017/05/17/single-statement-unit-tests.html&quot;&gt;good practice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Looking back on my experience of testing and logging, 
I believe that logging in unit tests is a bad idea. Sometimes
inevitable, because we are lazy or simply don’t have enough time, but still bad.
Logging helps us confirm visually the correctness of the output,
but it takes this knowledge away from the project. Those who will work with
the test later on won’t know what we’ve seen there. They will
see the output at the console, but will not understand whether it &lt;em&gt;still&lt;/em&gt; matches
my expectations at the time of writing.&lt;/p&gt;

&lt;p&gt;I would say that every logging line in a unit test is a message from its author:
“I know something about the data I see now, but I’m too lazy to tell you about it,
you just have to believe me that it looks good.”&lt;/p&gt;

&lt;p&gt;I suggest we don’t leave such messages in our code.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Do you print log messages from your unit tests?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1421723724638789632?ref_src=twsrc%5Etfw&quot;&gt;August 1, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Logging is an inevitable part of debugging. Well, at least in modern high-level programming languages and architectures. It wasn’t thirty years ago, in Assembly, but it is now. Sometimes we trace variables, but rarely. More often we just print them to console. Moreover, we don’t just print them using println or whatever it is we have for console printing; instead, we send messages to a logging framework, which deals with the console or any other logging destinations, like files. The beauty of such frameworks is that we don’t need to remove logging after debugging is finished—we just configure the framework to suppress all debug-level messages in the production environment. Some logging may happen inside unit tests. Do we also leave them there or maybe not?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/08/children-of-men.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/08/children-of-men.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Prestructors</title><link href="https://www.yegor256.com/2021/08/04/prestructors.html" rel="alternate" type="text/html" title="Prestructors" /><published>2021-08-04T00:00:00+00:00</published><updated>2021-08-04T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/08/04/prestructors</id><content type="html" xml:base="https://www.yegor256.com/2021/08/04/prestructors.html">&lt;p&gt;Making constructors pre-process the arguments before 
encapsulating them seems to be 
&lt;a href=&quot;/2015/05/07/ctors-must-be-code-free.html&quot;&gt;bad practice&lt;/a&gt;. 
However, very often it’s necessary to do exactly that: perform some manipulations
with the objects provided as arguments and only then assign
them to the attributes of the constructed object. For this purpose
I suggest using prestructors, which could be methods or stand-alone
objects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Huge in France (2019) by Gad Elmaleh et al.&quot; src=&quot;/images/2021/08/huge-in-france.jpg&quot; longdesc=&quot;#957b98b5&quot; /&gt;&lt;figcaption id=&quot;957b98b5&quot;&gt;Huge in France (2019) by Gad Elmaleh et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Say, this is your code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmodifiableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only constructor expects a list of titles, which is being
encapsulated as &lt;code class=&quot;highlighter-rouge&quot;&gt;this.titles&lt;/code&gt; for some future use. It’s also protected against
any accidental modifications, through the JDK decorator at
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableList-java.util.List-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unmodifiableList&lt;/code&gt;&lt;/a&gt;.
So far, so good. Now, we want to make our class a bit smarter 
and let it accept not only the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; but an array of strings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmodifiableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s wrong with this code? Those of you who have read my earlier 
&lt;a href=&quot;/tag/oop.html&quot;&gt;blog posts about OOP&lt;/a&gt; most definitely know the answer. First, 
there are two primary constructors, which is another 
&lt;a href=&quot;/2015/05/28/one-primary-constructor.html&quot;&gt;bad practice&lt;/a&gt;. 
Second, there is code in the second constructor, which is also a 
&lt;a href=&quot;/2015/05/07/ctors-must-be-code-free.html&quot;&gt;bad idea&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is how I usually refactor this code, to solve both mentioned problems:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmodifiableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I call this new static method &lt;code class=&quot;highlighter-rouge&quot;&gt;toList()&lt;/code&gt; a &lt;em&gt;prestructor&lt;/em&gt;: it is used
only at the moment of object construction and only from the
secondary constructor.&lt;/p&gt;

&lt;p&gt;An even better way to design it would be to make a new class &lt;code class=&quot;highlighter-rouge&quot;&gt;ToList&lt;/code&gt;,
which would do exactly the same, but in a more declarative and lazy way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmodifiableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// All required methods of the List interface&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.javadoc.io/static/org.cactoos/cactoos/0.50/org/cactoos/list/ListOf.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ListOf&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt; is a perfect example 
of such a prestructor.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Making constructors pre-process the arguments before encapsulating them seems to be bad practice. However, very often it’s necessary to do exactly that: perform some manipulations with the objects provided as arguments and only then assign them to the attributes of the constructed object. For this purpose I suggest using prestructors, which could be methods or stand-alone objects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/08/huge-in-france.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/08/huge-in-france.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Few Tips for Recruiters</title><link href="https://www.yegor256.com/2021/06/01/tips-for-recruiters.html" rel="alternate" type="text/html" title="A Few Tips for Recruiters" /><published>2021-06-01T00:00:00+00:00</published><updated>2021-06-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/06/01/tips-for-recruiters</id><content type="html" xml:base="https://www.yegor256.com/2021/06/01/tips-for-recruiters.html">&lt;p&gt;Recruiters, you know what we programmers think about you, don’t you? 
Read &lt;a href=&quot;/2017/02/21/say-no-to-google-recruiters.html&quot;&gt;this&lt;/a&gt;
and &lt;a href=&quot;/2015/09/29/mayonnaise.html&quot;&gt;this&lt;/a&gt;, 
to get the full picture. You are still here because we still
don’t have good tools and we still enjoy being enslaved. One day
this will be over and you will stop exploiting our drawbacks,
will lose your “Senior Recruiter” jobs, and start doing something 
useful and meaningful. However, until this day comes, here is some
advice, to help you be a &lt;del&gt;less annoying&lt;/del&gt; better 
head hunter.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Fifth Element (1997) by Luc Besson&quot; src=&quot;/images/2021/06/the-fifth-element.jpg&quot; longdesc=&quot;#009e7c42&quot; /&gt;&lt;figcaption id=&quot;009e7c42&quot;&gt;The Fifth Element (1997) by Luc Besson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Recruitment is very much like dating. And you, like it or not,
are a &lt;em&gt;match maker&lt;/em&gt;. Just like those marriage brokers organize
dates and help people fall in love, you help us break up with
the company we’re married to and fall in love with a new one.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=dlPk1AE2aQk&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/dlPk1AE2aQk/mqdefault.jpg&quot; alt=&quot;YouTube video #dlPk1AE2aQk&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M170: recruiters may do a better job if listen to us programmers;
        8 June 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;The best date happens when people research each other beforehand.
You too, should come prepared.
When I get an email from a recruiter that
starts with a description of the job, I most likely just delete it.
Instead, to catch our attention, the letter should start with
an explanation of why you decided to reach out: 
Maybe you already know something about me? 
Maybe you read my code on GitHub? 
Maybe someone told you about me? 
Maybe you know what language I’m coding with? 
When you are interested in me, I will be much more interested in you,
and the company you represent, and the job you are trying to match me with.&lt;/p&gt;

&lt;h2 id=&quot;its-not-about-you&quot;&gt;It’s Not About You&lt;/h2&gt;

&lt;p&gt;It’s important to remember that you are my match maker, but not my date. 
I’m not interested in a date with you. I want to have a date with people who I will work for.
In most cases, you are a temporary person, who will disappear once I’m
hired. That’s why you will do yourself a big favor if you position yourself
the right way. Compare these two:&lt;/p&gt;

&lt;table class=&quot;right-wrong&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Jeff&lt;/th&gt;
      &lt;th&gt;Amy&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Hello, I’ve got a database of 5,000 single ladies. I can help you find your soul mate!&lt;/td&gt;
      &lt;td&gt;Hey, I know Silva, she seems to be a perfect match for you, how about I introduce you two?&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Jeff is trying to sell himself. He has the database! He knows the ladies!
I should talk to him! He is my new friend!… No, not really, this is not
what I want. I don’t want you, Jeff. Sorry. I’m not interested in knowing
or dating you. Delete.&lt;/p&gt;

&lt;p&gt;Amy, on the other hand, puts Silva in front. This is who I want to know: Silva!
Amy is just a temporary &lt;del&gt;middleman&lt;/del&gt; middlewoman. She is not even trying
to sell herself, even though, I’m sure, she also has a database of ladies, and so on.
Technically speaking, she is no different than Jeff, but she presents herself right: 
“I’m here just to introduce you to Silva, that’s it!” Amy, I like you, I reply!&lt;/p&gt;

&lt;p&gt;How about these two:&lt;/p&gt;

&lt;table class=&quot;right-wrong&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Jeff&lt;/th&gt;
      &lt;th&gt;Amy&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Hi, we’re looking for a Java developer to join our new project for online payments, can you send your updated CV?&lt;/td&gt;
      &lt;td&gt;Hey, I showed your profile to our Java tech lead, he is very interested in talking to you, may I introduce you?&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Which message do you think has a higher chance of being answered? I bet Jeff’s
email will be replied to only by those who don’t care much where they work. 
For them, seeing a new job opportunity in their Inbox is enough to click “Reply”. 
But ask yourself: does your company need those people?&lt;/p&gt;

&lt;h2 id=&quot;do-you-understand-the-market&quot;&gt;Do You Understand the Market?&lt;/h2&gt;

&lt;p&gt;Dating, just like head hunting, is about finding the right people.
First finding, and then reaching. It’s not a problem to just approach
a Java developer and schedule an interview. Most probably you, as a recruiter,
are not paid for each interview you arrange. You are paid for “a placement”
you make—when the developer is actually hired. We will be hired only
when there is a good match. So, your first task is to find those who 
potentially are a good match. You have to research the market and create
a &lt;em&gt;map of talents&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I would start with a list of key people on the market,
who are the most visible and the best, whatever that means. If your hiring
focus is small enough (this is how it should be), you will identify
just a few dozen key people. Then, starting from them, you dig deeper
and find out where they work, who works in their teams, where
they worked before, and so on. Check the conferences and workshops
where people present their ideas and achievements. Check their GitHub
accounts and see who else is committing to their projects. Do whatever
it takes, but make the map. Maybe even pay a private detective to collect
the data you can’t find in the Internet: who do they drink beer with, where
do they spend their vacations, who do they sleep with, etc. 
I’m kidding here, but you get the idea: you need to know the market!&lt;/p&gt;

&lt;p&gt;Then, once you know your target market, the best way would be to make 
&lt;em&gt;it approach you&lt;/em&gt;. Think about this: 
the best people are hardly reading job boards, 
they don’t post their CVs anywhere, 
don’t make their LinkedIn pages “open for hiring offers,” 
and usually don’t reply to recruiters (for various reasons).
Simply put, they have better things to do than talk to you.
It’s hard to approach them. Sometimes even impossible.&lt;/p&gt;

&lt;p&gt;But you can make them come to you, if you do something that will be
interesting for them. For example, if you organize a competition for new
open source projects with a prize fund of $1M. It’s very likely that
the best people will come to you to compete for this money. There you will
have a chance to talk to them. You don’t have a million dollars to give away
just to hire the best people? Sad… Maybe you can organize a workshop
where people meet to discuss Java and invite those who you want to 
approach? There are many options. Just give them something they are
interested in and they will want to know you.&lt;/p&gt;

&lt;h2 id=&quot;formal-emails-get-deleted&quot;&gt;Formal Emails Get Deleted&lt;/h2&gt;

&lt;p&gt;If you don’t have a million dollars and you don’t have time to
make a good conference for them, you have to do cold calls. Well, more like
cold emails and cold LinkedIn messages. I suggest you sound
&lt;em&gt;short&lt;/em&gt; and &lt;em&gt;informal&lt;/em&gt;. Compare these two:&lt;/p&gt;

&lt;table class=&quot;right-wrong&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Jeff&lt;/th&gt;
      &lt;th&gt;Amy&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Dear Sarah,&lt;br /&gt;&lt;br /&gt;My name is Jeff, I’m a recruiter in ACME Inc. We have a new interesting project that needs senior Java developers. The requirements for this position can be found in the attached document.&lt;br /&gt;&lt;br /&gt;Please, send me your updated CV if you are interested.&lt;br /&gt;&lt;br /&gt;Sincerely Yours,&lt;br /&gt;Jeffrey Lebowski&lt;br /&gt;ACME Inc.&lt;br /&gt;Palo Alto, CA&lt;/td&gt;
      &lt;td&gt;Sarah, we’ve never met before but I showed your GitHub to our Head of Dev and she asked me to email you. Her team is making a new payment platform and they lack expertise in big data. How about you two talk?&lt;br /&gt;&lt;br /&gt;BR,&lt;br /&gt;Amy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Jeff’s message is just wrong, on so many levels: it explicitly says that Jeff is
a recruiter (nobody likes recruiters!), it doesn’t say anything about why
Jeff is approaching Sarah, and it’s too formal and official. To me the letter
seems to be template-based, while only the name of the recipient is
replaced (which is not always the case—I’m getting many emails that
start with &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, %NAME%&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The message from Amy is much better: there is nothing in it that tells me
that Amy is a recruiter! Maybe she is a programmer from the team? Maybe she
is a CEO of the company? I don’t know. And I don’t want to imagine her
being a recruiter. I imagine her being a member of the team, who
is really interested in my stuff on GitHub. She is someone who studied
my work and got interested. She is already my friend. That’s why I reply.&lt;/p&gt;

&lt;h2 id=&quot;cut-corners-for-me&quot;&gt;Cut Corners for Me&lt;/h2&gt;

&lt;p&gt;The biggest disadvantage of Jeff’s email and the advantage of Amy’s is
in the way they present the hiring process to me, the candidate. Jeff
is sending me requirements and right from the start makes it look very long
and official. I immediately imagine a series of interviews, a bunch of
forms to fill up, a month-long journey full of stress. Do I want to 
start that if my current job is more or less OK? No, I don’t. On the other
hand, Amy, right from the first message, suggested connecting me with the
hiring manager, who is already interested in me. Maybe there will be
a full official process of hiring. Most likely! But I already have the
key person on my side: the Head of Dev. The rest will just be formalities.&lt;/p&gt;

&lt;p&gt;Try to put yourself in my shoes. I don’t know your team, I don’t know
the project, I’m scared of change, and I’m not sure I should do it.
It’s easier for me to stay where I am. Also remember that for most people
changing jobs is very similar to betrayal: they quit the team, which
relies on them. You are the person who turns them into traitors. Try to 
make this journey of stress and treachery look simpler for them:&lt;/p&gt;

&lt;table class=&quot;right-wrong&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Jeff&lt;/th&gt;
      &lt;th&gt;Amy&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob,&lt;br /&gt;&lt;br /&gt;Send me your updated CV and we will take it from there.&lt;br /&gt;&lt;br /&gt;Sincerely,&lt;br /&gt;Jeff&lt;/td&gt;
      &lt;td&gt;Bob,&lt;br /&gt;&lt;br /&gt;Let me take a look at your CV. Here is how we usually do this: first, you have an interview with the Head of Dev; then, our chief architect talks to you; finally, our HR guys will have a quick call with you; and in about a week we give you an offer. The entire process usually takes up to a month. How does it sound for you? Ready to start a trip? :)&lt;br /&gt;&lt;br /&gt;BR,&lt;br /&gt;Amy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I believe it’s obvious that Amy is doing a much better job of helping
Bob understand what he has to be prepared for. We are scared of things
we don’t understand or don’t know. You don’t want your candidates to be
scared of you. You want them to feel comfortable.&lt;/p&gt;

&lt;p&gt;The best way to attract us candidates is to show that you are ready
to simplify the hiring process especially for us. Well, for me only. Not for everybody.
For example:&lt;/p&gt;

&lt;table class=&quot;right-wrong&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Jeff&lt;/th&gt;
      &lt;th&gt;Amy&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob,&lt;br /&gt;&lt;br /&gt;Send me your updated CV and I’ll get the ball rolling. There will be two online interviews and then we will invite you to the office for the final one. Before we start, I kindly ask you to sign the attached form about personal data disclosure. It’s just a formality.&lt;br /&gt;&lt;br /&gt;Yours,&lt;br /&gt;Jeff&lt;/td&gt;
      &lt;td&gt;Bob,&lt;br /&gt;&lt;br /&gt;I need your CV and then I think I can optimize our hiring process a bit: instead of three interviews there will be just two. How does that sound?&lt;br /&gt;&lt;br /&gt;BR,&lt;br /&gt;Amy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Smells like a sales trick? It is.&lt;/p&gt;

&lt;h2 id=&quot;dont-loose-the-intrigue&quot;&gt;Don’t Loose the Intrigue&lt;/h2&gt;

&lt;p&gt;The best companies, I believe, try to find a job position for a person, instead
of finding a person for a position. In other words, they invite
the best people and then let them decide what’s the best
application of their skills and expertise. That’s why the less specific
you are about your “requirements,” the better. Just “we have problems
with big data” is more than enough for a job description. The rest
of it you will explain later, on the first interview. You don’t tell
your requirements to someone you just caught sight of in a bar, do you?
The same here. Remember, recruiting is dating—you have to keep the intrigue up.&lt;/p&gt;

&lt;p&gt;Instead of saying what you need and sending the job description, briefly
explain the problems your team is facing:&lt;/p&gt;

&lt;table class=&quot;right-wrong&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Jeff&lt;/th&gt;
      &lt;th&gt;Amy&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob,&lt;br /&gt;&lt;br /&gt;We are looking for a Java developer who knows Spring Framework, MySQL, and XML. You need to have at least five years of hands-on coding experience. You need to be familiar with the payment processing domain.&lt;br /&gt;&lt;br /&gt;Yours,&lt;br /&gt;Jeff&lt;/td&gt;
      &lt;td&gt;Bob,&lt;br /&gt;&lt;br /&gt;We are making a payment processing app and use Spring, MySQL, and XML. Our team lacks expertise in this new domain. We need help, both in form of advice and daily coding.&lt;br /&gt;&lt;br /&gt;BR,&lt;br /&gt;Amy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Jeff is placing his requirements on top, which hardly sounds attractive. Just like
in dating, such an arrogant attitude is not helpful at all. Instead, Amy is
talking about problems she and her team are facing. It’s up to Bob to decide
whether there is a fit or not.&lt;/p&gt;

&lt;p&gt;I would suggest making your job descriptions as undemanding as possible.
Your goal is to attract the best candidate, not to find those who 
are ready to put up with whatever you write in the job description. Write about problems
and issues you expect your candidates to solve. Don’t focus too much on
the expectations you have for them. Of cause you have those expectations,
but putting them right on the table at the first date is a silly idea.&lt;/p&gt;

&lt;p&gt;That’s all. Happy recruiting!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;You will reply to a cold email from a recruiter if...&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1419250019333550080?ref_src=twsrc%5Etfw&quot;&gt;July 25, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html">Recruiters, you know what we programmers think about you, don’t you? Read this and this, to get the full picture. You are still here because we still don’t have good tools and we still enjoy being enslaved. One day this will be over and you will stop exploiting our drawbacks, will lose your “Senior Recruiter” jobs, and start doing something useful and meaningful. However, until this day comes, here is some advice, to help you be a less annoying better head hunter.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/06/the-fifth-element.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/06/the-fifth-element.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How We Organized the First ICCQ</title><link href="https://www.yegor256.com/2021/04/14/how-we-organized-iccq.html" rel="alternate" type="text/html" title="How We Organized the First ICCQ" /><published>2021-04-14T00:00:00+00:00</published><updated>2021-04-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/04/14/how-we-organized-iccq</id><content type="html" xml:base="https://www.yegor256.com/2021/04/14/how-we-organized-iccq.html">&lt;p&gt;First, let me clarify what kind of conference we are talking about. 
There are two types:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Professional_conference&quot;&gt;professional&lt;/a&gt;
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Academic_conference&quot;&gt;academic&lt;/a&gt;.
The difference is &lt;a href=&quot;https://redmonk.com/kfitzpatrick/2019/01/29/tech-industry-events-vs-academic-conferences/&quot;&gt;huge&lt;/a&gt;.
My understanding is that professional conferences are for &lt;em&gt;practitioners&lt;/em&gt;, 
while academic ones are for &lt;em&gt;researchers&lt;/em&gt;.
ICCQ, which we organized this year, was an academic conference.
I haven’t had any expertise in organizing such things, and had to go through it all for the first time.
Here is a more or less detailed description of the journey.
Feel free to learn from it and make a better conference yourself.
We will try to make a better one next year, &lt;a href=&quot;https://www.iccq.ru/2022.html&quot;&gt;ICCQ 2022&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;GLOW, Season 1 (2017) by Liz Flahive and Carly Mensch&quot; src=&quot;/images/2021/04/glow.jpg&quot; longdesc=&quot;#842e29ce&quot; /&gt;&lt;figcaption id=&quot;842e29ce&quot;&gt;GLOW, Season 1 (2017) by Liz Flahive and Carly Mensch&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;&lt;br /&gt;
As I said in &lt;a href=&quot;https://www.youtube.com/watch?v=65baOBHeVMI&quot;&gt;my opening speech&lt;/a&gt;, 
the purpose of the new event was to 
help the Russian computer science research community better connect with their worldwide
colleagues. Besides having a good intention I also knew where to get a supportive and reliable sponsor.
The rest was just a matter of implementation.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=65baOBHeVMI&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/65baOBHeVMI/mqdefault.jpg&quot; alt=&quot;YouTube video #65baOBHeVMI&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;Yegor Bugayenko: Opening;
        30 March 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;br /&gt;
There were many options to chose from, but it seemed
that the de-facto standard was a few letters, all-caps, like
&lt;a href=&quot;https://conf.researchr.org/series/splash&quot;&gt;SPLASH&lt;/a&gt;, 
&lt;a href=&quot;http://www.icse-conferences.org/&quot;&gt;ICSE&lt;/a&gt;, 
&lt;a href=&quot;https://pldi21.sigplan.org/&quot;&gt;PLDI&lt;/a&gt;, 
&lt;a href=&quot;https://www.hillside.net/plop/2020/&quot;&gt;PLOP&lt;/a&gt;, 
&lt;a href=&quot;https://www.guide2research.com/topconf/&quot;&gt;etc.&lt;/a&gt; 
There are expections like &lt;a href=&quot;https://2021.eurosys.org/&quot;&gt;EuroSys&lt;/a&gt;
or &lt;a href=&quot;https://www.ieee-security.org/TC/EuroSP2021/&quot;&gt;EuroS&amp;amp;P&lt;/a&gt; but
this naming convention is much less popular.
We picked ICCQ, which was not yet actively used in Google and 
&lt;a href=&quot;https://www.iccq.ru&quot;&gt;the domain&lt;/a&gt;
with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.ru&lt;/code&gt; extension was available. Initially, we aimed for &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt;,
but since the event was supposed to &lt;em&gt;always&lt;/em&gt; be Russia-based, the &lt;code class=&quot;highlighter-rouge&quot;&gt;.ru&lt;/code&gt;
seemed to be a perfect choice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subject&lt;/strong&gt;&lt;br /&gt;
Many conferences aim at many topics, maybe in order to 
attract more papers. We decided to behave in the opposite manner:
we picked a single topic of &lt;em&gt;code quality&lt;/em&gt; and decided to reject all papers, 
which would not be relevant to it.
We didn’t even publish the list of topics, like many other
events do. We just said that we are about code quality and 
how to increase it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Organizers&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.iccq.ru/2021.html#organizers&quot;&gt;Organizers&lt;/a&gt; were the people who I needed most of all.
They were not supposed to write papers or make speeches, but without
them I would not be able to make the conference. Not all of them
stayed with us for a whole year, some of them joined and quit, some
moved to the Progam Committee (PC) later. But I’m very thankful to 
&lt;a href=&quot;https://www.linkedin.com/in/sebelov/&quot;&gt;Sergey Belov&lt;/a&gt;,
&lt;a href=&quot;https://scholar.google.ru/citations?user=sZlMj_wAAAAJ&quot;&gt;Sergey Prokhorov&lt;/a&gt;,
and 
&lt;a href=&quot;https://www.linkedin.com/in/jeff-zhu-36ab702/&quot;&gt;Jeff Zhu&lt;/a&gt;—they helped a lot!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dates&lt;/strong&gt;&lt;br /&gt;
We picked a date for the event about eight months ahead of us
and very soon realized that it was a mistake: too close.
It should have been &lt;em&gt;at least&lt;/em&gt; one year ahead of us. We had to re-schedule.
We also set three important dates: 
1) “submission deadline”—four months before the event, 
2) “author notification”—two months after the submission,
3) “camera-ready copies”—one month after author notification.
This timeline seems doable, but pretty tight. Next year we’ll give
our PC more time for reviewing: two months is definitely not enough
for a large event.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;br /&gt;
We made it on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;:
the source for our website is &lt;a href=&quot;https://github.com/yegor256/iccq.github.io&quot;&gt;here&lt;/a&gt;.
We knew that most conferences use some hosted site builders, like
&lt;a href=&quot;https://conf.researchr.org/&quot;&gt;conf.researchr.org&lt;/a&gt;, but we decided to swim against the
current and build the site the way we believed was right. No surprise,
we’ve got many complaints about that from people who we were trying to 
invite into our team, as partners or co-organizers. They were all starting
the discussion with “You need to do your website right if you want
your conference to be a success.” Nevertheless,
the original design of the website survived. By the way, some of the content
we copied with some modifications from the 
&lt;a href=&quot;https://conf.researchr.org/series/splash&quot;&gt;SPLASH&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;br /&gt;
We were lucky to have a very famous Russian University on our side
right from the start: &lt;a href=&quot;https://www.hse.ru/&quot;&gt;HSE&lt;/a&gt;. We knew people from there
and they were not against hosting the event and putting their name on our website.
My biggest thanks go to 
&lt;a href=&quot;https://scholar.google.com/citations?user=68uxw-AAAAAJ&amp;amp;hl=en&quot;&gt;Sergey Zykov&lt;/a&gt;, 
&lt;a href=&quot;https://www.hse.ru/en/staff/avdoshin&quot;&gt;Sergey Avdoshin&lt;/a&gt;, 
and 
&lt;a href=&quot;https://www.hse.ru/en/staff/arjantsev&quot;&gt;Ivan Arzhantsev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Venue&lt;/strong&gt;&lt;br /&gt;
HSE was also not against hosting the event physically, on their premises.
The event was not going to be big (up to 100 people attending).
We agreed with HSE that they would give us a big classroom on Saturday. 
They didn’t mind.
However, later, due to the COVID-19 epidemic situation, we decided to make
the event fully online. Moving to online didn’t cause any problems for 
us, it seems. Moreover, we &lt;a href=&quot;https://twitter.com/iccq_ru/status/1381107697693696000&quot;&gt;decided&lt;/a&gt;
that the next event, ICCQ 2022, will also be online, no matter what
the situation will be with the virus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Partners&lt;/strong&gt;&lt;br /&gt;
We figured that in addition to HSE it would be good to have a few other sponsors,
mostly to make us look more serious and reputable (as much as it’s possible
for a young conference). We had good contacts with a few Russian
education organizations and they all agreed to join: 
&lt;a href=&quot;https://mipt.ru/english/&quot;&gt;MIPT&lt;/a&gt;, 
&lt;a href=&quot;https://www.msu.ru/&quot;&gt;MSU&lt;/a&gt;, and 
&lt;a href=&quot;https://www.ispras.ru/en/&quot;&gt;ISP RAS&lt;/a&gt;. 
We contacted industry companies, and they also agreed:
&lt;a href=&quot;https://sbercloud.ru/&quot;&gt;SberCloud&lt;/a&gt;,
&lt;a href=&quot;https://yandex.com/company/&quot;&gt;Yandex&lt;/a&gt;,
and
&lt;a href=&quot;https://www.kaspersky.com/&quot;&gt;Kaspersky&lt;/a&gt;.
And we also contacted two of the biggest not-for-profit Russian media organizations:
&lt;a href=&quot;https://russoft.org/en/&quot;&gt;RUSSOFT&lt;/a&gt;
and
&lt;a href=&quot;https://2021.secrus.org/?lang=en&quot;&gt;SECR&lt;/a&gt;.
They also agreed.
Of course, it was much harder than it sounds. Some organizations didn’t even reply
to us, some of them rejected our invitations. It was a long process that took about two months
of negotiations. We even created &lt;a href=&quot;https://www.iccq.ru/partnership.html&quot;&gt;this web page&lt;/a&gt; 
to explain to them why we wanted them to join us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PC&lt;/strong&gt;&lt;br /&gt;
This was one of the most challenging parts: how to get together a Program Committee
of people who would review the papers and decide which of them deserve to be
published. First, we invited a few people who we knew personally. Then we decided to try and keep
the PC as diverse as possible in terms of country of origin. We didn’t want to 
have only people who were living in Russia. We wanted to build a truly international
PC and also a truly professional one, whatever that means. 
Because of this plan, the only option for us was cold calling—we didn’t
know so many people from different places. 
We sent about 400 invitation emails to people who had participated in similar conferences worldwide.
As you can see on the website: &lt;a href=&quot;https://www.iccq.ru/2021.html#pc&quot;&gt;30 of them&lt;/a&gt; 
agreed to join us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IEEE&lt;/strong&gt;&lt;br /&gt;
This was the biggest challenge: to get a 
&lt;a href=&quot;https://www.computer.org/conferences/organize-a-conference/sponsorship-options&quot;&gt;technical sponsorship&lt;/a&gt; 
from IEEE.
Our friends from IEEE Russia Section C Chapter helped us
(using &lt;a href=&quot;https://www.ieee.org/conferences/organizers/conf-app.html&quot;&gt;this form&lt;/a&gt;), and
&lt;a href=&quot;https://conferences.ieee.org/conferences_events/conferences/conferencedetails/51190&quot;&gt;we got it&lt;/a&gt;.
If you want to know more details about this step, &lt;a href=&quot;https://t.me/yegor256&quot;&gt;tg me&lt;/a&gt;, 
I will try to explain.
It took about three weeks, and they accepted our request.
They gave us their own “Record Number” and ISBN for the Proceedings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keynote&lt;/strong&gt;&lt;br /&gt;
We decided that a good conference must have a good keynote speaker—it is someone
who doesn’t write a paper and doesn’t go through a normal review process.
It must be someone known by the community, in order to make the conference
even more interesting for attendees. We decided to invite 
&lt;a href=&quot;https://cs.au.dk/~amoeller/&quot;&gt;Anders Møller&lt;/a&gt;. We personally
knew him from &lt;a href=&quot;https://cs.au.dk/~amoeller/spa/spa.pdf&quot;&gt;his book&lt;/a&gt; recently published online.
We invited him and he agreed! &lt;a href=&quot;https://www.youtube.com/watch?v=oDdrzXkInnA&quot;&gt;His speech&lt;/a&gt; 
was definitely &lt;del&gt;one of&lt;/del&gt; the best at the conference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;br /&gt;
We decided to be present on just one social network, since it is the most 
popular among tech people and the easiest to maintain:
&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=iccq_ru&quot;&gt;@iccq_ru&lt;/a&gt;. We
tried to post what was going on with the preparation of the event, almost
every week. Some of our authors and PC members followed us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registration&lt;/strong&gt;&lt;br /&gt;
We initially thought that the event would be on-site, in the classroom at HSE. That’s why
we created a &lt;a href=&quot;https://www.meetup.com/iccq-ru/events/273816665/&quot;&gt;Meetup&lt;/a&gt; page and
collected over 170 registrations. Unfortunately, due to COVID-19, we 
&lt;a href=&quot;https://twitter.com/iccq_ru/status/1358281073625563145&quot;&gt;had to make&lt;/a&gt;
the conference fully online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steering&lt;/strong&gt;&lt;br /&gt;
We didn’t know what exactly this was for, but we saw other events doing this.
we formed a Steering Committee of two people from our two most important partners:
&lt;a href=&quot;https://www.huaweicloud.com/intl/en-us/news/building-a-smart-future-with-full-stack-innovation-for-the-cloud.html&quot;&gt;Zhang Yuxin&lt;/a&gt;, 
the CTO of Huawei Cloud and 
&lt;a href=&quot;https://www.sberbank.ru/en/press_center/all/article?newsID=ef3e1c1b-fc7f-4eb5-9d36-db23e2ed42fc&amp;amp;blockID=1539&amp;amp;regionID=77&amp;amp;lang=en&amp;amp;type=NEWS&quot;&gt;Yevgeny Kolbin&lt;/a&gt;, 
the CEO of SberCloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EasyChair&lt;/strong&gt;&lt;br /&gt;
There has to be some website to collect papers from authors. We decided to use
&lt;a href=&quot;https://www.easychair.org&quot;&gt;EasyChair&lt;/a&gt;,
since it’s pretty popular and not as expensive as 
&lt;a href=&quot;https://academia.stackexchange.com/questions/2557/conference-management-software-preferably-open-source-with-custom-fields&quot;&gt;some others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CFP&lt;/strong&gt;&lt;br /&gt;
When everything was ready, there was one remaining question (the biggest one!): how to 
collect the papers from authors. We had to find a way to promote the conference so that
researchers decided to submit their work results to us. Aside from using our 
own existing Twitter/Facebook/Telegram channels, there were two options: 
call-for-papers (CFP) distribution, and paid ads. 
We made &lt;a href=&quot;https://latexonline.cc/compile?git=https%3A%2F%2Fgithub.com%2Fyegor256%2Ficcq.github.io&amp;amp;target=cfp%2F2021%2Fcfp.tex&amp;amp;command=pdflatex&amp;amp;trackId=1617526368363&quot;&gt;PDF&lt;/a&gt; and 
&lt;a href=&quot;https://raw.githubusercontent.com/yegor256/iccq.github.io/master/cfp/2021/cfp.txt&quot;&gt;TXT&lt;/a&gt; versions 
of it and then posted to a few places: 
&lt;a href=&quot;http://www.wikicfp.com/cfp/servlet/event.showcfp?eventid=112792&quot;&gt;WikiCFP&lt;/a&gt;,
&lt;a href=&quot;https://www.call4paper.com/detail/event/PGNZHDXH27553174&quot;&gt;call4paper&lt;/a&gt;,
&lt;a href=&quot;https://allconferencecfpalerts.com/cfp/view.php?eno=22113&quot;&gt;AllConferenceCfpAlerts&lt;/a&gt;,
&lt;a href=&quot;https://listserv.acm.org/scripts/wa-acmlpx.exe?A2=ind2009&amp;amp;L=SEWORLD&amp;amp;P=R5608&quot;&gt;SEWORLD&lt;/a&gt;,
&lt;a href=&quot;http://lists.seas.upenn.edu/pipermail/types-announce/2020/009182.html&quot;&gt;types-announce&lt;/a&gt;,
and
&lt;a href=&quot;https://research.cs.wisc.edu/dbworld/messages/2020-09/1600852058.html&quot;&gt;DBWORLD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ads&lt;/strong&gt;&lt;br /&gt;
We were lucky enough to have a decent budget for paid ads. We placed
our banners into 
&lt;a href=&quot;https://cacm.acm.org/&quot;&gt;Communications of the ACM&lt;/a&gt;
and 
&lt;a href=&quot;https://ieeexplore.ieee.org/document/9187479&quot;&gt;IEEE Computer&lt;/a&gt;.
We also ran some paid ads on Twitter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Waiting&lt;/strong&gt;&lt;br /&gt;
We were waiting for a few months with almost no result. Some papers
were coming but their quality was obviously pretty low. We were
very nervous, to say the least. We didn’t have any backup plan.
If there were no good papers, I was prepared to call it all off
and admit failure (and accept the monetary losses).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extension&lt;/strong&gt;&lt;br /&gt;
When the deadline arrived, it was obvious that we hadn’t managed to
collect enough papers. We 
&lt;a href=&quot;https://twitter.com/iccq_ru/status/1335476843491766272&quot;&gt;decided&lt;/a&gt; 
to give our authors another two weeks:
the deadline was extended to December 18th.
It was worth it! A few very good papers arrived last and we 
&lt;a href=&quot;https://twitter.com/iccq_ru/status/1340562074884333569&quot;&gt;phew-ed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invited Talk&lt;/strong&gt;&lt;br /&gt;
To make the conference even stronger, we decided to invite someone
who we knew and respected. Just like we did with the Keynote talk, 
but this time with a full paper to publish too.
We invited &lt;a href=&quot;https://www.sri.inf.ethz.ch/people/veselin&quot;&gt;Veselin Raychev&lt;/a&gt;, 
CTO of &lt;a href=&quot;https://snyk.io/&quot;&gt;Snyk&lt;/a&gt;. He wrote 
a &lt;a href=&quot;https://ieeexplore.ieee.org/document/9392977&quot;&gt;survey paper&lt;/a&gt; 
for us and we promised him that it would be fast-track reviewed.
Without such a promise he would probably not have submitted it to us, since
we are too young and small. But since we sort of guaranteed the publication, he agreed.
This is how, I believe, invited talks work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desk Reject&lt;/strong&gt;&lt;br /&gt;
We &lt;a href=&quot;https://twitter.com/iccq_ru/status/1343967427105841152&quot;&gt;decided&lt;/a&gt; 
to reject six papers before even sending them to the PC
for review. The most popular reason was: out of scope. Some papers
were about something completely irrelevant. One paper was even auto-generated,
along with some very funny typos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bidding&lt;/strong&gt;&lt;br /&gt;
We missed this step, because I didn’t know about it. I would actually
skip it again, in the next conference, but most events do a bidding process,
as I’ve been told. They ask all PC members to go through the list of
all submissions and pick those they want to review. Mostly they will
probably pay attention to the subject, maybe to the quality of paper. In the end,
the distribution of papers among PC members is not randomized.
I don’t like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reviews&lt;/strong&gt;&lt;br /&gt;
I went to EasyChair dashboard and clicked “assign papers to reviewers
automatically” and the system did it for me. We’ve had 17 papers and
30 reviewers. I configured EasyChair to assign at least three reviewers
for each paper. Do the math: most reviewers got two papers, while some of them
just one. However, only about ten reviewers provided their reviews more or
less instantly. Others were not giving us anything and about ten of them
were not even answering my email reminders. We had just seven weeks between
the submission deadline (remember, we extended it by two weeks) and the
day of the final decision. We were not sure that we would be able 
to collect all necessary reviews and that’s why we 
&lt;a href=&quot;https://twitter.com/iccq_ru/status/1355741062430654466&quot;&gt;asked&lt;/a&gt; most active reviewers
to review more than just two papers. Surprisingly, most of them agreed to help
us. The bottom line: we managed to collect at least three reviews per
paper, while some papers got five reviews. Because most reviewers performed
their duties on time. Only three reviewers never provided us anything,
without any explanation. 10%. Is this how it should be?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acceptance&lt;/strong&gt;&lt;br /&gt;
This was a very tough moment: all papers were ranked and we had to pick some number
of them for the final publication (and reject all the others). 
The question was: how many out of a total of 17?
We were thinking: Having a conference with a small number of published articles is probably not a good
indicator of success. On the other hand, publishing something that
was explicitly rejected by reviewers would be at least unfair to other
authors, and to the reviewers. We had a very intense discussion and decided
to accept just six papers. Why six? Because the average rank of each of them
was positive. All papers with negative ranks were rejected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copyright Transfer&lt;/strong&gt;&lt;br /&gt;
In order to publish our papers in IEEE Xplore, which is very important for
all authors, we had to transfer the ownership of all texts to IEEE: this is 
the requirement of IEEE. We built a small &lt;a href=&quot;https://www.iccq.ru/ecf.html?id=1&quot;&gt;online form&lt;/a&gt; 
for that and asked all accepted authors to fill it in
(the source for the HTML form is 
&lt;a href=&quot;https://raw.githubusercontent.com/yegor256/iccq.github.io/master/pages/ecf.md&quot;&gt;here&lt;/a&gt;). They did.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;br /&gt;
I created a new &lt;a href=&quot;https://www.youtube.com/channel/UC_W-pjp6HWJGjK2sayFrnag&quot;&gt;YouTube channel&lt;/a&gt;, 
&lt;a href=&quot;https://support.google.com/youtube/answer/171664?hl=en&quot;&gt;verified&lt;/a&gt; it,
and &lt;a href=&quot;https://www.youtube.com/watch?v=Qf6InatV2h4&quot;&gt;scheduled&lt;/a&gt; a new live stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agenda&lt;/strong&gt;&lt;br /&gt;
We put all talks on the timeline and published the conference agenda.
Then I created Google Calendar events for all sessions and invited
all speakers to their events. I also scheduled a Zoom meeting
for the day of the event and shared the link via the Google Calendar
events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Welcome Notes&lt;/strong&gt;&lt;br /&gt;
We asked our Steering Committee Chair and Program Committee Chair 
to write short one-page welcome notes. They did
(&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=9392940&quot;&gt;here&lt;/a&gt; 
and 
&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=9392979&quot;&gt;here&lt;/a&gt;). 
I also wrote mine, on behalf of the Organizers: 
&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=9392943&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final PDFs&lt;/strong&gt;&lt;br /&gt;
We asked all accepted authors to send us so-called “camera-ready copies,”
which were basically their original papers, but formatted exactly 
according to our requirements. Lucky for us, all authors were using
LaTeX, so we just gave them a few configuration lines for the source
and all the papers look very similar, formatting-wise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proceedings&lt;/strong&gt;&lt;br /&gt;
Then, we had to design the book, binding together all welcome notes
and papers. I did it myself this time and you can see the sources 
&lt;a href=&quot;https://github.com/yegor256/iccq.github.io/tree/master/proceedings/2021&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Xplore&lt;/strong&gt;&lt;br /&gt;
Next we packaged the entire ZIP archive and 
&lt;a href=&quot;https://mft.ieee.org/conferences_events/ConfPubFileUploadUI/&quot;&gt;uploaded&lt;/a&gt;
it to IEEE. We didn’t get any response back. We just crossed our fingers
and started waiting. You can see how the package was rendered in 
LaTeX, &lt;a href=&quot;https://github.com/yegor256/iccq.github.io/tree/master/proceedings/2021&quot;&gt;here&lt;/a&gt;. I designed
a collection of scripts (bash + Ruby), which generate all PDFs and
the required 
&lt;a href=&quot;https://ieeemce.org/planning-basics/ieee-conference-publications/submitting-proceedings-ieee-xplore/&quot;&gt;package-list&lt;/a&gt; 
file for IEEE.&lt;/p&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;https://www.iccq.ru/images/2021/proceedings.png&quot; style=&quot;width:200px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Prints&lt;/strong&gt;&lt;br /&gt;
We found a printing company here in Moscow and ordered them to print
us 100 copies of the proceedings, 
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Paper_size&quot;&gt;B5 format&lt;/a&gt; 
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Grammage&quot;&gt;100g/m&lt;sup&gt;2&lt;/sup&gt; paper&lt;/a&gt;, 
matte cover). We paid around $10 per copy
and it took about a week to print them all. By the way, we were explicitly told by
IEEE that we are not allowed to sell our Proceedings at all or even 
give them away for free, unless it’s only for PC members, authors,
and people closely related to the organization of the event. That’s
why we printed such a limited number of copies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zoom&lt;/strong&gt;&lt;br /&gt;
On the day of the event, we started our planned Zoom meeting and
connected it to the YouTube live stream, 
&lt;a href=&quot;https://support.zoom.us/hc/en-us/articles/360028478292-Live-streaming-meetings-or-webinars-on-YouTube&quot;&gt;here is how&lt;/a&gt;. 
I clicked “Record” and in six hours there was a 2Gb video file with all presentations.
I also asked all speakers to click “Record” on their side too
and then send me the files Zoom created, in order to have the highest
quality of the video/audio possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Publishing&lt;/strong&gt;&lt;br /&gt;
I asked a friend of mine to edit the large video file, cutting it into 11
pieces: three short welcome speeches, one 45-minute keynote, one invited talk,
and six half-hour sessions. Then I published 
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLsFvzjUuF8yr-2nCkuw_4lRrBv9mReznb&quot;&gt;all 11 files&lt;/a&gt; 
to YouTube. 
I also had to create their front images and some text descriptions.&lt;/p&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/04/iccq-box.png&quot; style=&quot;width:250px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Gifts&lt;/strong&gt;&lt;br /&gt;
We packaged our Proceedings in custom-made boxes together with
small chocolate bars, stickers, and a tourist guide book about Moscow.
We sent them to each author, each PC member, and each partner (about 60 boxes). 
What’s left will be used during the year as promotional materials
to advertise our future events and invite new PC members and authors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Published&lt;/strong&gt;&lt;br /&gt;
We got an email from IEEE notifying us that all papers were
published in IEEE Xplore, &lt;a href=&quot;https://ieeexplore.ieee.org/xpl/conhome/9392909/proceeding&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mission complete!&lt;/p&gt;

&lt;p&gt;P.S. If you decide to organize your own event, don’t hesitate
to let me know, maybe I will be able to help you somehow.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html">First, let me clarify what kind of conference we are talking about. There are two types: professional and academic. The difference is huge. My understanding is that professional conferences are for practitioners, while academic ones are for researchers. ICCQ, which we organized this year, was an academic conference. I haven’t had any expertise in organizing such things, and had to go through it all for the first time. Here is a more or less detailed description of the journey. Feel free to learn from it and make a better conference yourself. We will try to make a better one next year, ICCQ 2022.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/04/glow.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/04/glow.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Imposters to Win!</title><link href="https://www.yegor256.com/2021/03/03/imposters-to-win.html" rel="alternate" type="text/html" title="Imposters to Win!" /><published>2021-03-03T00:00:00+00:00</published><updated>2021-03-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/03/03/imposters-to-win</id><content type="html" xml:base="https://www.yegor256.com/2021/03/03/imposters-to-win.html">&lt;p&gt;The time of objectivity is fading out. 
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;Meritocracy&lt;/a&gt; is now a rude word.
&lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;Metrics&lt;/a&gt; 
in management will soon be considered as harassment.
Productivity is &lt;a href=&quot;/shift-m/2020/44.html&quot;&gt;already&lt;/a&gt; a false objective.
It’s time to start taking advantage of this era of nonsense.
The era of imposters is coming!
Don’t miss the opportunity to become a great one.
Here is a quick summary of key techniques to make you highly successful in any argument
you may have in your 
&lt;a href=&quot;/2020/12/22/self-managing-orgs.html&quot;&gt;flat democratic organizations of the future&lt;/a&gt;
without any skills, knowledge, education, or real achievements.
Just pure love and emotions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Kominsky Method (2018-) by Chuck Lorre&quot; src=&quot;/images/2021/03/the-kominsky-method.jpg&quot; longdesc=&quot;#89fd0ee4&quot; /&gt;&lt;figcaption id=&quot;89fd0ee4&quot;&gt;The Kominsky Method (2018-) by Chuck Lorre&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;“Trust Me!”&lt;/strong&gt;
Don’t even try to prove anything by numbers.
This is an outdated technique.
They will only treat you like a weird person, at best.
Rationality is not a sign of professionalism nowadays.
Instead, you should hit them with a straight “trust me” and expect no answer back.
How can they reply to that anyway?
Can they really say that they don’t trust you?
Such toxic behavior no serious organization would tolerate!
We are supposed to trust each other since we are in the same team.
And not just in the same team!
We have to trust everybody in the world—this is what good human beings do!
Thus, no numbers, no facts, no proofs—just a pure and simple “trust me” and you will be the king of any argument.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=ulrMXmIcC4w&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/ulrMXmIcC4w/mqdefault.jpg&quot; alt=&quot;YouTube video #ulrMXmIcC4w&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M167: Sometimes you have to be an imposter, either you like it or not;
        20 April 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;“I Know What I’m Doing!”&lt;/strong&gt;
Do they still think that you are not convincing enough with your “Trust Me”?
That won’t help them.
Tell them that you worked five years in Oracle and also four years in Intel.
This automatically means that you are right.
Can they argue back with “We don’t care where you worked before”?
That’s too harsh, they won’t do it.
They must respect their colleagues!
Especially those who worked in Oracle and Intel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Do You Think I’m Stupid?!”&lt;/strong&gt;
If they continue arguing, ask this question, looking them right in the eye.
What do they answer?
They will apologize.
The smartest of them will beg for forgiveness and then run away from the meeting room.
This question doesn’t have a right answer.
No matter what they say, you win.
If they start with “No”, your point is proven.
If they start with “Yes”… well they won’t start with “Yes”.
They are good and kind people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“I Will Quit If You Keep Talking Like This!”&lt;/strong&gt;
This is your last line.
After it they won’t have anything in their hands.
They will have to stop right there.
And they will be afraid to get into a fight with you ever again.
Your position will be solid for many months ahead
Especially in a big company, where retention rate is the most important indicator of success.
If you quit because of an argument—your opponent will lose a lot of karma points.
“I will quit” is the most powerful weapon in your arsenal.
However, use it carefully, only after you massage them with the other three tactics.&lt;/p&gt;

&lt;p&gt;Your ultimate goal in your career as a great imposter should be
the situation where nobody argues with you. They must be
scared of verifying your results, questioning your conclusions,
validating your points, and even asking you difficult questions.
They must know that by doing so they will immediately become
“toxic and negative people”—your team doesn’t appreciate such
behavior.&lt;/p&gt;

&lt;p&gt;They must understand that real experts are very fragile and can easily
be offended. They must learn the lesson: 
doubting the opinion of an expert is simply rude.
The best they can do with you, an expert, is to tell you how
great you are and how much they respect your contribution. Anything
aside from that you must treat as an offense and react immediately.&lt;/p&gt;

&lt;p&gt;This is how you tame them.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="sarcasm" /><summary type="html">The time of objectivity is fading out. Meritocracy is now a rude word. Metrics in management will soon be considered as harassment. Productivity is already a false objective. It’s time to start taking advantage of this era of nonsense. The era of imposters is coming! Don’t miss the opportunity to become a great one. Here is a quick summary of key techniques to make you highly successful in any argument you may have in your flat democratic organizations of the future without any skills, knowledge, education, or real achievements. Just pure love and emotions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/03/the-kominsky-method.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/03/the-kominsky-method.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dataization</title><link href="https://www.yegor256.com/2021/02/10/dataization.html" rel="alternate" type="text/html" title="Dataization" /><published>2021-02-10T00:00:00+00:00</published><updated>2021-02-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/02/10/dataization</id><content type="html" xml:base="https://www.yegor256.com/2021/02/10/dataization.html">&lt;p&gt;There are three things in EOLANG (and the 𝜑-calculus which we
based it on): data, atoms, and objects. There is a dataization
function, which puts all three together in order to make an EO
program alive. Here is how it works together with Java,
for example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Space Force (2020) by Steve Carell and Greg Daniels&quot; src=&quot;/images/2021/02/space-force.jpg&quot; longdesc=&quot;#6c25ba32&quot; /&gt;&lt;figcaption id=&quot;6c25ba32&quot;&gt;Space Force (2020) by Steve Carell and Greg Daniels&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say we are making an online shop where items are
being shipped to different countries and we must calculate
shipment costs based on the customer’s location. We create
an &lt;a href=&quot;/2020/12/01/abstract-objects.html&quot;&gt;abstract object&lt;/a&gt;
that represents shipment costs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[customer] &amp;gt; cost-of-shipment
  if. &amp;gt; @
    customer.country.eq &quot;US&quot;
    9.99
    24.99&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, let’s say we have an abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;customer-in-mysql&lt;/code&gt;,
which represents the customer’s information in the MySQL database. To
make a specific customer &lt;code class=&quot;highlighter-rouge&quot;&gt;jeff&lt;/code&gt; we make a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;customer-in-mysql&lt;/code&gt;,
specifying the ID of the customer as &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;customer-in-mysql 42 &amp;gt; jeff&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The closed object &lt;code class=&quot;highlighter-rouge&quot;&gt;jeff&lt;/code&gt; is the customer we are looking for.
We assume that it has the &lt;code class=&quot;highlighter-rouge&quot;&gt;country&lt;/code&gt; child object, which is needed by
the &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we make a copy of the &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt; and then
add it to the product price in order to calculate how
much a customer has to pay:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cost-of-shipment jeff &amp;gt; x

x.add product.price &amp;gt; total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is a new object, a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt;. Then,
we take the child abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; from it and make a copy,
giving &lt;code class=&quot;highlighter-rouge&quot;&gt;product.price&lt;/code&gt; object to it as an attribute. We name the created copy
as &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt;. Then, we print the total price:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;stdout &amp;gt; app
  sprintf
    &quot;Your total is %f&quot; total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All these manipulations don’t make the number print yet. They
are all object declarations. We’ve declared one abstract object
&lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt; and a few closed objects: &lt;code class=&quot;highlighter-rouge&quot;&gt;jeff&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the most interesting part, which we call &lt;em&gt;dataization&lt;/em&gt;. It’s a process
of turning an object into data. The data is something that doesn’t have
any child objects and is the simplest element of the computing platform,
where EOLANG software is being compiled. You may think that in the example
above &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;US&quot;&lt;/code&gt; are data. They are not. They are also objects
and we can write this, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;42.add 5 &amp;gt; z

&quot;US&quot;.length &amp;gt; len&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The data behind these objects is not visible for us at the level of
EOLANG program. The data is inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; object. Only the runtime
of the specific platform can dig it out through the dataization
mechanism. If you compile the EOLANG code to Java, you will get
a class &lt;code class=&quot;highlighter-rouge&quot;&gt;EOapp&lt;/code&gt; (derived from the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; object), which can be dataized
like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import org.eolang.phi.Data;
EOapp app = new EOapp();
Boolean data = new Dataized(app).take(Boolean.class);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code class=&quot;highlighter-rouge&quot;&gt;take()&lt;/code&gt; will take the object &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; and will try to ask it
to turn itself as data. The object &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; will redirect this request
to the object &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;, which will ask the object &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt; the same thing:
what data do you have? The object &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt; is the object &lt;code class=&quot;highlighter-rouge&quot;&gt;x.add&lt;/code&gt;.
If we look at what &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is, we’ll see that it’s a copy of our own
abstract object &lt;code class=&quot;highlighter-rouge&quot;&gt;cost-of-shipment&lt;/code&gt;, which doesn’t have the child object &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;!
However, it does have a child object &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;, which is a “catch-all” object:
the request to get &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; will land there.&lt;/p&gt;

&lt;p&gt;The object bound to the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; is the copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if. &amp;gt; @
  customer.country.eq &quot;US&quot;
  9.99
  24.99&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will take the &lt;code class=&quot;highlighter-rouge&quot;&gt;customer.country.eq&lt;/code&gt;, dataize it in order to get
boolean data, and then, depending on this data, return either &lt;code class=&quot;highlighter-rouge&quot;&gt;9.99&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;24.99&lt;/code&gt;.
Either one of them has the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, which will be used to
construct a new object, with an argument &lt;code class=&quot;highlighter-rouge&quot;&gt;product.price&lt;/code&gt;. The result
will be used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dataized&lt;/code&gt; Java class in order to continue the process
of dataization. Finally, the sum of two numbers will be dataized to a
Java floating-point number.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=QaKIw1Bh3Oc&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/QaKIw1Bh3Oc/mqdefault.jpg&quot; alt=&quot;YouTube video #QaKIw1Bh3Oc&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;EOLANG: Basics;
        28 January 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;The dataization of &lt;code class=&quot;highlighter-rouge&quot;&gt;customer.country.eq&lt;/code&gt; is happening inside
the runtime and is not visible at the level of EOLANG. The object
&lt;code class=&quot;highlighter-rouge&quot;&gt;eq&lt;/code&gt; is called an &lt;em&gt;atom&lt;/em&gt;, since it’s an atomic element of the language—it
has to be implemented in Java, not in EOLANG. There are other atoms
in the example above: &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;.
They all are implemented in Java.&lt;/p&gt;

&lt;p&gt;Thus, we construct objects first, either through &lt;em&gt;abstraction&lt;/em&gt; (declaring new
abstract objects) or through &lt;em&gt;application&lt;/em&gt; (making copies of abstract
objects). Next, we dataize one of the objects and the entire composition
of objects starts to “live,” trying to turn itself into data.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="eolang" /><summary type="html">There are three things in EOLANG (and the 𝜑-calculus which we based it on): data, atoms, and objects. There is a dataization function, which puts all three together in order to make an EO program alive. Here is how it works together with Java, for example.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/02/space-force.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/02/space-force.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>