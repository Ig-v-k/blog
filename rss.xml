<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2022-07-05T06:34:36+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Automated Tests Are the Safety Net that Saves You</title><link href="https://www.yegor256.com/2022/07/05/safety-net.html" rel="alternate" type="text/html" title="Automated Tests Are the Safety Net that Saves You" /><published>2022-07-05T00:00:00+00:00</published><updated>2022-07-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/07/05/safety-net</id><content type="html" xml:base="https://www.yegor256.com/2022/07/05/safety-net.html">&lt;p&gt;Automated tests are the ones that are usually called unit tests or integration tests,
or just any tests that are being executed &lt;em&gt;automatically&lt;/em&gt;. That’s the difference
between them and manual tests. What is the purpose of automated tests?
First and foremost, they reduce the amount of routine work: we don’t
need to remember how to test a module, the tests remember. We just click
a button and a suite of tests, which may consist of hundreds or thousands,
runs and reports errors, if any are found. Saving time is important,
but it’s not the only and, if you ask me, not the most important purpose
of automated tests. A more important one is their role as a safety net.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Main picture&quot; src=&quot;/images/2022/06/safety-net.jpg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Do you know what a safety net is? Wikipedia
&lt;a href=&quot;https://en.wikipedia.org/wiki/Safety_net&quot;&gt;says&lt;/a&gt; that
it is “a net to protect people from injury after falling from heights.”
You most probably have seen it on buildings which are being
constructed or reconstructed.
The red one in the picture is the safety net.&lt;/p&gt;

&lt;p&gt;If construction workers accidentally fall down
or drop their tools, they won’t die and won’t kill anyone on the ground.
Does this knowledge help them work more effectively? I believe it does. I didn’t
find any research on this subject, comparing the productivity
of workers who know that there is a safety net beneath them with the productivity
of workers who know that a mistake would most probably cost them their lives or
the life of child playing on the ground. The results of such research are obvious though,
I believe.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Y0Zx_sdVG48&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Y0Zx_sdVG48/mqdefault.jpg&quot; alt=&quot;YouTube video #Y0Zx_sdVG48&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M199: Unit tests are the Safety Net that you can&amp;#39;t afford to not use;
        24 June 2022.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;The same is true for us programmers. Modifying the source code and knowing that
there are no automated tests in place is similar to working at height
without a safety net: one mistake could cost you server downtime, a frustrated
customer, lost money, and maybe a lost job. How high would the productivity
of a programmer be while working like this? Do we need to do research to find out?
Or is the answer as obvious as for construction workers?&lt;/p&gt;

&lt;p&gt;In order to give you enough confidence, automated tests must not only be
written and committed to a repository, but they must be automatically executed
before every change you try to make to the trunk. You must be able
to run them after every change you make locally, while incrementally developing the code.
Then, you must know that even if you accidentally forget to run them locally
and send your branch to the trunk for merging, the automated merge pipeline
will catch you.&lt;/p&gt;

&lt;p&gt;The more time and effort you invest into making your safety net strong,
that is, the better your tests cover your code, then the more &lt;em&gt;productive&lt;/em&gt; your
work will be, the safer you will feel in introducing new features or fixing bugs.
Simply put, you will code &lt;em&gt;faster&lt;/em&gt; and &lt;em&gt;better&lt;/em&gt;. Just because you know that
you can’t break what you did yesterday.&lt;/p&gt;

&lt;p&gt;The first thing you do when you start a new software project is
implement a safety net: you automate the build pipeline and you create
a few simple automated tests. You make sure they protect you. Only then do you
start writing code. Ask construction workers: are they allowed to start a workday
without a safety net? Obviously not. I’m sure it’s even illegal. The same
must be true for us programmers: coding without the safety net of automated tests
must be illegal.&lt;/p&gt;

&lt;p&gt;When a bug is reported to you by your customers, this should mean
that the safety net has a &lt;em&gt;hole&lt;/em&gt;. It is not tight enough, that’s why the bug
fell down on the head of your customer. What do you do before you fix the bug?
You fix the safety net. You add more automated tests, which will catch this
bug in the future. Only then do you fix the bug.&lt;/p&gt;

&lt;p&gt;I believe that the safety net of a software project is its most valuable asset.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">Automated tests are the ones that are usually called unit tests or integration tests, or just any tests that are being executed automatically. That’s the difference between them and manual tests. What is the purpose of automated tests? First and foremost, they reduce the amount of routine work: we don’t need to remember how to test a module, the tests remember. We just click a button and a suite of tests, which may consist of hundreds or thousands, runs and reports errors, if any are found. Saving time is important, but it’s not the only and, if you ask me, not the most important purpose of automated tests. A more important one is their role as a safety net.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/safety-net.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/safety-net.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Principle of One</title><link href="https://www.yegor256.com/2022/06/14/principle-of-one.html" rel="alternate" type="text/html" title="The Principle of One" /><published>2022-06-14T00:00:00+00:00</published><updated>2022-06-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/06/14/principle-of-one</id><content type="html" xml:base="https://www.yegor256.com/2022/06/14/principle-of-one.html">&lt;p&gt;When I make a slide deck for a new presentation, invent a new domain name, think about
a name for a new Java class, itemize bullet points in an academic paper, even
write an email—I try to follow a simple principle which helps me make
my content more solid. Well, at least I believe it does. Maybe it will help you as well.
The principle is simple: at all costs, try to squeeze the content into
&lt;em&gt;one&lt;/em&gt; word, &lt;em&gt;one&lt;/em&gt; sentence, &lt;em&gt;one&lt;/em&gt; paragraph, or &lt;em&gt;one&lt;/em&gt; page.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;True Story (2021) by Eric Newman&quot; src=&quot;/images/2022/06/true-story.jpg&quot; longdesc=&quot;#f816eca5&quot; /&gt;&lt;figcaption id=&quot;f816eca5&quot;&gt;True Story (2021) by Eric Newman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;A more formal definition of the principle would be this:
it’s either one word/sentence/paragraph/page &lt;em&gt;or&lt;/em&gt; way more.
Let’s see an example. Say I need to list my plans for tomorrow:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- write a new article
- send an email to my boss
- cook a dinner
- take a nap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Do any of them need to be longer than one word? Not really. “Take a nap”
is just three words, as is “cook a dinner”. On the one hand, three might not be considered
“way more” than one. On the other, they could be shortened without
any loss of meaning. Thus, I have to decide whether to make them all &lt;em&gt;much&lt;/em&gt;
longer than one word or shorten them all to a single one.
The second choice is always preferable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- article
- email
- dinner
- nap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I wrote about &lt;a href=&quot;/2015/01/12/compound-name-is-code-smell.html&quot;&gt;compound variable names&lt;/a&gt;
in an earlier post: the same principle is applicable
to them. Variables must either be nouns without any other words around them,
or use many more words, which is an exceptional situation.&lt;/p&gt;

&lt;p&gt;In another &lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;blog post about resumes&lt;/a&gt;
I mentioned that a good CV must take exactly one page.
If it’s more, it should be many more. But definitely not two
or three pages.&lt;/p&gt;

&lt;p&gt;I suggest applying this principle to every piece of content
you write: try to squeeze it into &lt;em&gt;one&lt;/em&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">When I make a slide deck for a new presentation, invent a new domain name, think about a name for a new Java class, itemize bullet points in an academic paper, even write an email—I try to follow a simple principle which helps me make my content more solid. Well, at least I believe it does. Maybe it will help you as well. The principle is simple: at all costs, try to squeeze the content into one word, one sentence, one paragraph, or one page.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/06/true-story.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/06/true-story.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reflection Means Hidden Coupling</title><link href="https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling.html" rel="alternate" type="text/html" title="Reflection Means Hidden Coupling" /><published>2022-06-05T00:00:00+00:00</published><updated>2022-06-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling</id><content type="html" xml:base="https://www.yegor256.com/2022/06/05/reflection-means-hidden-coupling.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reflective_programming&quot;&gt;Reflective programming&lt;/a&gt; (or reflection) happens
when your code changes itself on the fly. For example, a method of a class, when we call it,
among other things adds a new method to the class
(also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Monkey_patch&quot;&gt;monkey patching&lt;/a&gt;). 
Java, Python, PHP, JavaScript, you name it—they
all have this “powerful” feature. What’s 
&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/193526&quot;&gt;wrong&lt;/a&gt; with it? 
Well, it’s 
&lt;a href=&quot;https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/&quot;&gt;slow&lt;/a&gt;, 
&lt;a href=&quot;https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection&quot;&gt;dangerous&lt;/a&gt;,
and hard to read and debug.
But all that is nothing compared with the &lt;em&gt;coupling&lt;/em&gt; it introduces to the code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Wheelman (2017) by Jeremy Rush&quot; src=&quot;/images/2022/02/wheelman.jpg&quot; longdesc=&quot;#18fe7bad&quot; /&gt;&lt;figcaption id=&quot;18fe7bad&quot;&gt;Wheelman (2017) by Jeremy Rush&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are many situations when reflection can “help” you.
Let’s go through all of them and see why the coupling they add to the code is
unnecessary and harmful.&lt;/p&gt;

&lt;h2 id=&quot;type-checking-and-casting&quot;&gt;Type Checking and Casting&lt;/h2&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m not sure everybody would agree that this is reflection, but I believe
it is: we check the structure of the class at runtime and then make
a call to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; which doesn’t exist in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;. This method only
“shows up” at runtime, when we make
a &lt;a href=&quot;https://stackoverflow.com/questions/19017258&quot;&gt;dynamic shortcut&lt;/a&gt;
to it in the bytecode.&lt;/p&gt;

&lt;p&gt;Why is this bad, aside from the fact that
1) it’s &lt;a href=&quot;http://www.buzdin.lv/2011/01/is-java-reflection-really-slow.html&quot;&gt;slow&lt;/a&gt;,
2) it’s more verbose and so &lt;a href=&quot;https://armedia.com/blog/instanceof-avoid-in-code/&quot;&gt;less readable&lt;/a&gt;,
and
3) it introduces a new point of failure since the object &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; may not be
an instance of class &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;,
leading to &lt;a href=&quot;https://docs.oracle.com/javaee/5/api/javax/el/MethodNotFoundException.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MethodNotFoundException&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The biggest problem the code above causes to the entire program is the coupling
it introduces between itself and its clients, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The size is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method may work or it may not. It will depend on the actual class of &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;. If it is
&lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;, the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; will succeed. Otherwise, there will be a runtime failure.
By looking at the method &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; we can’t tell what is the right way to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; in order
to avoid runtime failure. We need to read the body of &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; and only then can we change &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt;
to something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The size is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The size is unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code seems to be OK so far. However, what will happen when &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; changes its implementation
to something like this (I took it from
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;this article&lt;/a&gt;
about casting):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; perfectly handles any type that’s coming in, whether it’s an instance
of &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt; or not. However, the method &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; doesn’t know about the changes made in the method &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt;.
Instead, it still believes that &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; will break if it gets anything aside from &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;.
To keep them in sync we have to remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; knows too much about &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt;  and will
have to modify it when &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; changes. Thus, it’s valid to say that &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; is
coupled with &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; and this coupling is &lt;em&gt;hidden&lt;/em&gt;:
most probably, we will forget to modify &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; gets a better implementation.
Moreover, there could be many other places in the program similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;calc&lt;/code&gt;,
which we must remember to modify when the method &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt; changes.
Obviously, we will forget about most of them.&lt;/p&gt;

&lt;p&gt;This coupling, which is a big maintainability issue, was introduced thanks to the
very existence of reflection in Java. If we had not been able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator
and class casting (or did not even have them), the coupling would not be possible in the first place.&lt;/p&gt;

&lt;h2 id=&quot;forceful-testing&quot;&gt;Forceful Testing&lt;/h2&gt;

&lt;p&gt;Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;The book is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; by &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How would you write a unit test for this class and for its method &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;?
Obviously, it’s almost impossible without refactoring the class.
The method &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; sends text to the console, which we can’t easily mock
since it’s “static.” The right way would be to make &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out&lt;/code&gt; injectable
as a dependency, but some of us
&lt;a href=&quot;https://stackoverflow.com/questions/34571&quot;&gt;believe&lt;/a&gt; that reflection is a better option,
which would allow us to test the private method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; directly, without
calling &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testNamingWorks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;David West&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Object Thinking&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Object Thinking by David West&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also use &lt;a href=&quot;https://github.com/powermock/powermock&quot;&gt;PowerMock&lt;/a&gt; Java library
to do many “beautiful” things with private methods.&lt;/p&gt;

&lt;p&gt;The problem with this test is that it is tightly coupled with the object it
tests: the test &lt;em&gt;knows&lt;/em&gt; too much about the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;. The test knows that the
class contains a private method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;. The test also knows that the method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;
will at some point be called by the method &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;. Instead of testing &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;
the test tests what it’s not supposed to be aware of: the internals of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main purpose of a unit test is to be a “safety net” for us
programmers trying to modify the code that was written earlier or much much earlier:
if we break anything, the tests give us a timely signal, “highlighting” the place
where the code was broken. If nothing is highlighted and the tests are green
I can continue modifying the code. I rely on the information from my tests. I trust them.&lt;/p&gt;

&lt;p&gt;I take the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; and want to modify it, simply making the method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;
return &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. It’s a pretty
innocent modification, which may be necessary for performance considerations.
Before I start making any changes, I run all tests
(it’s a &lt;a href=&quot;https://wiki.c2.com/?TestEveryRefactoring&quot;&gt;good practice&lt;/a&gt;) and they all pass.
Then I make my changes, expecting no tests to fail:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;The book is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; by &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, the test &lt;code class=&quot;highlighter-rouge&quot;&gt;BookTest&lt;/code&gt; will fail, because it &lt;em&gt;expects&lt;/em&gt; my class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; to have
method &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; which returns &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. If it’s not my test or I wrote it a long time ago,
I would be frustrated to learn this fact: the test expects me to write my &lt;em&gt;private&lt;/em&gt; methods
only one specific way. Why? What’s wrong with returning &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;? I would think
that there is some hidden reason for this. Otherwise, why would a test demand anything
from a private implementation of a class? Very soon, after some investigation I would
find out that there is no reason. It’s just an assumption the test made about the
internals of &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; and this assumption has no reasons aside from “We didn’t have time
to refactor the class and make &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out&lt;/code&gt; injectable.”&lt;/p&gt;

&lt;p&gt;By the way, this testing approach is
&lt;a href=&quot;/2018/12/11/unit-testing-anti-patterns.html&quot;&gt;known&lt;/a&gt;
as the “Inspector” test anti-pattern.&lt;/p&gt;

&lt;p&gt;What would I do next? I would have to roll back my changes and then start refactoring
the test &lt;em&gt;and&lt;/em&gt; the class, in order to get rid of this assumption. However, changing the
test and at the same time changing main code is,
&lt;a href=&quot;https://twitter.com/yegor256/status/1525758255225528320&quot;&gt;I believe&lt;/a&gt;,
a &lt;a href=&quot;https://stackoverflow.com/questions/1569168&quot;&gt;dangerous practice&lt;/a&gt;:
most probably I will introduce some new bugs.&lt;/p&gt;

&lt;p&gt;The tests are not a “safety net” for me anymore. I can’t trust them.
I modify the code and I know that I didn’t break anything.
However, the test gives me a red signal.
How can I trust it if it lies in such a simple scenario?&lt;/p&gt;

&lt;p&gt;This coupling between the unit test &lt;code class=&quot;highlighter-rouge&quot;&gt;BookTest&lt;/code&gt; and the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;
would not happen if it was not possible to use reflection in the first place.
If nobody had the ability to reach the private method in any way,
the Inspector anti-pattern in unit tests would not be possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2017/02/07/private-method-is-new-class.html&quot;&gt;Of course&lt;/a&gt;,
life would be even better if we also didn’t have private methods.&lt;/p&gt;

&lt;h2 id=&quot;factories&quot;&gt;Factories&lt;/h2&gt;

&lt;p&gt;Here is how a typical &lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;factory&lt;/a&gt;
may work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is a Factory Method:&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Op&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;factory method&lt;/a&gt;
is &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;. It expects the name of the “operator” to be provided
and then,
using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class.forName()&lt;/code&gt;&lt;/a&gt;
from the Java Reflection API, constructs the name of the class, finds it in the
&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/environment/paths.html&quot;&gt;classpath&lt;/a&gt;,
and makes an instance of it. Now, say there are two classes both implementing the
interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Operator&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpPlus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpMinus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we use them, first asking our factory method to make objects from
operator names:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Plus&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minus&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minus&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; will be 13.&lt;/p&gt;

&lt;p&gt;We would not be able to do this without reflection. We would have to do this
instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpPlus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OpMinus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OpMinus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you ask me, this code looks much more readable and maintainable.
First of all, because in any IDE that enables
&lt;a href=&quot;https://www.jetbrains.com/help/idea/navigating-through-the-source-code.html#go_to_declaration&quot;&gt;code navigation&lt;/a&gt;
it would be possible to click on &lt;code class=&quot;highlighter-rouge&quot;&gt;OpMinus&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;OpPlus&lt;/code&gt; and immediately
jump to the body of the class. Second, the logic of class finding
is provided out-of-the-box by JVM: I don’t need to guess what happens when
&lt;code class=&quot;highlighter-rouge&quot;&gt;make(&quot;Plus&quot;)&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;There are a few reasons why people love static factories. I don’t agree with them.
This &lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;blog post&lt;/a&gt;
explains why. Without reflection it wouldn’t be possible to
have static factories at all and the code would be better and more maintainable.&lt;/p&gt;

&lt;h2 id=&quot;annotations&quot;&gt;Annotations&lt;/h2&gt;

&lt;p&gt;In Java you can attach an annotation
(an instance of a &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;-ish interface)
to a class (or an element of it like a method or an argument).
The information from the annotation can then be read at runtime or compile time.
In modern frameworks like &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html&quot;&gt;Spring&lt;/a&gt;
this feature is frequently used in order
to automate &lt;a href=&quot;https://stackoverflow.com/questions/19414734&quot;&gt;objects wiring&lt;/a&gt;:
you just attach some annotations to your classes
and the framework will find them, instantiate them, place them into a
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;DI container&lt;/a&gt;,
and assign to other objects’ attributes.&lt;/p&gt;

&lt;p&gt;I’ve &lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;said it earlier&lt;/a&gt;
that this very mechanism of discovering objects and &lt;em&gt;automatically&lt;/em&gt;
wiring them together is an anti-pattern. I’ve also
&lt;a href=&quot;/2016/04/12/java-annotations-are-evil.html&quot;&gt;said earlier&lt;/a&gt;
that annotations are an anti-pattern.
Neither dependency injection containers, not auto-wiring, nor annotations
would exist if there was no reflection. Life would be much better
and Java/OOP much cleaner.&lt;/p&gt;

&lt;p&gt;The clients of annotated objects/classes are coupled with them, and
this coupling is &lt;em&gt;hidden&lt;/em&gt;. An annotated object can change its interface or
modify annotations and the code will compile just fine. The problem will
surface only later at runtime, when the expectations of other objects
won’t be satisfied.&lt;/p&gt;

&lt;h2 id=&quot;serialization&quot;&gt;Serialization&lt;/h2&gt;

&lt;p&gt;When programmers don’t understand
&lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;object-oriented paradigm&lt;/a&gt;,
they make &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt; instead of
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;proper objects&lt;/a&gt;.
Then, in order to transfer a DTO over a network or save it to a file, they
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serialization&quot;&gt;serialize&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Marshalling_%28computer_science%29&quot;&gt;marshall&lt;/a&gt; them.
It’s usually done by a special serialization engine, which takes a DTO,
&lt;a href=&quot;http://erights.org/data/serial/jhu-paper/intro.html&quot;&gt;breaks&lt;/a&gt;
all possible encapsulation barriers,
reads the values of all of its fields,
and packages them into, say, a piece of JSON.&lt;/p&gt;

&lt;p&gt;In order to let the serialization engine break encapsulation barriers, a programming
language has to have reflection. First, because some fields of a DTO may be private
and thus accessible only through reflection.
Second, even if a DTO is designed “right” with all necessary
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;
for the private fields, still reflection is required in order to understand
which getters are present and can be called.&lt;/p&gt;

&lt;p&gt;The attitude serialization expresses towards objects is very similar to what
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM&lt;/a&gt; does. Neither of them
talk to objects, but instead they pretty “offensively” tear them apart, taking away
what’s necessary, and leaving the poor objects unconscious. If in the future an
object decides to change its structure, rename some fields, or change the types
of returned values—other objects, which actually are coupled with the object through
serialization, won’t notice anything. They will notice, but only at runtime,
when “invalid data format” exceptions start floating up. The developers
of the object won’t have a chance to notice that their changes to the interface
of the object affect some other places in the code base.&lt;/p&gt;

&lt;p&gt;We can say that serialization is a “perfect” method of coupling two objects
such that neither one will know about it.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;very idea&lt;/a&gt;
of object-oriented programming is centered around the principle
that an object is king. An object and only an object may decide what
to do with the data it encapsulates. The existence of this principle and adherence
to it helps avoid runtime errors usually caused by a simple scenario:
A uses the data coming from B without telling B how it’s being used,
then B changes the format or semantics of the data, and A fails to understand it.&lt;/p&gt;

&lt;p&gt;Obviously, serialization in such an “abusive” way would not be possible,
if there was no reflection in the first place. A more careful serialization
would be possible and would be used, not through reflection but via
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;printers&lt;/a&gt;
implemented by objects.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To conclude, reflection introduces coupling, which is hidden. This is the
most dangerous type of coupling, because it’s hard to follow, it’s hard to find,
and it’s hard to remove. Without reflection object-oriented design would be
much cleaner and solid. But even if this feature does exist,
I suggest you never use reflection in your programming language.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Do you use reflective programming (reflection)?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1535919879886446592?ref_src=twsrc%5Etfw&quot;&gt;June 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Reflective programming (or reflection) happens when your code changes itself on the fly. For example, a method of a class, when we call it, among other things adds a new method to the class (also known as monkey patching). Java, Python, PHP, JavaScript, you name it—they all have this “powerful” feature. What’s wrong with it? Well, it’s slow, dangerous, and hard to read and debug. But all that is nothing compared with the coupling it introduces to the code.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/02/wheelman.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/02/wheelman.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bugs Occam’s Razor</title><link href="https://www.yegor256.com/2022/03/29/bugs-occam-razor.html" rel="alternate" type="text/html" title="Bugs Occam’s Razor" /><published>2022-03-29T00:00:00+00:00</published><updated>2022-03-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/03/29/bugs-occam-razor</id><content type="html" xml:base="https://www.yegor256.com/2022/03/29/bugs-occam-razor.html">&lt;p&gt;For each accepted explanation of a phenomenon, there may be an extremely 
large, perhaps even incomprehensible, number of possible and 
more complex alternatives. The principle of parsimony, also known
as &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam's_razor&quot;&gt;Occam’s razor&lt;/a&gt;, 
suggests we prefer the simplest one. For example, 
“I can’t open the door and can’t attend the meeting” is a description
of a problem, which could be reduced to “I can’t open the door”
without losing any information, which might be important for those
who are waiting for me in the meeting room. I suggest applying the same
principle to bug reports.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Game of Thrones (2011–2019) by David Benioff&quot; src=&quot;/images/2022/03/game-of-thrones.jpg&quot; longdesc=&quot;#605dc3e3&quot; /&gt;&lt;figcaption id=&quot;605dc3e3&quot;&gt;Game of Thrones (2011–2019) by David Benioff&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say I design a simple imperative programming language and you submit
this bug report to me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Here is my code:

a := 7
a := a + 5 - 3
a := a / 3
print a

It doesn't work as expected. It prints 4, 
but it should print 3.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I have to investigate and find out which operator is broken: 
maybe the addition doesn’t work, or maybe
the assignment, or the division. I don’t know, and I have to
&lt;a href=&quot;/2016/02/09/are-you-still-debugging.html&quot;&gt;debug/test&lt;/a&gt; 
in order to find out… Me. Not you. Why not you?&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=jiEJnLBowHc&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/jiEJnLBowHc/mqdefault.jpg&quot; alt=&quot;YouTube video #jiEJnLBowHc&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M190: Make sure the bugs you report explain the simplest possible scenarios;
        4 April 2022.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;The more I work with bug reports, the more I believe that 
this must be your job as a bug reporter,
to play with the code and do the best you can to make your snippet as
short as it can be to represent the defect.&lt;/p&gt;

&lt;p&gt;Of course, you don’t need to do glass-box testing of my code finding the cause
of the bug, but on the API surface you must do your job and conclude
that the subtraction operator is broken:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Here is my code:

a := 7
a := a - 3
print a

It doesn't work as expected. It prints 7, 
but it should print 4.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, you’ve &lt;em&gt;reduced&lt;/em&gt; the scope of the defect to a much smaller one. 
You did your “home work” and found out that only one 
particular operator in my programming language is broken: the
subtraction. You saved my time and increased the chance of your
bug report being fixed sooner rather than later.&lt;/p&gt;

&lt;p&gt;In general, I believe that this bug optimization work 
must be done by reporters, not product owners.
I would even say that this might be a valid bug rejection reason: 
the report is not the simplest possible one.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If a bug report is messy or overly complex, who should clean it up before we start fixing it?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1528370540628566018?ref_src=twsrc%5Etfw&quot;&gt;May 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">For each accepted explanation of a phenomenon, there may be an extremely large, perhaps even incomprehensible, number of possible and more complex alternatives. The principle of parsimony, also known as Occam’s razor, suggests we prefer the simplest one. For example, “I can’t open the door and can’t attend the meeting” is a description of a problem, which could be reduced to “I can’t open the door” without losing any information, which might be important for those who are waiting for me in the meeting room. I suggest applying the same principle to bug reports.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/03/game-of-thrones.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/03/game-of-thrones.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Fallacies of AI Driven Coding</title><link href="https://www.yegor256.com/2022/02/16/ai-coding.html" rel="alternate" type="text/html" title="Fallacies of AI Driven Coding" /><published>2022-02-16T00:00:00+00:00</published><updated>2022-02-16T00:00:00+00:00</updated><id>https://www.yegor256.com/2022/02/16/ai-coding</id><content type="html" xml:base="https://www.yegor256.com/2022/02/16/ai-coding.html">&lt;p&gt;A few days ago, &lt;a href=&quot;https://deepmind.com&quot;&gt;DeepMind&lt;/a&gt; 
(&lt;a href=&quot;https://techcrunch.com/2014/01/26/google-deepmind/&quot;&gt;acquired&lt;/a&gt; by Google in 2014) released
&lt;a href=&quot;https://alphacode.deepmind.com&quot;&gt;AlphaCode&lt;/a&gt; and self-published
a
&lt;a href=&quot;https://storage.googleapis.com/deepmind-media/AlphaCode/competition_level_code_generation_with_alphacode.pdf&quot;&gt;paper&lt;/a&gt;
explaining how their artificial intelligence (AI) can “understand”
a programming contest task written in English and then write a Python, Java or C++ program, which
would work in about 30% of cases.
Earlier last year &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenAI&quot;&gt;OpenAI&lt;/a&gt; 
(&lt;a href=&quot;https://openai.com/blog/microsoft/&quot;&gt;$1B-funded&lt;/a&gt; by Microsoft in 2019)
released &lt;a href=&quot;https://openai.com/blog/openai-codex/&quot;&gt;Codex&lt;/a&gt;
and published a &lt;a href=&quot;https://arxiv.org/abs/2107.03374&quot;&gt;paper&lt;/a&gt;, claiming
that their AI can also solve around 30% of the programming tasks it was
tested with.
&lt;a href=&quot;https://www.wired.com/story/ai-write-code-like-humans-bugs/&quot;&gt;Wired&lt;/a&gt;,
the &lt;a href=&quot;https://www.ft.com/content/65477c33-cb72-418d-b03d-b60cfc5a8b5d&quot;&gt;Financial Times&lt;/a&gt;,
&lt;a href=&quot;https://www.theverge.com/2022/2/2/22914085/alphacode-ai-coding-program-automatic-deepmind-codeforce&quot;&gt;The Verge&lt;/a&gt;
and many others have already announced the victory: 
AI &lt;a href=&quot;https://www.bbc.com/news/business-57914432&quot;&gt;will replace programmers&lt;/a&gt; 
and we are all going to lose our jobs.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Short Circuit (1986) by John Badham&quot; src=&quot;/images/2022/02/short-circuit.jpg&quot; longdesc=&quot;#51ce7628&quot; /&gt;&lt;figcaption id=&quot;51ce7628&quot;&gt;Short Circuit (1986) by John Badham&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I would identify five beliefs about AI and its code-writing abilities,
which, in my opinion, are fundamental fallacies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI writes code (NOT!)&lt;/strong&gt;&lt;br /&gt;
It’s not true.
Neither AlphaCode nor Codex &lt;em&gt;write&lt;/em&gt; code. Instead, they &lt;em&gt;find&lt;/em&gt; it.
According to the AlphaCode paper, “generating code that solves a specific task 
requires &lt;em&gt;searching&lt;/em&gt; in a huge structured space of programs.” 
Even though Machine Learning (ML) makes searching
faster, it doesn’t make it writing. As far as I understand (the paper
is pretty vague on the exact details of model training), they turn
descriptions of programming tasks into sequences of numbers (tokenized characters!)
and then label them with solutions found … in GitHub or 
&lt;a href=&quot;https://codeforces.com&quot;&gt;Codeforces&lt;/a&gt; open repositories.
Then they ask the model to find the best solution for the vector of characters
in question. Saying that they write code is similar to saying that
Google draws pictures of cats when I search for a “black cat.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI understands requirements in a natural language (NOT!)&lt;/strong&gt;&lt;br /&gt;
It doesn’t really &lt;em&gt;understand&lt;/em&gt; anything.
Neither AlphaCode nor Codex analyze the &lt;em&gt;semantics&lt;/em&gt; of the input. Whether it
says “draw a green line” or “save a file,” the AI sees just two sequences of characters:
of length 17 and 11 respectively. It doesn’t &lt;em&gt;know&lt;/em&gt; what “green” means nor how it’s different
from a “file.” They tokenize text into vectors. If they used
&lt;a href=&quot;https://en.wikipedia.org/wiki/Controlled_natural_language&quot;&gt;CNL&lt;/a&gt; it would
be understanding, but they don’t.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI pair-programs with a human (NOT!)&lt;/strong&gt;&lt;br /&gt;
We may expect AI not to entirely replace us programmers, but instead help us
write certain blocks of code: &lt;a href=&quot;https://copilot.github.com&quot;&gt;Copilot&lt;/a&gt; 
(&lt;a href=&quot;https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/&quot;&gt;released&lt;/a&gt; 
by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; in 2021) 
is a notable example, &lt;a href=&quot;https://hackernoon.com/openais-new-code-generator-github-copilot-and-codex-bb143773&quot;&gt;powered&lt;/a&gt;
by the same Codex. A few months ago I got an early access to Codex and played a bit with
its features. My impression, as a programmer, was that it was neither able to
write an entire program nor did the blocks of
code it produced in response to my requests fit together. They were syntactically
valid and implemented the functionality requested, but the AI was falling short in combining
them the way I, a human, might agree to maintain them later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI autocompletes, that’s why they can write (NOT!)&lt;/strong&gt;&lt;br /&gt;
Indeed, there are a few products which do code autocompletion
with the use of ML, for example &lt;a href=&quot;https://www.codota.com&quot;&gt;Codota&lt;/a&gt;,
&lt;a href=&quot;https://www.tabnine.com&quot;&gt;Tabnine&lt;/a&gt;,
and
&lt;a href=&quot;https://www.kite.com&quot;&gt;Kite&lt;/a&gt;.
However, they don’t work with natural languages.
These are two different research problems:
1) how to &lt;a href=&quot;https://en.wikipedia.org/wiki/Autocomplete&quot;&gt;autocomplete&lt;/a&gt; 
an existing program with known
functionality and an already existing &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;, 
and 
2) how to turn natural language text into an AST.
As far as I understand, they don’t and never will overlap.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI just needs time to mature (NOT!)&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://spectrum.ieee.org/openai-wont-replace-coders&quot;&gt;Some&lt;/a&gt; believe
that AI will replace programmers, but “that day won’t arrive any time soon.”
However, it seems to me that it’s not a matter of maturity. The very 
direction researchers of OpenAI and DeepMind are trying to pursue is a dead end.
ML is just not the right tool to turn unstructured English text into a well-structured 
AST which is parseable by C++ compiler. To do this we need the AI to 
learn the semantics of the natural language and then, using 
&lt;em&gt;creativity&lt;/em&gt; and &lt;em&gt;imagination&lt;/em&gt;,
create all necessary AST elements in the right order. 
I simply don’t believe that ML is the right technology for this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To conclude, ML will never write our code, because … it’s just not
the right tool for the job.
However, it may be suitable for other things, like autocompletion, 
refactoring, bug fixing, optimization, and so on. I’m particularly interested
in automated refactoring: imagine a large legacy code base given to AI,
which improves certain parts of it, making the code faster,
safer, more readable, or shorter. Maybe it will even upgrade the code to newer frameworks, SDKs,
and dependencies. This is where ML already helps and will help more,
improving &lt;em&gt;existing&lt;/em&gt; ASTs.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=4I8BflW7EpU&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/4I8BflW7EpU/mqdefault.jpg&quot; alt=&quot;YouTube video #4I8BflW7EpU&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M188: I don&amp;#39;t think ML will ever be able to write code;
        21 February 2022.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Trying to apply ML to code generating is a road to nowhere, which
only wastes resources and … boosts stocks of Google and Microsoft.&lt;/p&gt;

&lt;p&gt;Besides, how much good will it do to the industry if programmers write
code mostly by finding samples on the Internet, copying, and sticking them together?
Many of them already do that even without AI.
The &lt;a href=&quot;https://stackoverflow.blog/2021/12/30/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/&quot;&gt;analysis&lt;/a&gt; 
recently done by Stack Overflow demonstrates that “the higher a user’s reputation, 
the less often they are copying.” Less skilful programmers tend to copy.
Is this a good tendency? Do we want AI to push it further?&lt;/p&gt;

&lt;p&gt;Will AI ever be able to write code by reading natural language requirements?
Yes, it will. When we invent artificial creativity.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="ai" /><summary type="html">A few days ago, DeepMind (acquired by Google in 2014) released AlphaCode and self-published a paper explaining how their artificial intelligence (AI) can “understand” a programming contest task written in English and then write a Python, Java or C++ program, which would work in about 30% of cases. Earlier last year OpenAI ($1B-funded by Microsoft in 2019) released Codex and published a paper, claiming that their AI can also solve around 30% of the programming tasks it was tested with. Wired, the Financial Times, The Verge and many others have already announced the victory: AI will replace programmers and we are all going to lose our jobs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2022/02/short-circuit.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2022/02/short-circuit.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Academic Teaching is Hard</title><link href="https://www.yegor256.com/2021/12/01/teaching.html" rel="alternate" type="text/html" title="Academic Teaching is Hard" /><published>2021-12-01T00:00:00+00:00</published><updated>2021-12-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/12/01/teaching</id><content type="html" xml:base="https://www.yegor256.com/2021/12/01/teaching.html">&lt;p&gt;A few months ago I got an opportunity to teach a single course for
3rd-year BSc students at &lt;a href=&quot;https://innopolis.university/en/&quot;&gt;Innopolis University&lt;/a&gt; (Russia). 
The title was “System Software Design.” 
The size of the group was about 150 people and the duration was
8 weeks. I was supposed to give them sixteen lectures, 
two lectures per week. And I was asked to examine their knowledge
by the end of the course. Pretty much a normal job for a university
teacher. And you know, in my opinion, I failed most parts of it. 
Here is what I learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Die Welle (2008) by Dennis Gansel&quot; src=&quot;/images/2021/11/die-welle.jpg&quot; longdesc=&quot;#2787ff7e&quot; /&gt;&lt;figcaption id=&quot;2787ff7e&quot;&gt;Die Welle (2008) by Dennis Gansel&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;By the way, all lectures were 
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLaIsQH4uc08woJKRAA7mmjs9fU0jeKjjM&quot;&gt;video recorded&lt;/a&gt; 
and all slide decks are &lt;a href=&quot;https://github.com/yegor256/ssd16&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-huge&quot;&gt;It’s Huge&lt;/h2&gt;

&lt;p&gt;I’ve got &lt;a href=&quot;/talks.html&quot;&gt;a lot of experience&lt;/a&gt; 
of giving speeches at software conferences,
workshops, meetups, and so on. Usually, such a speech is 30-40 minutes long with
10-15 minutes for Q&amp;amp;A at the end. Then, you just walk away and relax.&lt;/p&gt;

&lt;p&gt;Here it was something completely different. First, the lecture takes 90 minutes
with a small five-minute break in the middle. Second, I had to give two 
lectures straight. Third, I had two lectures on Tuesday and two on Wednesday.
Thus, I had 180+180=360 minutes of teaching every second week. 360 minutes! It’s
similar to 10 conference speeches! Imagine how much it takes to prepare ten
conference speeches. All my evenings and weekends were completely occupied with
this. The lesson I’ve learned: start preparing your course long before
the first day of it and expect to spend a lot of time on it.&lt;/p&gt;

&lt;h2 id=&quot;syllabus&quot;&gt;Syllabus&lt;/h2&gt;

&lt;p&gt;It seems that for some/most students, my course was not so much about learning
something new, but about getting the “A” grade. They started bugging me right
from the beginning of the course: how exactly will you examine our projects
and how will the grading decision be made? I don’t blame them, I blame myself:
I didn’t give them a Syllabus at the beginning of the course. Somewhere
in the middle of the course I wrote it up, 
&lt;a href=&quot;https://yegor256.github.io/ssd16/syllabus.pdf&quot;&gt;see here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-lieu-of-an-exam&quot;&gt;In Lieu of an Exam&lt;/h2&gt;

&lt;p&gt;Instead of examining their knowledge I decided to ask them to create
some software, using the knowledge they supposedly got at the lectures. It was a good decision,
because I can’t even imagine how much time an oral examination of 150 people would take and how
subjective it would be. There was another option though: a questionnaire with
right and wrong answers. But still, it would take a lot of time to create
one. Asking them to make a piece of software was a better choice, until
I realized that I didn’t know how I could &lt;em&gt;objectively&lt;/em&gt; evaluate it.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://yegor256.github.io/ssd16/syllabus.pdf&quot;&gt;Syllabus&lt;/a&gt; 
I suggested some criteria, but they were far from being objective.
The only objective one was the number of stars their repository
would acquire on GitHub. By the way, all of them reached 
the highest required number: fifteen. Some of them got more than forty,
which, according to my plan, was the point: to show them that good software
with a small boost (by the stars given to you by friends-and-family)
can easily gain larger popularity.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=8qfd93SyXpM&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/8qfd93SyXpM/mqdefault.jpg&quot; alt=&quot;YouTube video #8qfd93SyXpM&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;SSD 13/16: Test-Driven Development;
        9 October 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;By the way, I’m still dreaming about a software package or a hosted service, which would
go through any GitHub repository and make a quality analysis of it. Not the
quality of code, but the quality of process, documentation, discipline,
communications, etc. Such a software may use Machine Learning
to make non-deterministic guesses about the internals of a repository. It
may also benchmark thousands of GitHub repositories and then evaluate the
given one against those which are the best.&lt;/p&gt;

&lt;p&gt;Without such software I had to review their repositories one by one.
Which took me an entire day. TAs did their review before me, 
which was helpful too.&lt;/p&gt;

&lt;h2 id=&quot;labs&quot;&gt;Labs&lt;/h2&gt;

&lt;p&gt;There were not only lectures, but also practical tasks, called “Labs.”
I had three Teaching Assistants (TA), each of which had one third
of my students. The TAs were also teaching them software design, trying to 
go along with the content I was giving at the lectures. Did it work well?
It didn’t. And it was 100% my fault.&lt;/p&gt;

&lt;p&gt;Each TA has their own ideas about software design, about software quality,
about management, about many other things. If I wanted to do it right, 
I would have had to “teach” the TAs first, spending
some time for this before starting the course. Maybe I would have even had to give
them some guidelines, explaining my expectations. This would be very
helpful, since TAs interact with students much more than the lecturer.
I, being a standing-up teacher, was not able to &lt;em&gt;discuss&lt;/em&gt; things
with students: I was mostly delivering them my thoughts. TAs and Labs
are where the discussions are happening.&lt;/p&gt;

&lt;p&gt;Thus, the lesson I’ve learned: before starting teaching,
make sure your TAs understand your content well. Very well.&lt;/p&gt;

&lt;h2 id=&quot;attendance&quot;&gt;Attendance&lt;/h2&gt;

&lt;p&gt;At my first lecture there were about 120 people in the room. At the last one
there were ten. I’m not sure exactly why, but there are a few possible
reasons. First, maybe the lectures were boring. Well, can I make them 12 times
more fun next time? I doubt it.&lt;/p&gt;

&lt;p&gt;The second possible reason is that I didn’t check their attendance. I told
them right at the beginning of the course: “I don’t care about your physical presence here,
I only care about the product you create in eight weeks.” 
Maybe this was a mistake, but I still think that forcing students to attend 
lectures is disrespectful.&lt;/p&gt;

&lt;p&gt;Third, maybe most of them found it more comfortable to watch the recorded
lectures on YouTube instead of going to the class. I was trying to publish
videos in just a few days after each lecture. Was it a mistake? Maybe so,
but I still believe that video content is king. By the way, each lecture
out of sixteen published, was already watched at least a thousand times 
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLaIsQH4uc08woJKRAA7mmjs9fU0jeKjjM&quot;&gt;on YouTube&lt;/a&gt;.
A few dozen students in the room versus a thousand people on YouTube:
who do you think is more important?&lt;/p&gt;

&lt;p&gt;Thus, if you want your class to be full each time: 
1) entertain them,
2) make grades depend on attendance, 
and
3) don’t publish videos until after the exam (or don’t record at all).
But I won’t do either of those. I’m fine with ten people in the room,
thousands on YouTube, and a few very interesting products created by 
those who most probably never attended (I discuss them below).&lt;/p&gt;

&lt;h2 id=&quot;best-students&quot;&gt;Best Students&lt;/h2&gt;

&lt;p&gt;There were four possible grades to give: A, B, C, and D. The failing
one was “D”, but”C” was not good either. Students formed small
groups of up to four people. Each group created their own GitHub project
(actually, three groups out of fifty made them in GitLab) and I reviewed them. Here is
how I distributed my marks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A++ : 2
A+  : 6
A   : 22
B   : 13
C   : 4
D   : 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Formally speaking, I gave “A” marks to 2+6+22 people (including “A+” and “A++”) marks, but
I felt obligated to emphasize the difference between excellent and good projects
even through they are in the same formal “A” category: that’s why there are extra “A++” and “A+” marks. 
Of course, there was a possibility
to give “A” only to those who are “A+” and “A++” in my classification, shifting
the rest of the schedule down and giving many more “C” marks, 
but I was afraid that this would lead to a lot of complaints. 
Put simply, I chickened out.&lt;/p&gt;

&lt;p&gt;Now, to reward those who got “A++” and “A+” I’m publishing their projects here, 
and their accounts. They may consider this blog post as my personal
letter of recommendation for each of them. If you, dear reader, are a potential
employer of these guys, I highly recommend them.&lt;/p&gt;

&lt;p&gt;Here they are the “A++” two:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/InnoTutor&quot;&gt;&lt;strong&gt;InnoTutor&lt;/strong&gt;&lt;/a&gt; 
&lt;br /&gt;
by 
&lt;a href=&quot;https://github.com/SMore-Napi&quot;&gt;@SMore-Napi&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Dablup&quot;&gt;@Dablup&lt;/a&gt;, 
&lt;a href=&quot;https://github.com/tasneem22&quot;&gt;@tasneem22&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/emileyray&quot;&gt;@emileyray&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Doctorinna&quot;&gt;&lt;strong&gt;Doctorinna&lt;/strong&gt;&lt;/a&gt; 
&lt;br /&gt;
by
&lt;a href=&quot;https://github.com/DanisAlukaev&quot;&gt;@DanisAlukaev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ladamoroz&quot;&gt;@ladamoroz&lt;/a&gt;, 
&lt;a href=&quot;https://github.com/maxim-pr&quot;&gt;@maxim-pr&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/Denisalik&quot;&gt;@Denisalik&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at the quality of the repositories! 
Don’t judge them much by the quality of code
or the usefulness of the products (even though they are useful) — the course
was not about coding. The course was about organizing your code and 
making technical decisions. They, I believe, did very well, keeping in mind
that they are students.&lt;/p&gt;

&lt;p&gt;These are six “A+” repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/repeating/PoputchikiInno&quot;&gt;&lt;strong&gt;PoputchikiInno&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/pierrepicaud&quot;&gt;@pierrepicaud&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/Kamil-Sabbagh&quot;&gt;@Kamil-Sabbagh&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/repeating&quot;&gt;@repeating&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/Karam19&quot;&gt;@Karam19&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Ahuratus/Trajectory-Detection-Web-services&quot;&gt;&lt;strong&gt;Trajectory-Detection-Web-services&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/Ehsan2754&quot;&gt;@Ehsan2754&lt;/a&gt;
  and
  &lt;a href=&quot;https://github.com/Mr-Barry&quot;&gt;@Mr-Barry&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/yadariya/InnoBookCrossing&quot;&gt;&lt;strong&gt;InnoBookCrossing&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://github.com/Fressermenschen&quot;&gt;@Fressermenschen&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/Kastrylia&quot;&gt;@Kastrylia&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/romanza705&quot;&gt;@romanza705&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/yadariya&quot;&gt;@yadariya&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/TonyDecvA180XN/Cmple&quot;&gt;&lt;strong&gt;Cmple&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by 
  &lt;a href=&quot;https://github.com/TonyDecvA180XN&quot;&gt;@TonyDecvA180XN&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gitlab.com/amirovaldiar/kolorz-frontend&quot;&gt;&lt;strong&gt;kolorz-frontend&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://gitlab.com/amirovaldiar&quot;&gt;@amirovaldiar&lt;/a&gt;,
  &lt;a href=&quot;https://gitlab.com/ease-ln&quot;&gt;@ease-ln&lt;/a&gt;,
  and
  &lt;a href=&quot;https://gitlab.com/nailyavaliull1409&quot;&gt;@nailyavaliull1409&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/PictureInspector/Picture-Inspector&quot;&gt;&lt;strong&gt;Picture-Inspector&lt;/strong&gt;&lt;/a&gt;
  &lt;br /&gt;
  by
  &lt;a href=&quot;https://github.com/Palandr1234&quot;&gt;@Palandr1234&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/datapaf&quot;&gt;@datapaf&lt;/a&gt;,
  and
  &lt;a href=&quot;https://github.com/Dinislam36&quot;&gt;@Dinislam36&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also pretty good.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Big thanks to Innopolis University and personally to its Dean, 
Prof. &lt;a href=&quot;https://scholar.google.com/citations?user=PdMO57sAAAAJ&amp;amp;hl=en&quot;&gt;Giancarlo Succi&lt;/a&gt;,
for giving me this opportunity to realize that being a teacher is
very hard and … fun.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What a good teacher does?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1467390909025300481?ref_src=twsrc%5Etfw&quot;&gt;December 5, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html">A few months ago I got an opportunity to teach a single course for 3rd-year BSc students at Innopolis University (Russia). The title was “System Software Design.” The size of the group was about 150 people and the duration was 8 weeks. I was supposed to give them sixteen lectures, two lectures per week. And I was asked to examine their knowledge by the end of the course. Pretty much a normal job for a university teacher. And you know, in my opinion, I failed most parts of it. Here is what I learned.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/11/die-welle.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/11/die-welle.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Objectionary: Dictionary and Factory for EO Objects</title><link href="https://www.yegor256.com/2021/10/21/objectionary.html" rel="alternate" type="text/html" title="Objectionary: Dictionary and Factory for EO Objects" /><published>2021-10-21T00:00:00+00:00</published><updated>2021-10-21T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/10/21/objectionary</id><content type="html" xml:base="https://www.yegor256.com/2021/10/21/objectionary.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://www.eolang.org&quot;&gt;&lt;img src=&quot;/images/books/elegant-objects/cactus.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Since the time of Kernighan and Ritchie we share binary code in
libraries. You need to print some text with &lt;a href=&quot;https://en.wikipedia.org/wiki/Printf_format_string&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printf()&lt;/code&gt;&lt;/a&gt; in C++? 
You get &lt;a href=&quot;https://en.wikipedia.org/wiki/Glibc&quot;&gt;libc&lt;/a&gt; library with
&lt;a href=&quot;https://stackoverflow.com/a/33188344/187141&quot;&gt;700+&lt;/a&gt; other functions inside.
You need to copy a Java stream?
You get &lt;a href=&quot;https://commons.apache.org/proper/commons-io/&quot;&gt;Apache Commons IO&lt;/a&gt; with 
&lt;a href=&quot;https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html#copy-java.io.InputStream-java.io.OutputStream-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt;&lt;/a&gt; and 
&lt;a href=&quot;https://commons.apache.org/proper/commons-io/apidocs/index.html&quot;&gt;140+&lt;/a&gt; 
other methods and classes.
The same happens in all languages I’m aware of, like Ruby, Python, JavaScript, PHP:
you need an object, or a class, or a function, or a method—you have to add
the entire library to your build. 
Wouldn’t it be more elegant to deal with individual objects instead?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Mænd &amp;amp; høns (2015) by Anders Thomas Jensen&quot; src=&quot;/images/2021/10/maend-and-hons.jpg&quot; longdesc=&quot;#5f493073&quot; /&gt;&lt;figcaption id=&quot;5f493073&quot;&gt;Mænd &amp;amp; høns (2015) by Anders Thomas Jensen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The idea is not new and not mine. 
I got it from the book &lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;Object Thinking&lt;/a&gt;
by David West, where he suggested creating an &lt;em&gt;Objectionary&lt;/em&gt; (page 306), 
a “combination of dictionary and object factory,” with the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The total number of objects is less than 2000;&lt;/li&gt;
  &lt;li&gt;Each object is an autonomous executable entity;&lt;/li&gt;
  &lt;li&gt;Every object has a unique ID and a unique “address”;&lt;/li&gt;
  &lt;li&gt;Objects are nothing more than collections of objects;&lt;/li&gt;
  &lt;li&gt;Objects require hardware-specific VMs for execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;&lt;img src=&quot;/images/2015/04/book-object-thinking.jpg&quot; style=&quot;width:96px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Seventeen years later (the book was published in 2004), we implemented the idea
on top of &lt;a href=&quot;https://www.eolang.org&quot;&gt;EO&lt;/a&gt;, our new programming language.
The language is intentionally much simpler than Java or C++.
You can read its more or less formal description 
&lt;a href=&quot;https://arxiv.org/abs/2111.13384&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To turn an EO program into an executable entity and release it to 
the &lt;a href=&quot;https://www.objectionary.com&quot;&gt;Objectionary&lt;/a&gt;, 
one has to go through the following mandatory steps,
assuming the JVM is used as a target platform
(the steps marked with 🌵 are implemented by our
&lt;a href=&quot;https://github.com/cqfn/eo&quot;&gt;eo-maven-plugin&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Assemble&lt;/strong&gt;🌵:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Parse&lt;/strong&gt;🌵: &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; ➜ &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Optimize&lt;/strong&gt;🌵: &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; ➜ better &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Discover&lt;/strong&gt;🌵: find all foreign aliases&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Pull&lt;/strong&gt;🌵: &lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;download&lt;/a&gt; foreign &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; objects&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Resolve&lt;/strong&gt;🌵: &lt;a href=&quot;https://search.maven.org/&quot;&gt;download&lt;/a&gt; and unpack &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; artifacts&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Place&lt;/strong&gt;🌵: move artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files to &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Mark&lt;/strong&gt;🌵: mark &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources found in &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; as foreign&lt;/li&gt;
      &lt;li&gt;↑ Go back to &lt;strong&gt;Parse&lt;/strong&gt; if some &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files are still not parsed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transpile&lt;/strong&gt;🌵: &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; ➜ &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assemble&lt;/strong&gt;🌵: same as above, but for tests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compile&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; ➜ &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test&lt;/strong&gt;: run all unit tests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unplace&lt;/strong&gt;🌵: remove artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unspile&lt;/strong&gt;🌵: remove auto-generated &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; files&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Copy&lt;/strong&gt;🌵: copy &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files to &lt;code class=&quot;highlighter-rouge&quot;&gt;EO-SOURCES/&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deploy&lt;/strong&gt;: package &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; artifact and put it into Maven Central&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Push&lt;/strong&gt;: send a pull request to &lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;yegor256/objectionary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merge&lt;/strong&gt;: we test and merge the pull request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is an iterative process, which loops over and over
again until all required &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; objects are parsed and their atoms are present
as &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files. 
Then, all &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; files are transpiled to &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; and then compiled
to &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; binaries. Then, tested, packaged, and deployed to Maven Central. Then,
merged to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch of &lt;a href=&quot;https://www.objectionary.com&quot;&gt;Objectionary&lt;/a&gt;, 
via a pull request.&lt;/p&gt;

&lt;p&gt;The first part of the algorithm can be automated with 
&lt;a href=&quot;https://github.com/cqfn/eo&quot;&gt;our Maven plugin&lt;/a&gt;, simply by placing &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources
in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; and adding this to &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.eolang&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;eo-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Take it from Maven Central --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;register&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;assemble&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;transpile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;copy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;unplace&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;unspile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt; goal will scan the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; directory, find all
&lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources, and “register” them in a special CSV catalog at 
&lt;code class=&quot;highlighter-rouge&quot;&gt;target/eo-foreigns.csv&lt;/code&gt;. Next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; goal will call
the following goals: &lt;code class=&quot;highlighter-rouge&quot;&gt;parse&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;optimize&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;discover&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;. All these goals use the CSV catalog when they parse, optimize,
pull and so on.&lt;/p&gt;

&lt;p&gt;When all of them are done, &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; checks the catalog: 
do any &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files still require parsing? If they do, another
cycle starts, again with parsing. When all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files are parsed,
the goal &lt;code class=&quot;highlighter-rouge&quot;&gt;transpile&lt;/code&gt; is executed, which turns &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; files into &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt;
and places them into &lt;code class=&quot;highlighter-rouge&quot;&gt;target/generated-sources&lt;/code&gt;. The rest is done by the
standard &lt;a href=&quot;https://maven.apache.org/plugins/maven-compiler-plugin/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maven-compiler-plugin&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s discuss each step in detail.&lt;/p&gt;

&lt;h2 id=&quot;parse-&quot;&gt;Parse 🌵&lt;/h2&gt;

&lt;p&gt;Say, this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; source code at &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/hello.eo&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+alias org.eolang.io.stdout

[] &amp;gt; hello
  &quot;Jeff&quot; &amp;gt; user
  stdout &amp;gt; @
    &quot;Hello, %s!&quot;
    user&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will be parsed to this XMIR (XML Intermediate Representation):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;program&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Jeff&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, %s!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/program&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you wonder what this XML means, read 
&lt;a href=&quot;https://arxiv.org/abs/2111.13384&quot;&gt;this document&lt;/a&gt;:
there is a section about XMIR.&lt;/p&gt;

&lt;h2 id=&quot;optimize-&quot;&gt;Optimize 🌵&lt;/h2&gt;

&lt;p&gt;At this step the XMIR produced by the parser goes through 
many XSL transformations, sometimes getting additional elements and attributes.
Our example XMIR may get a new attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;@ref&lt;/code&gt;, pointing the reference to the
object &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; to the line where the object was defined:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;program&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Jeff&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, %s!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/program&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some XSL transformation may check for grammar or semantic errors and
add a new element &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;errors/&amp;gt;&lt;/code&gt; if something wrong is found. Thus, if parsing
didn’t find any syntax errors, all other errors will be visible inside
the XMIR document, for example, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;program&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;errors&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;error&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;package&amp;lt;/error&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/errors&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Jeff&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, %s!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;o&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/o&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/program&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By the way, this is not a real error, I just made it up.&lt;/p&gt;

&lt;h2 id=&quot;discover-&quot;&gt;Discover 🌵&lt;/h2&gt;

&lt;p&gt;At this step we find out which objects are “foreign”. In our example,
the object &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; is not foreign, since it’s defined in the code we
have in front of us, while the object &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; is not defined here and
that’s why is a foreign one.&lt;/p&gt;

&lt;p&gt;Going through all &lt;code class=&quot;highlighter-rouge&quot;&gt;.xmir&lt;/code&gt; files we can easily judge which object is foreign just
by looking at their names. Once we see the reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;org.eolang.io.stdout&lt;/code&gt;,
we check the presence of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;org/eolang/io/stdout.eo&lt;/code&gt; in the directory
with all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources. If the file is absent, we put the object name
into the CSV catalog and claim it to be foreign.&lt;/p&gt;

&lt;h2 id=&quot;pull&quot;&gt;Pull&lt;/h2&gt;

&lt;p&gt;Here we simply try to find source code &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; files for all foreign
objects in Objectionary, by looking at its 
&lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;GitHub repository&lt;/a&gt;. 
For example, this is where we would find
&lt;a href=&quot;https://github.com/yegor256/objectionary/blob/master/objects/org/eolang/io/stdout.eo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.eo&lt;/code&gt;&lt;/a&gt;.
We find them there and pull to the local disc.&lt;/p&gt;

&lt;p&gt;Pay attention, we pull the sources. Not binaries or compiled XMIR
documents, but the sources in &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; format.&lt;/p&gt;

&lt;h2 id=&quot;resolve-&quot;&gt;Resolve 🌵&lt;/h2&gt;

&lt;p&gt;This is what &lt;a href=&quot;https://github.com/yegor256/objectionary/blob/master/objects/org/eolang/io/stdout.eo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.eo&lt;/code&gt;&lt;/a&gt;
may look like, after the pull:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;+package org.eolang.io
+rt jvm org.eolang:eo-runtime:0.10.2

[text] &amp;gt; stdout /bool&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object is an &lt;em&gt;atom&lt;/em&gt;. This means that even though we have its source code,
it’t not complete without a piece of platform-specific binary code.
An atom is an object implemented by the runtime
platform, where the EO program is executed (also known
as &lt;a href=&quot;https://en.wikipedia.org/wiki/Foreign_function_interface&quot;&gt;FFI mechanism&lt;/a&gt;).
The line that starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; (runtime) explains where to get the
runtime code. The &lt;code class=&quot;highlighter-rouge&quot;&gt;jvm&lt;/code&gt; part is the name of the runtime.&lt;/p&gt;

&lt;p&gt;We go to &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt;, find there the artifact 
&lt;a href=&quot;https://search.maven.org/artifact/org.eolang/eo-runtime&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.eolang:eo-runtime:0.10.2&lt;/code&gt;&lt;/a&gt;,
and unpack it (it’s a zip archive with &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files after all).&lt;/p&gt;

&lt;p&gt;By the way, a program may contain a number of &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; meta instructions, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+package org.eolang.io
+rt jvm org.eolang:eo-runtime:0.10.2
+rt ruby eo-core:0.5.8
+rt python eo-basics:0.0.3

[text] &amp;gt; stdout /bool&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, three runtime platforms will know where to get the missing code
for the &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; atom:
EO➝Java will go to &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt; for the JAR artifact,
EO➝Ruby will go to &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; 
trying to find the gem by the name &lt;code class=&quot;highlighter-rouge&quot;&gt;eo-core&lt;/code&gt; and version &lt;code class=&quot;highlighter-rouge&quot;&gt;0.5.8&lt;/code&gt;,
while EO➝Python will go to &lt;a href=&quot;https://pypi.org/&quot;&gt;PyPi&lt;/a&gt; 
trying to find &lt;code class=&quot;highlighter-rouge&quot;&gt;eo-basics&lt;/code&gt; package with the version &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.3&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;place-&quot;&gt;Place 🌵&lt;/h2&gt;

&lt;p&gt;Next we place all &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files found in the unpacked JAR,
into the &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes&lt;/code&gt; directory. We do this in order 
to help Maven Compiler Plugin find them in classpath.&lt;/p&gt;

&lt;h2 id=&quot;mark-&quot;&gt;Mark 🌵&lt;/h2&gt;

&lt;p&gt;In each JAR file that arrives we can find &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources. They are the programs
this JAR file has had in classpath while it was built. We consider them
as foreign objects too and add to the CSV catalog.&lt;/p&gt;

&lt;h2 id=&quot;transpile-&quot;&gt;Transpile 🌵&lt;/h2&gt;

&lt;p&gt;When all foreign objects which are registered in the catalog are downloaded,
compiled, and optimized, we are ready to start 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Source-to-source_compiler&quot;&gt;&lt;em&gt;transpiling&lt;/em&gt;&lt;/a&gt;.
Instead of compiling XMIR directly to Bytecode, we transpile it to &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt;
and let Java complier do the job of generating Bytecode.&lt;/p&gt;

&lt;p&gt;We believe that there are a few benefits of transpiling to Java vs. compilation to Bytecode:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Output code is easier to read and debug,&lt;/li&gt;
  &lt;li&gt;Optimization power of existing compilers is reused,&lt;/li&gt;
  &lt;li&gt;Complexity of a transpiler is lower than of a compiler,&lt;/li&gt;
  &lt;li&gt;Portability of the output code is higher.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We already have two EO➝Java transpilers: 
&lt;a href=&quot;https://github.com/cqfn/eo&quot;&gt;canonical one&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/polystat/hse-transpiler&quot;&gt;the one&lt;/a&gt; made by &lt;a href=&quot;https://www.hse.ru/en/&quot;&gt;HSE University&lt;/a&gt;. 
We also have EO➝Python experimental &lt;a href=&quot;https://github.com/polystat/eo2py&quot;&gt;transpiler&lt;/a&gt; 
made by students of &lt;a href=&quot;https://innopolis.university/en/&quot;&gt;Innopolis University&lt;/a&gt;. 
Most probably, when you read this article, there will be more transpilers available.&lt;/p&gt;

&lt;p&gt;Even though we believe in transpiling, it’s still possible to create 
EO➝Bytecode, EO➝LLVM, or EO➝x86 compilers. 
You are more than welcome to try!&lt;/p&gt;

&lt;h2 id=&quot;compile&quot;&gt;Compile&lt;/h2&gt;

&lt;p&gt;At this step, the standard &lt;a href=&quot;https://maven.apache.org/plugins/maven-compiler-plugin/&quot;&gt;Maven Compiler Plugin&lt;/a&gt; 
finds auto-generated &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; files in &lt;code class=&quot;highlighter-rouge&quot;&gt;target/generated-sources&lt;/code&gt;
and turns them into &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files.&lt;/p&gt;

&lt;h2 id=&quot;unplace-&quot;&gt;Unplace 🌵&lt;/h2&gt;

&lt;p&gt;Here, we remove all &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files unpacked from dependencies. This is
necessary, in order to avoid getting them packaged into the 
final JAR.&lt;/p&gt;

&lt;p&gt;We do placing and then unplacing simply because Maven Compiler Plugin
&lt;a href=&quot;https://stackoverflow.com/questions/3410548&quot;&gt;doesn’t allow&lt;/a&gt; 
us to extend classpath in runtime. If it would be possible,
we would just download dependencies from Maven Central and add them
to classpath, without unpacking, placing, and then unplacing.&lt;/p&gt;

&lt;h2 id=&quot;unspile-&quot;&gt;Unspile 🌵&lt;/h2&gt;

&lt;p&gt;Here, we delete all &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files from the &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/&lt;/code&gt; directory,
which were auto-generated from &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt;. We don’t want to ship binaries,
which can be generated from &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources. We only want to ship 
atoms, which are &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; files originally.&lt;/p&gt;

&lt;h2 id=&quot;copy-&quot;&gt;Copy 🌵&lt;/h2&gt;

&lt;p&gt;At this step we take all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources from &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; and copy
them to &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/EO-SOURCES/&lt;/code&gt; directory. Later, they will be
packaged together with &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt;, which will be
deployed to Maven Central. While copying, we replace &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt; in the
runtime version to the currently deploying version. Take a look 
at the file &lt;a href=&quot;https://github.com/cqfn/eo/blob/master/eo-runtime/src/main/eo/org/eolang/io/stdout.eo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout.eo&lt;/code&gt;&lt;/a&gt;, 
in its source repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+package org.eolang.io
+rt jvm org.eolang:eo-runtime:0.0.0

[text] &amp;gt; stdout /bool&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The version at the &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; line is &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt;. When sources are copied to the 
JAR, this text is replaced.&lt;/p&gt;

&lt;p&gt;The motivation to ship sources together with binaries is the following.
When atom binaries are compiled from Java to Bytecode, they stay
next to transpiled sources. They are compiled together. Moreover,
unit tests also rely on both atom sources and auto-generated/transpiled
sources. We want future users of the JAR to know what sources we
had in place when the compilation was going on, to maybe let them reproduce
it or at least know what were the surroundings of the binaries they get.&lt;/p&gt;

&lt;p&gt;From a more practical standpoint, we need these sources in the JAR
in order to let the &lt;strong&gt;Mark&lt;/strong&gt; step understand what objects
are worth pulling next to the atoms resolved.&lt;/p&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;/h2&gt;

&lt;p&gt;Here, we package everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;target/classes/&lt;/code&gt; into a JAR
archive and &lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;deploy&lt;/a&gt;  it
to Maven Central.&lt;/p&gt;

&lt;p&gt;I suggest deploying sources to GitHub Pages too, to let users see
them on the Web. Also, it will be helpful later when we make a pull 
request to Objectionary. 
Check this &lt;a href=&quot;https://github.com/yegor256/eo-files/blob/master/.rultor.yml#L17-L31&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.rultor.yml&lt;/code&gt;&lt;/a&gt; 
script in one of my EO libraries, it deploys &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources to GitHub Pages,
substituting &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt; version markers in them correctly.&lt;/p&gt;

&lt;h2 id=&quot;push&quot;&gt;Push&lt;/h2&gt;

&lt;p&gt;When the deployment is finished and Maven Central updates its CDN servers,
it’s time to submit a pull request to &lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;yegor256/objectionary&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources of objects go into &lt;code class=&quot;highlighter-rouge&quot;&gt;objects/&lt;/code&gt; and their unit tests
go into &lt;code class=&quot;highlighter-rouge&quot;&gt;tests/&lt;/code&gt;. Basically, we just copy &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/eo/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/eo&lt;/code&gt;
over there. But, stop… one important detail. In the sources, as was said earlier,
we have &lt;code class=&quot;highlighter-rouge&quot;&gt;+rt&lt;/code&gt; versions set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0&lt;/code&gt;. Here, when we copy to Objectionary,
versions must be set to real numbers.&lt;/p&gt;

&lt;h2 id=&quot;merge&quot;&gt;Merge&lt;/h2&gt;

&lt;p&gt;When the pull request arrives, a GitHub Action pre-configured in the
&lt;a href=&quot;https://github.com/yegor256/objectionary&quot;&gt;yegor256/objectionary&lt;/a&gt; repository
transpiles all &lt;code class=&quot;highlighter-rouge&quot;&gt;.eo&lt;/code&gt; sources to all known platforms and runs all unit tests.
If everything is clean, we review the pull request and decide whether
the objects suggested go along with others already present in the Objectionary.&lt;/p&gt;

&lt;p&gt;Once the pull request is merged, the objects become part of the centralized
dictionary of all objects of EO. Take a look at &lt;a href=&quot;https://github.com/yegor256/objectionary/pull/2&quot;&gt;this pull request&lt;/a&gt;, 
where a new object was submitted to Objectionary, after its atom was
deployed to Maven Central.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Since the time of Kernighan and Ritchie we share binary code in libraries. You need to print some text with printf() in C++? You get libc library with 700+ other functions inside. You need to copy a Java stream? You get Apache Commons IO with copy() and 140+ other methods and classes. The same happens in all languages I’m aware of, like Ruby, Python, JavaScript, PHP: you need an object, or a class, or a function, or a method—you have to add the entire library to your build. Wouldn’t it be more elegant to deal with individual objects instead?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/10/maend-and-hons.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/10/maend-and-hons.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Calibrated Achievement Points</title><link href="https://www.yegor256.com/2021/10/12/calibrated-achievement-points.html" rel="alternate" type="text/html" title="Calibrated Achievement Points" /><published>2021-10-12T00:00:00+00:00</published><updated>2021-10-12T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/10/12/calibrated-achievement-points</id><content type="html" xml:base="https://www.yegor256.com/2021/10/12/calibrated-achievement-points.html">&lt;p&gt;It’s a well-known problem nowadays: how can we measure the performance 
and productivity of individual contributors who do non-routine 
creative work? The best examples are research and development (R&amp;amp;D) teams, which 
usually consist of software engineers, designers, 
scientists, architects, quality experts, product managers, and so on. 
Such professionals deliver results that are hard to get down to simple numbers. 
Many authors &lt;a href=&quot;/2020/06/23/individual-performance-metrics.html&quot;&gt;argue&lt;/a&gt;
that the very idea of measuring individual performance is toxic and may only 
lead to negative consequences. We tried to challenge this point of view 
and did an experiment in our team, which demonstrated that individual 
performance can indeed be measured, even if people’s work involves creativity, 
and results are hard to predict. We designed a system of 
Calibrated Achievement Points (CAPs), which are rewarded to those who deliver 
visible and tangible results of different kinds. This article explains how 
CAPs work and summarizes the results of the experiment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Gridlock&amp;#39;d (1997) by Vondie Curtis-Hall&quot; src=&quot;/images/2021/10/gridlockd.jpg&quot; longdesc=&quot;#88e55448&quot; /&gt;&lt;figcaption id=&quot;88e55448&quot;&gt;Gridlock&amp;#39;d (1997) by Vondie Curtis-Hall&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;“Competitions are for horses, not artists,” said 
&lt;a href=&quot;https://en.wikipedia.org/wiki/B%C3%A9la_Bart%C3%B3k&quot;&gt;Béla Bartók&lt;/a&gt;, 
a Hungarian composer about a hundred years ago.
Indeed, how can we measure the productivity of someone making a piece
of art, say, a painting? By the amount of acrylic put on the canvas
per minute? Or maybe we ask painters to compete on the size of the canvas in 
inches—the bigger the painting, the better the painter!? Obviously, such metrics
would be considered not only useless, but harmful. Encouraging artists
to compete by such productivity indicators will kill the very idea of art
and will most probably discourage most talented artists from participating.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Competition positively affects creativity.
&lt;/aside&gt;

&lt;p&gt;It seems that these days, however, there are people who would disagree with the famous composer. 
For example, Jacob Eisenberg from University College Dublin and 
William Forde Thompson from Macquarie University, 
in &lt;a href=&quot;https://www.researchgate.net/publication/233148051_The_Effects_of_Competition_on_Improvisers'_Motivation_Stress_and_Creative_Performance&quot;&gt;their research&lt;/a&gt;
into how amateur musicians’ creativity changes under stress of competition, demonstrated:
competition positively affects creativity.
A more recent &lt;a href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3250603&quot;&gt;study&lt;/a&gt;
by Daniel Gross from Duke University confirmed this finding
and extended it with a warning: heavy competition drives us to stop creativity
altogether.
Anil Rathi in &lt;a href=&quot;https://hbr.org/2014/11/to-encourage-innovation-make-it-a-competition&quot;&gt;HBR noted&lt;/a&gt;,
from a business perspective, 
that “well-managed internal competitions amplify the company’s overall creative ambience.”&lt;/p&gt;

&lt;p&gt;Thus, it seems that in the modern world competition and creativity go together.
However, the positive effect of competition depends on the
rules the team has to play by and the quality of metrics. 
If the metrics are reasonable and well understood
by all participants, the competition drives the creativity.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Qii3yrQJdHs&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Qii3yrQJdHs/mqdefault.jpg&quot; alt=&quot;YouTube video #Qii3yrQJdHs&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M179: Calibrated Achievement Points (CAP) to measure R&amp;amp;D productivity;
        18 October 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Of course, measuring the productivity of an artist by the amount of acrylic they
put on the canvas or the productivity of a composer by the frequency
of pushing the piano keys would be useless and harmful.
There are however many examples of good metrics in art, sport, and science,
which have stimulated the creativity of artists, athletes, and scientists for centuries:
the &lt;a href=&quot;https://www.nobelprize.org/&quot;&gt;Nobel Prize&lt;/a&gt; is probably the most famous competition every 
world-class researcher is dreaming of winning, while the Olympic Games and 
World Championships are what we have for athletes, 
and the &lt;a href=&quot;https://www.oscars.org/&quot;&gt;Oscars&lt;/a&gt; and &lt;a href=&quot;https://www.festival-cannes.com/en/&quot;&gt;Cannes Film Festival&lt;/a&gt;
are competitions for the best artists in cinema，and so on.&lt;/p&gt;

&lt;p&gt;Even though the value of competition may be well understood by
a business, a practical application of it in an R&amp;amp;D department
may face many obstacles. The main problem would be to answer the question
of both employees and the management: “What are the metrics that can objectively measure
the performance of our people, who are not athletes or actors?”&lt;/p&gt;

&lt;p&gt;After more than a year of experiments we found an answer and built
a system of CAPs. We defined a list of 30+ possible achievements 
any member of our R&amp;amp;D team can make while working within the scope of
our research and development. Here are some of them as an example (the “limit”
in brackets is how many achievements of this type are possible to count in one year):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Major Product Release”: 30 (4)
— a software product in a major version is packaged and released to its users;&lt;/li&gt;
  &lt;li&gt;“Conference Article Accepted”: 70
— a new research paper submitted to a computer science conference and accepted there for publishing;&lt;/li&gt;
  &lt;li&gt;“Technical Report Accepted”: 40 (4)
— a short 2-4 page internal report about technical results is submitted to
our review board and accepted by it;&lt;/li&gt;
  &lt;li&gt;“New Hire”: 20 (4)
— a new employee has passed all required interviews and joined the team;&lt;/li&gt;
  &lt;li&gt;“GitHub Star”: 1
— most of our software projects are open source, that’s why we reward new stars obtained in GitHub;&lt;/li&gt;
  &lt;li&gt;“Lecture or Seminar”: 5 (4)
— an educational presentation made inside the department.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list is available for everybody in our internal Wiki. Each member
of our team can decide for themselves which achievements to deliver
in order to win in the ranking. The achievements from the list don’t replace
the everyday work everybody is doing but are the “extra mile” anyone
can walk in order to stand out.&lt;/p&gt;

&lt;p&gt;Some achievements are personal, such as a lecture or a conference article,
while others may only be created by a team, such as a major product release
or new GitHub stars. Individual achievements are attributed directly
to the account of an employee, while team achievements are distributed
equally among team members: we have seven teams in our department.&lt;/p&gt;

&lt;p&gt;Obviously, the levels of competence and qualification are different
for different people. Some of them are junior programmers, while others
are PhD degree holders with decades of experience. Publishing a 
computer science article for a junior programmer is a much larger achievement
(which is harder to do) than for a seasoned expert. To take this 
imbalance into account we introduced “weights” for each person, which
are used as denominators. For example, if Jeff, a junior programmer, with a weight of 
10 publishes an article, he earns 7 points (we divide 70 by 10).
At the same time, if Sarah, a PhD with a weight of 25, publishes an article,
she earns only 2.8 points (we divide 70 by 25).&lt;/p&gt;

&lt;p&gt;We organized our results monitoring system with a “push” principle in mind:
everyone is responsible for reporting their own results to our team assistant.
We don’t “pull” the information from them, they decide for themselves
when and what to report. The team assistant collects the data in a simple
Excel spreadsheet and emails it to everybody once a week (there are about 50
people in our team). The document contains the journal of all achievements
reported to date, the ranking of every team member, and their weights.&lt;/p&gt;

&lt;p&gt;Since the information is publicly available weekly, we encourage every
team member to dispute the achievements of others, if they feel like it. We don’t
have a special auditor for the results people report. Instead, peer review
demonstrates perfect results: when someone reports something that 
violates our expectations of quality or fairness, almost
immediately a concern gets raises. Most disputes, which happen every few months,
we resolve by open discussions.&lt;/p&gt;

&lt;p&gt;As was noted by David Sarnoff, an American businessman and pioneer 
of American radio and television, “competition brings out the best in products 
and the worst in people.” The CAP system we designed helped us not only
see the best in product by increasing the productivity and creativity of
our people, but also decrease the amount of “worst” which inevitably
surfaces when people compete against each other. The CAP system gives us
the rules, which are fair and transparent enough to significantly reduce the amount
of conflicts and of cheating.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Competitive metrics of people&amp;#39;s productivity lead to...&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1469925208878424067?ref_src=twsrc%5Etfw&quot;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">It’s a well-known problem nowadays: how can we measure the performance and productivity of individual contributors who do non-routine creative work? The best examples are research and development (R&amp;amp;D) teams, which usually consist of software engineers, designers, scientists, architects, quality experts, product managers, and so on. Such professionals deliver results that are hard to get down to simple numbers. Many authors argue that the very idea of measuring individual performance is toxic and may only lead to negative consequences. We tried to challenge this point of view and did an experiment in our team, which demonstrated that individual performance can indeed be measured, even if people’s work involves creativity, and results are hard to predict. We designed a system of Calibrated Achievement Points (CAPs), which are rewarded to those who deliver visible and tangible results of different kinds. This article explains how CAPs work and summarizes the results of the experiment.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/10/gridlockd.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/10/gridlockd.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SIMBA: Simplified Management By Artifacts</title><link href="https://www.yegor256.com/2021/09/09/simba.html" rel="alternate" type="text/html" title="SIMBA: Simplified Management By Artifacts" /><published>2021-09-09T00:00:00+00:00</published><updated>2021-09-09T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/09/09/simba</id><content type="html" xml:base="https://www.yegor256.com/2021/09/09/simba.html">&lt;p&gt;Here is a very simple management framework, which we have used in 
our teams for the last two years. We came to it experimentally,
trying to merge some Agile principles, 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge&quot;&gt;PMBOK&lt;/a&gt; ideas, and
common sense. Our experience so far is positive, even though
the proposed rules of work are not really about 
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project management&lt;/a&gt;, 
but more about keeping an eye on the situation and making sure
it’s not falling apart. This is the best most 
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;modern teams&lt;/a&gt; 
can afford anyway.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Lion King (2019) by Jon Favreau&quot; src=&quot;/images/2021/09/lion-king.jpg&quot; longdesc=&quot;#c0d7dab4&quot; /&gt;&lt;figcaption id=&quot;c0d7dab4&quot;&gt;Lion King (2019) by Jon Favreau&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Each group has a Team Coordinator (TC), who is usually not the most
knowledgeable expert, but someone with good organizational
skills and strong self-discipline. TC is responsible for 
four cornerstone elements of our management framework: 
1) Plan, 2) Monday Reports, 3) Weekly Calls, and 4) Demos.&lt;/p&gt;

&lt;h2 id=&quot;plan&quot;&gt;Plan&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-thinking.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Our Plan is a very simple text document visible for everybody in the
team, usually in Google Docs, and editable by the TC only. 
It is a primitive version of a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Work_breakdown_structure&quot;&gt;Work Breakdown Structure (WBS)&lt;/a&gt;
married with a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Gantt_chart&quot;&gt;Gantt Chart&lt;/a&gt;,
where each line is a tangible artifact, like a file, a document,
a software module, a PDF report, and so on. Tasks are not welcome
in the Plan, only artifacts. An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Requirements v1 [Jeff+Bill, 25-Aug, 80%]
- Dataset with 500+ files [Anna+Jeff, 3-Sep, 100%]
- XYZ module deployed [John+Jeff, 14-Sep, 50%]
- Database redesign [Bill+Mary, 27-Sep, 20%]
- ABC package released [Jeff+Mary, 1-Oct, 0%]
- Report on data analysis [Jeff+Anna, 5-Oct, 10%]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each artifact has 1) an owner and 2) a reviewer. 
In the first artifact “&lt;em&gt;Requirements v1&lt;/em&gt;” the owner is Jeff and 
the reviewer is Bill. Jeff will make sure the requirements
are delivered, and Bill will check them and confirm. 
The owners may not necessarily
be primary contributors to their artifacts, but they are responsible for
keeping the delivery status under control. 
Simply put, when an artifact is delivered on time, we &lt;em&gt;reward&lt;/em&gt;
the owner; when the delivery is missed, we also &lt;em&gt;blame&lt;/em&gt; (I know, most of you
don’t like this word) the owner.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=939ntzufGB0&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/939ntzufGB0/mqdefault.jpg&quot; alt=&quot;YouTube video #939ntzufGB0&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M178: Try to focus your team on artifacts and their delivery status;
        27 September 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Each artifact has a planned delivery date. The dates may
change as often as necessary, but at any moment of time
the Plan has to have dates defined for &lt;em&gt;all&lt;/em&gt; artifacts.
The list is reverse sorted by dates.&lt;/p&gt;

&lt;p&gt;Each artifact has a subjectively measured status of completion,
like “80%” for the first artifact above. The TC collects this
information from reviewers, not owners.&lt;/p&gt;

&lt;p&gt;No more than three artifacts may be owned by one person 
and no more than four may be reviewed. Thus, anyone
is allowed to keep no more than seven artifacts under control.&lt;/p&gt;

&lt;h2 id=&quot;monday-reports&quot;&gt;Monday Reports&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-writing.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Each Monday morning, the TC sends a report by email
to all team sponsors: a plain-text email without
any attachments or fancy formatting. All stakeholders,
including all team members, are CC-ed too.
An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;From: Team Coordinator
To: Big Boss
CC: Programmer #1, Programmer #2, Friend #1, etc.
Subject: WEEK13 Dataset, Requirements, XYZ 

Hi all,

Last week achievements:
- Added 100 new files to the Dataset [100%]
- Fixed the deployment of XYZ [50%]
- Refined the requirements [80%]
Next week plans:
- To publish ABC package draft
- To review first draft of the report
Risks:
- The server is weak, we may fail the delivery
  of the dataset, report milestone will be missed.

Bye.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;subject&lt;/strong&gt; of the email starts with the &lt;code class=&quot;highlighter-rouge&quot;&gt;WEEK13&lt;/code&gt;, where
13 is the number of the previous calendar week 
in the current year. By the way, 
there are &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_week_date&quot;&gt;52 weeks&lt;/a&gt; 
in almost every year.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;WEEK&lt;/code&gt; part makes report emails easily searchable in the inbox.
There is also a comma-separated list of the most important topics of the report,
to give the reader a quick impression about the results being reported.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;achievement&lt;/strong&gt; of the last week starts with a verb or a past
tense, like “fixed,” “added,” “refined” etc. After the verb
the artifact is mentioned, which we contributed to. At the end 
of each line there is a progress status, subjectively measured
by the author of the report. There should be no more than seven
achievement points, no matter how big the team is nor how detailed
the Plan. The report must not tell the full story, but only 
highlight what’s most important.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=2IwBc9UI4Sg&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/2IwBc9UI4Sg/mqdefault.jpg&quot; alt=&quot;YouTube video #2IwBc9UI4Sg&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;SIMBA: Simplified Management by Artifacts (at Merge Conf);
        10 December 2021.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Wherever possible, each achievement item must be supplemented
with a link leading to a pull request, or a file, or a document.
There has to be something traceable and verifiable: the readers
of the report must be able to find all necessary details for
each item without asking its owner or the author of the report.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;task&lt;/strong&gt; for a new week starts with a verb in the infinitive
form, like “to publish” or “to review” and then, of course,
the artifact is mentioned. There should be no more than seven
tasks in the list.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;risk&lt;/strong&gt;, in &lt;a href=&quot;/2019/05/14/cause-risk-effect.html&quot;&gt;Cause-Risk-Effect format&lt;/a&gt;, 
is an opportunity for the reporter to protect the team:
the more people knew about risks, the harder it will be to blame
the team for failures, which are inevitable.&lt;/p&gt;

&lt;h2 id=&quot;weekly-calls&quot;&gt;Weekly Calls&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-listening.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Every week at the same time and day, 
we make a 30-minute Zoom status call: everybody participates.
We look at the Plan and discuss whether our work is still on track.
We ask each other:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Will all artifacts delivered mean success?&lt;/li&gt;
  &lt;li&gt;Did we break down the scope correctly?&lt;/li&gt;
  &lt;li&gt;What did we miss in our Plan?&lt;/li&gt;
  &lt;li&gt;Are all owners committed to the their dates and scopes?&lt;/li&gt;
  &lt;li&gt;Are there any risks overlooked?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We &lt;em&gt;don’t&lt;/em&gt; use status calls for reporting. This is what we have
Monday Reports for.&lt;/p&gt;

&lt;p&gt;All decisions we make at status calls we call Meeting Minutes and send by email to everybody (or post in our Telegram group chat).&lt;/p&gt;

&lt;h2 id=&quot;demos&quot;&gt;Demos&lt;/h2&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;/images/2021/09/simba-speaking.svg&quot; style=&quot;width:128px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Almost every week we ask some artifact owner to demonstrate his or her
results at a one-hour “demo” Zoom call. Usually it happens when
the delivery date is approaching and an owner is ready to 
show something complete. However, demo calls are also very useful
to collect opinions when an artifact is still in progress.&lt;/p&gt;

&lt;p&gt;It’s the responsibility of a TC to make regular demo calls weekly,
inviting owners of the most important artifacts.&lt;/p&gt;

&lt;p&gt;All status calls and demo calls are recorded and posted into 
a private list on YouTube, where all team members can watch them
later.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Here is a very simple management framework, which we have used in our teams for the last two years. We came to it experimentally, trying to merge some Agile principles, PMBOK ideas, and common sense. Our experience so far is positive, even though the proposed rules of work are not really about project management, but more about keeping an eye on the situation and making sure it’s not falling apart. This is the best most modern teams can afford anyway.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/09/lion-king.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/09/lion-king.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Logging in Unit Tests, a Bad Practice</title><link href="https://www.yegor256.com/2021/08/11/logging-in-unit-tests.html" rel="alternate" type="text/html" title="Logging in Unit Tests, a Bad Practice" /><published>2021-08-11T00:00:00+00:00</published><updated>2021-08-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2021/08/11/logging-in-unit-tests</id><content type="html" xml:base="https://www.yegor256.com/2021/08/11/logging-in-unit-tests.html">&lt;p&gt;Logging is an inevitable part of debugging. Well, at least in modern
high-level programming languages and architectures. It wasn’t thirty 
years ago, in Assembly, but it is now. Sometimes we trace variables, 
but rarely. More often we just print them to console. Moreover, we don’t
just print them using &lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; or whatever it is we have for console
printing; instead, we send messages to a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_logging_framework&quot;&gt;logging framework&lt;/a&gt;, which deals with 
the console or any other logging destinations, like files. The beauty
of such frameworks is that we don’t need to remove logging after debugging
is finished—we just configure the framework to suppress all debug-level
messages in the production environment. Some logging may happen
inside unit tests. Do we also leave them there or maybe not?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Children of Men (2006) by Alfonso Cuarón&quot; src=&quot;/images/2021/08/children-of-men.jpg&quot; longdesc=&quot;#739264dd&quot; /&gt;&lt;figcaption id=&quot;739264dd&quot;&gt;Children of Men (2006) by Alfonso Cuarón&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is an example (it’s a simplification of a real unit test at
&lt;a href=&quot;https://github.com/polystat/polystat/blob/0.0.1/src/test/java/org/polystat/far/CalcTest.java&quot;&gt;CalcTest.java&lt;/a&gt;
from &lt;a href=&quot;https://www.polystat.org&quot;&gt;Polystat&lt;/a&gt;, a static analyzer we’re working on right now):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.jcabi.log.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.jcabi.xml.XML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildsSimpleXml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is the XML:\n%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNullValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is Java and I’m using &lt;a href=&quot;https://junit.org/junit5/&quot;&gt;JUnit5&lt;/a&gt;+&lt;a href=&quot;http://hamcrest.org/&quot;&gt;Hamcrest&lt;/a&gt; 
together with my own logging framework
&lt;a href=&quot;https://log.jcabi.com&quot;&gt;jcabi-log&lt;/a&gt;, which is a decorator of 
&lt;a href=&quot;http://www.slf4j.org/&quot;&gt;Slf4j&lt;/a&gt;, which uses &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j&lt;/a&gt; to print to 
the console.&lt;/p&gt;

&lt;p&gt;What is going on here? There is a class &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; with a method &lt;code class=&quot;highlighter-rouge&quot;&gt;build()&lt;/code&gt;, which
makes an XML document (I’m using &lt;a href=&quot;https://xml.jcabi.com&quot;&gt;jcabi-xml&lt;/a&gt; library, which is a decorator of
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/package-summary.html&quot;&gt;JDK DOM&lt;/a&gt;). 
Then, the unit test prints the contents of the XML document to
the console and makes a pretty silly assertion: the document is not NULL.
It is silly because if it were NULL, the logging statement 
would already fail at the &lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;I’m the developer of this code, so I know what was going on: I was too lazy
to write a proper assertion, which would look into the XML document
and ensure that there were proper elements inside. I just printed it to the
console, &lt;em&gt;visually&lt;/em&gt; confirmed its validity and called it a day. 
If I’d had more time, this is how I would have written a much better unit test
(I made the &lt;a href=&quot;https://github.com/polystat/polystat/issues/10&quot;&gt;improvements&lt;/a&gt; in Polystat tests just now):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.jcabi.matchers.XhtmlMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildsSimpleXml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;XhtmlMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xhtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;XhtmlMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasXPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the XML document is built and then tested for the presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;//foo&lt;/code&gt; 
&lt;a href=&quot;https://en.wikipedia.org/wiki/XPath&quot;&gt;XPath&lt;/a&gt; inside it. 
The content of the document will be printed to the console
only in the case where the assertion fails. If the XML has the required
XPath, there will be no console output, which means no noise for future
developers.&lt;/p&gt;

&lt;p&gt;Moreover, now it’s a &lt;em&gt;single-statement&lt;/em&gt; test, which by itself is 
&lt;a href=&quot;/2017/05/17/single-statement-unit-tests.html&quot;&gt;good practice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Looking back on my experience of testing and logging, 
I believe that logging in unit tests is a bad idea. Sometimes
inevitable, because we are lazy or simply don’t have enough time, but still bad.
Logging helps us confirm visually the correctness of the output,
but it takes this knowledge away from the project. Those who will work with
the test later on won’t know what we’ve seen there. They will
see the output at the console, but will not understand whether it &lt;em&gt;still&lt;/em&gt; matches
my expectations at the time of writing.&lt;/p&gt;

&lt;p&gt;I would say that every logging line in a unit test is a message from its author:
“I know something about the data I see now, but I’m too lazy to tell you about it,
you just have to believe me that it looks good.”&lt;/p&gt;

&lt;p&gt;I suggest we don’t leave such messages in our code.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Do you print log messages from your unit tests?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1421723724638789632?ref_src=twsrc%5Etfw&quot;&gt;August 1, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Logging is an inevitable part of debugging. Well, at least in modern high-level programming languages and architectures. It wasn’t thirty years ago, in Assembly, but it is now. Sometimes we trace variables, but rarely. More often we just print them to console. Moreover, we don’t just print them using println or whatever it is we have for console printing; instead, we send messages to a logging framework, which deals with the console or any other logging destinations, like files. The beauty of such frameworks is that we don’t need to remove logging after debugging is finished—we just configure the framework to suppress all debug-level messages in the production environment. Some logging may happen inside unit tests. Do we also leave them there or maybe not?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2021/08/children-of-men.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2021/08/children-of-men.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>